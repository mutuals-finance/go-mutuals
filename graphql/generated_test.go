// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package graphql_test

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
	"github.com/mikeydub/go-gallery/service/persist"
)

type AuthMechanism struct {
	Eoa        *EoaAuth        `json:"eoa"`
	GnosisSafe *GnosisSafeAuth `json:"gnosisSafe"`
	Debug      *DebugAuth      `json:"debug"`
	MagicLink  *MagicLinkAuth  `json:"magicLink"`
}

// GetEoa returns AuthMechanism.Eoa, and is useful for accessing the field via an interface.
func (v *AuthMechanism) GetEoa() *EoaAuth { return v.Eoa }

// GetGnosisSafe returns AuthMechanism.GnosisSafe, and is useful for accessing the field via an interface.
func (v *AuthMechanism) GetGnosisSafe() *GnosisSafeAuth { return v.GnosisSafe }

// GetDebug returns AuthMechanism.Debug, and is useful for accessing the field via an interface.
func (v *AuthMechanism) GetDebug() *DebugAuth { return v.Debug }

// GetMagicLink returns AuthMechanism.MagicLink, and is useful for accessing the field via an interface.
func (v *AuthMechanism) GetMagicLink() *MagicLinkAuth { return v.MagicLink }

type Chain string

const (
	ChainEthereum Chain = "Ethereum"
	ChainArbitrum Chain = "Arbitrum"
	ChainPolygon  Chain = "Polygon"
	ChainOptimism Chain = "Optimism"
)

type ChainAddressInput struct {
	Address string `json:"address"`
	Chain   Chain  `json:"chain"`
}

// GetAddress returns ChainAddressInput.Address, and is useful for accessing the field via an interface.
func (v *ChainAddressInput) GetAddress() string { return v.Address }

// GetChain returns ChainAddressInput.Chain, and is useful for accessing the field via an interface.
func (v *ChainAddressInput) GetChain() Chain { return v.Chain }

type ChainPubKeyInput struct {
	PubKey string `json:"pubKey"`
	Chain  Chain  `json:"chain"`
}

// GetPubKey returns ChainPubKeyInput.PubKey, and is useful for accessing the field via an interface.
func (v *ChainPubKeyInput) GetPubKey() string { return v.PubKey }

// GetChain returns ChainPubKeyInput.Chain, and is useful for accessing the field via an interface.
func (v *ChainPubKeyInput) GetChain() Chain { return v.Chain }

type CollectionLayoutInput struct {
	Sections      []int                          `json:"sections"`
	SectionLayout []CollectionSectionLayoutInput `json:"sectionLayout"`
}

// GetSections returns CollectionLayoutInput.Sections, and is useful for accessing the field via an interface.
func (v *CollectionLayoutInput) GetSections() []int { return v.Sections }

// GetSectionLayout returns CollectionLayoutInput.SectionLayout, and is useful for accessing the field via an interface.
func (v *CollectionLayoutInput) GetSectionLayout() []CollectionSectionLayoutInput {
	return v.SectionLayout
}

type CollectionSectionLayoutInput struct {
	Columns    int   `json:"columns"`
	Whitespace []int `json:"whitespace"`
}

// GetColumns returns CollectionSectionLayoutInput.Columns, and is useful for accessing the field via an interface.
func (v *CollectionSectionLayoutInput) GetColumns() int { return v.Columns }

// GetWhitespace returns CollectionSectionLayoutInput.Whitespace, and is useful for accessing the field via an interface.
func (v *CollectionSectionLayoutInput) GetWhitespace() []int { return v.Whitespace }

type CollectionTokenSettingsInput struct {
	TokenId    persist.DBID `json:"tokenId"`
	RenderLive bool         `json:"renderLive"`
}

// GetTokenId returns CollectionTokenSettingsInput.TokenId, and is useful for accessing the field via an interface.
func (v *CollectionTokenSettingsInput) GetTokenId() persist.DBID { return v.TokenId }

// GetRenderLive returns CollectionTokenSettingsInput.RenderLive, and is useful for accessing the field via an interface.
func (v *CollectionTokenSettingsInput) GetRenderLive() bool { return v.RenderLive }

type CreateCollectionInGalleryInput struct {
	Name           string                         `json:"name"`
	CollectorsNote string                         `json:"collectorsNote"`
	Tokens         []persist.DBID                 `json:"tokens"`
	Layout         CollectionLayoutInput          `json:"layout"`
	TokenSettings  []CollectionTokenSettingsInput `json:"tokenSettings"`
	Hidden         bool                           `json:"hidden"`
	GivenID        persist.DBID                   `json:"givenID"`
}

// GetName returns CreateCollectionInGalleryInput.Name, and is useful for accessing the field via an interface.
func (v *CreateCollectionInGalleryInput) GetName() string { return v.Name }

// GetCollectorsNote returns CreateCollectionInGalleryInput.CollectorsNote, and is useful for accessing the field via an interface.
func (v *CreateCollectionInGalleryInput) GetCollectorsNote() string { return v.CollectorsNote }

// GetTokens returns CreateCollectionInGalleryInput.Tokens, and is useful for accessing the field via an interface.
func (v *CreateCollectionInGalleryInput) GetTokens() []persist.DBID { return v.Tokens }

// GetLayout returns CreateCollectionInGalleryInput.Layout, and is useful for accessing the field via an interface.
func (v *CreateCollectionInGalleryInput) GetLayout() CollectionLayoutInput { return v.Layout }

// GetTokenSettings returns CreateCollectionInGalleryInput.TokenSettings, and is useful for accessing the field via an interface.
func (v *CreateCollectionInGalleryInput) GetTokenSettings() []CollectionTokenSettingsInput {
	return v.TokenSettings
}

// GetHidden returns CreateCollectionInGalleryInput.Hidden, and is useful for accessing the field via an interface.
func (v *CreateCollectionInGalleryInput) GetHidden() bool { return v.Hidden }

// GetGivenID returns CreateCollectionInGalleryInput.GivenID, and is useful for accessing the field via an interface.
func (v *CreateCollectionInGalleryInput) GetGivenID() persist.DBID { return v.GivenID }

type CreateCollectionInput struct {
	GalleryId      persist.DBID                   `json:"galleryId"`
	Name           string                         `json:"name"`
	CollectorsNote string                         `json:"collectorsNote"`
	Tokens         []persist.DBID                 `json:"tokens"`
	Layout         CollectionLayoutInput          `json:"layout"`
	TokenSettings  []CollectionTokenSettingsInput `json:"tokenSettings"`
	Caption        *string                        `json:"caption"`
}

// GetGalleryId returns CreateCollectionInput.GalleryId, and is useful for accessing the field via an interface.
func (v *CreateCollectionInput) GetGalleryId() persist.DBID { return v.GalleryId }

// GetName returns CreateCollectionInput.Name, and is useful for accessing the field via an interface.
func (v *CreateCollectionInput) GetName() string { return v.Name }

// GetCollectorsNote returns CreateCollectionInput.CollectorsNote, and is useful for accessing the field via an interface.
func (v *CreateCollectionInput) GetCollectorsNote() string { return v.CollectorsNote }

// GetTokens returns CreateCollectionInput.Tokens, and is useful for accessing the field via an interface.
func (v *CreateCollectionInput) GetTokens() []persist.DBID { return v.Tokens }

// GetLayout returns CreateCollectionInput.Layout, and is useful for accessing the field via an interface.
func (v *CreateCollectionInput) GetLayout() CollectionLayoutInput { return v.Layout }

// GetTokenSettings returns CreateCollectionInput.TokenSettings, and is useful for accessing the field via an interface.
func (v *CreateCollectionInput) GetTokenSettings() []CollectionTokenSettingsInput {
	return v.TokenSettings
}

// GetCaption returns CreateCollectionInput.Caption, and is useful for accessing the field via an interface.
func (v *CreateCollectionInput) GetCaption() *string { return v.Caption }

type CreateGalleryInput struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Position    string  `json:"position"`
}

// GetName returns CreateGalleryInput.Name, and is useful for accessing the field via an interface.
func (v *CreateGalleryInput) GetName() *string { return v.Name }

// GetDescription returns CreateGalleryInput.Description, and is useful for accessing the field via an interface.
func (v *CreateGalleryInput) GetDescription() *string { return v.Description }

// GetPosition returns CreateGalleryInput.Position, and is useful for accessing the field via an interface.
func (v *CreateGalleryInput) GetPosition() string { return v.Position }

type CreateUserInput struct {
	Username           string  `json:"username"`
	Bio                *string `json:"bio"`
	Email              *string `json:"email"`
	GalleryName        *string `json:"galleryName"`
	GalleryDescription *string `json:"galleryDescription"`
	GalleryPosition    *string `json:"galleryPosition"`
}

// GetUsername returns CreateUserInput.Username, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetUsername() string { return v.Username }

// GetBio returns CreateUserInput.Bio, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetBio() *string { return v.Bio }

// GetEmail returns CreateUserInput.Email, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetEmail() *string { return v.Email }

// GetGalleryName returns CreateUserInput.GalleryName, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetGalleryName() *string { return v.GalleryName }

// GetGalleryDescription returns CreateUserInput.GalleryDescription, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetGalleryDescription() *string { return v.GalleryDescription }

// GetGalleryPosition returns CreateUserInput.GalleryPosition, and is useful for accessing the field via an interface.
func (v *CreateUserInput) GetGalleryPosition() *string { return v.GalleryPosition }

type DebugAuth struct {
	AsUsername     *string             `json:"asUsername"`
	UserId         *persist.DBID       `json:"userId"`
	ChainAddresses []ChainAddressInput `json:"chainAddresses"`
}

// GetAsUsername returns DebugAuth.AsUsername, and is useful for accessing the field via an interface.
func (v *DebugAuth) GetAsUsername() *string { return v.AsUsername }

// GetUserId returns DebugAuth.UserId, and is useful for accessing the field via an interface.
func (v *DebugAuth) GetUserId() *persist.DBID { return v.UserId }

// GetChainAddresses returns DebugAuth.ChainAddresses, and is useful for accessing the field via an interface.
func (v *DebugAuth) GetChainAddresses() []ChainAddressInput { return v.ChainAddresses }

type DebugSocialAuth struct {
	Provider SocialAccountType `json:"provider"`
	Id       string            `json:"id"`
	Username string            `json:"username"`
}

// GetProvider returns DebugSocialAuth.Provider, and is useful for accessing the field via an interface.
func (v *DebugSocialAuth) GetProvider() SocialAccountType { return v.Provider }

// GetId returns DebugSocialAuth.Id, and is useful for accessing the field via an interface.
func (v *DebugSocialAuth) GetId() string { return v.Id }

// GetUsername returns DebugSocialAuth.Username, and is useful for accessing the field via an interface.
func (v *DebugSocialAuth) GetUsername() string { return v.Username }

type EoaAuth struct {
	ChainPubKey ChainPubKeyInput `json:"chainPubKey"`
	Nonce       string           `json:"nonce"`
	Signature   string           `json:"signature"`
}

// GetChainPubKey returns EoaAuth.ChainPubKey, and is useful for accessing the field via an interface.
func (v *EoaAuth) GetChainPubKey() ChainPubKeyInput { return v.ChainPubKey }

// GetNonce returns EoaAuth.Nonce, and is useful for accessing the field via an interface.
func (v *EoaAuth) GetNonce() string { return v.Nonce }

// GetSignature returns EoaAuth.Signature, and is useful for accessing the field via an interface.
func (v *EoaAuth) GetSignature() string { return v.Signature }

type GnosisSafeAuth struct {
	Address string `json:"address"`
	Nonce   string `json:"nonce"`
}

// GetAddress returns GnosisSafeAuth.Address, and is useful for accessing the field via an interface.
func (v *GnosisSafeAuth) GetAddress() string { return v.Address }

// GetNonce returns GnosisSafeAuth.Nonce, and is useful for accessing the field via an interface.
func (v *GnosisSafeAuth) GetNonce() string { return v.Nonce }

type MagicLinkAuth struct {
	Token string `json:"token"`
}

// GetToken returns MagicLinkAuth.Token, and is useful for accessing the field via an interface.
func (v *MagicLinkAuth) GetToken() string { return v.Token }

type MoveCollectionToGalleryInput struct {
	SourceCollectionId persist.DBID `json:"sourceCollectionId"`
	TargetGalleryId    persist.DBID `json:"targetGalleryId"`
}

// GetSourceCollectionId returns MoveCollectionToGalleryInput.SourceCollectionId, and is useful for accessing the field via an interface.
func (v *MoveCollectionToGalleryInput) GetSourceCollectionId() persist.DBID {
	return v.SourceCollectionId
}

// GetTargetGalleryId returns MoveCollectionToGalleryInput.TargetGalleryId, and is useful for accessing the field via an interface.
func (v *MoveCollectionToGalleryInput) GetTargetGalleryId() persist.DBID { return v.TargetGalleryId }

type PublishGalleryInput struct {
	GalleryId persist.DBID `json:"galleryId"`
	EditId    string       `json:"editId"`
	Caption   *string      `json:"caption"`
}

// GetGalleryId returns PublishGalleryInput.GalleryId, and is useful for accessing the field via an interface.
func (v *PublishGalleryInput) GetGalleryId() persist.DBID { return v.GalleryId }

// GetEditId returns PublishGalleryInput.EditId, and is useful for accessing the field via an interface.
func (v *PublishGalleryInput) GetEditId() string { return v.EditId }

// GetCaption returns PublishGalleryInput.Caption, and is useful for accessing the field via an interface.
func (v *PublishGalleryInput) GetCaption() *string { return v.Caption }

type SocialAccountType string

const (
	SocialAccountTypeTwitter SocialAccountType = "Twitter"
)

type SocialAuthMechanism struct {
	Twitter *TwitterAuth     `json:"twitter"`
	Debug   *DebugSocialAuth `json:"debug"`
}

// GetTwitter returns SocialAuthMechanism.Twitter, and is useful for accessing the field via an interface.
func (v *SocialAuthMechanism) GetTwitter() *TwitterAuth { return v.Twitter }

// GetDebug returns SocialAuthMechanism.Debug, and is useful for accessing the field via an interface.
func (v *SocialAuthMechanism) GetDebug() *DebugSocialAuth { return v.Debug }

type TwitterAuth struct {
	Code string `json:"code"`
}

// GetCode returns TwitterAuth.Code, and is useful for accessing the field via an interface.
func (v *TwitterAuth) GetCode() string { return v.Code }

type UpdateCollectionInput struct {
	Dbid           persist.DBID                   `json:"dbid"`
	Name           string                         `json:"name"`
	CollectorsNote string                         `json:"collectorsNote"`
	Tokens         []persist.DBID                 `json:"tokens"`
	Layout         CollectionLayoutInput          `json:"layout"`
	TokenSettings  []CollectionTokenSettingsInput `json:"tokenSettings"`
	Hidden         bool                           `json:"hidden"`
}

// GetDbid returns UpdateCollectionInput.Dbid, and is useful for accessing the field via an interface.
func (v *UpdateCollectionInput) GetDbid() persist.DBID { return v.Dbid }

// GetName returns UpdateCollectionInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateCollectionInput) GetName() string { return v.Name }

// GetCollectorsNote returns UpdateCollectionInput.CollectorsNote, and is useful for accessing the field via an interface.
func (v *UpdateCollectionInput) GetCollectorsNote() string { return v.CollectorsNote }

// GetTokens returns UpdateCollectionInput.Tokens, and is useful for accessing the field via an interface.
func (v *UpdateCollectionInput) GetTokens() []persist.DBID { return v.Tokens }

// GetLayout returns UpdateCollectionInput.Layout, and is useful for accessing the field via an interface.
func (v *UpdateCollectionInput) GetLayout() CollectionLayoutInput { return v.Layout }

// GetTokenSettings returns UpdateCollectionInput.TokenSettings, and is useful for accessing the field via an interface.
func (v *UpdateCollectionInput) GetTokenSettings() []CollectionTokenSettingsInput {
	return v.TokenSettings
}

// GetHidden returns UpdateCollectionInput.Hidden, and is useful for accessing the field via an interface.
func (v *UpdateCollectionInput) GetHidden() bool { return v.Hidden }

type UpdateGalleryInput struct {
	GalleryId          persist.DBID                      `json:"galleryId"`
	Name               *string                           `json:"name"`
	Description        *string                           `json:"description"`
	Caption            *string                           `json:"caption"`
	DeletedCollections []persist.DBID                    `json:"deletedCollections"`
	UpdatedCollections []*UpdateCollectionInput          `json:"updatedCollections"`
	CreatedCollections []*CreateCollectionInGalleryInput `json:"createdCollections"`
	Order              []persist.DBID                    `json:"order"`
	EditId             *string                           `json:"editId"`
}

// GetGalleryId returns UpdateGalleryInput.GalleryId, and is useful for accessing the field via an interface.
func (v *UpdateGalleryInput) GetGalleryId() persist.DBID { return v.GalleryId }

// GetName returns UpdateGalleryInput.Name, and is useful for accessing the field via an interface.
func (v *UpdateGalleryInput) GetName() *string { return v.Name }

// GetDescription returns UpdateGalleryInput.Description, and is useful for accessing the field via an interface.
func (v *UpdateGalleryInput) GetDescription() *string { return v.Description }

// GetCaption returns UpdateGalleryInput.Caption, and is useful for accessing the field via an interface.
func (v *UpdateGalleryInput) GetCaption() *string { return v.Caption }

// GetDeletedCollections returns UpdateGalleryInput.DeletedCollections, and is useful for accessing the field via an interface.
func (v *UpdateGalleryInput) GetDeletedCollections() []persist.DBID { return v.DeletedCollections }

// GetUpdatedCollections returns UpdateGalleryInput.UpdatedCollections, and is useful for accessing the field via an interface.
func (v *UpdateGalleryInput) GetUpdatedCollections() []*UpdateCollectionInput {
	return v.UpdatedCollections
}

// GetCreatedCollections returns UpdateGalleryInput.CreatedCollections, and is useful for accessing the field via an interface.
func (v *UpdateGalleryInput) GetCreatedCollections() []*CreateCollectionInGalleryInput {
	return v.CreatedCollections
}

// GetOrder returns UpdateGalleryInput.Order, and is useful for accessing the field via an interface.
func (v *UpdateGalleryInput) GetOrder() []persist.DBID { return v.Order }

// GetEditId returns UpdateGalleryInput.EditId, and is useful for accessing the field via an interface.
func (v *UpdateGalleryInput) GetEditId() *string { return v.EditId }

type UpdateSocialAccountDisplayedInput struct {
	Type      SocialAccountType `json:"type"`
	Displayed bool              `json:"displayed"`
}

// GetType returns UpdateSocialAccountDisplayedInput.Type, and is useful for accessing the field via an interface.
func (v *UpdateSocialAccountDisplayedInput) GetType() SocialAccountType { return v.Type }

// GetDisplayed returns UpdateSocialAccountDisplayedInput.Displayed, and is useful for accessing the field via an interface.
func (v *UpdateSocialAccountDisplayedInput) GetDisplayed() bool { return v.Displayed }

type UpdateUserExperienceInput struct {
	ExperienceType UserExperienceType `json:"experienceType"`
	Experienced    bool               `json:"experienced"`
}

// GetExperienceType returns UpdateUserExperienceInput.ExperienceType, and is useful for accessing the field via an interface.
func (v *UpdateUserExperienceInput) GetExperienceType() UserExperienceType { return v.ExperienceType }

// GetExperienced returns UpdateUserExperienceInput.Experienced, and is useful for accessing the field via an interface.
func (v *UpdateUserExperienceInput) GetExperienced() bool { return v.Experienced }

type UserExperienceType string

const (
	UserExperienceTypeMultigalleryannouncement          UserExperienceType = "MultiGalleryAnnouncement"
	UserExperienceTypeEmailupsell                       UserExperienceType = "EmailUpsell"
	UserExperienceTypeMaintenancefeb2023                UserExperienceType = "MaintenanceFeb2023"
	UserExperienceTypeTwitterconnectiononboardingupsell UserExperienceType = "TwitterConnectionOnboardingUpsell"
	UserExperienceTypeUpsellmintmemento4                UserExperienceType = "UpsellMintMemento4"
)

// __addUserWalletMutationInput is used internally by genqlient
type __addUserWalletMutationInput struct {
	ChainAddress  ChainAddressInput `json:"chainAddress"`
	AuthMechanism AuthMechanism     `json:"authMechanism"`
}

// GetChainAddress returns __addUserWalletMutationInput.ChainAddress, and is useful for accessing the field via an interface.
func (v *__addUserWalletMutationInput) GetChainAddress() ChainAddressInput { return v.ChainAddress }

// GetAuthMechanism returns __addUserWalletMutationInput.AuthMechanism, and is useful for accessing the field via an interface.
func (v *__addUserWalletMutationInput) GetAuthMechanism() AuthMechanism { return v.AuthMechanism }

// __connectSocialAccountInput is used internally by genqlient
type __connectSocialAccountInput struct {
	Auth    SocialAuthMechanism `json:"auth"`
	Display bool                `json:"display"`
}

// GetAuth returns __connectSocialAccountInput.Auth, and is useful for accessing the field via an interface.
func (v *__connectSocialAccountInput) GetAuth() SocialAuthMechanism { return v.Auth }

// GetDisplay returns __connectSocialAccountInput.Display, and is useful for accessing the field via an interface.
func (v *__connectSocialAccountInput) GetDisplay() bool { return v.Display }

// __createCollectionMutationInput is used internally by genqlient
type __createCollectionMutationInput struct {
	Input CreateCollectionInput `json:"input"`
}

// GetInput returns __createCollectionMutationInput.Input, and is useful for accessing the field via an interface.
func (v *__createCollectionMutationInput) GetInput() CreateCollectionInput { return v.Input }

// __createGalleryMutationInput is used internally by genqlient
type __createGalleryMutationInput struct {
	Input CreateGalleryInput `json:"input"`
}

// GetInput returns __createGalleryMutationInput.Input, and is useful for accessing the field via an interface.
func (v *__createGalleryMutationInput) GetInput() CreateGalleryInput { return v.Input }

// __createUserMutationInput is used internally by genqlient
type __createUserMutationInput struct {
	AuthMechanism AuthMechanism   `json:"authMechanism"`
	Input         CreateUserInput `json:"input"`
}

// GetAuthMechanism returns __createUserMutationInput.AuthMechanism, and is useful for accessing the field via an interface.
func (v *__createUserMutationInput) GetAuthMechanism() AuthMechanism { return v.AuthMechanism }

// GetInput returns __createUserMutationInput.Input, and is useful for accessing the field via an interface.
func (v *__createUserMutationInput) GetInput() CreateUserInput { return v.Input }

// __disconnectSocialAccountInput is used internally by genqlient
type __disconnectSocialAccountInput struct {
	AccountType SocialAccountType `json:"accountType"`
}

// GetAccountType returns __disconnectSocialAccountInput.AccountType, and is useful for accessing the field via an interface.
func (v *__disconnectSocialAccountInput) GetAccountType() SocialAccountType { return v.AccountType }

// __getAuthNonceMutationInput is used internally by genqlient
type __getAuthNonceMutationInput struct {
	Input ChainAddressInput `json:"input"`
}

// GetInput returns __getAuthNonceMutationInput.Input, and is useful for accessing the field via an interface.
func (v *__getAuthNonceMutationInput) GetInput() ChainAddressInput { return v.Input }

// __loginMutationInput is used internally by genqlient
type __loginMutationInput struct {
	AuthMechanism AuthMechanism `json:"authMechanism"`
}

// GetAuthMechanism returns __loginMutationInput.AuthMechanism, and is useful for accessing the field via an interface.
func (v *__loginMutationInput) GetAuthMechanism() AuthMechanism { return v.AuthMechanism }

// __moveCollectionToGalleryInput is used internally by genqlient
type __moveCollectionToGalleryInput struct {
	Input MoveCollectionToGalleryInput `json:"input"`
}

// GetInput returns __moveCollectionToGalleryInput.Input, and is useful for accessing the field via an interface.
func (v *__moveCollectionToGalleryInput) GetInput() MoveCollectionToGalleryInput { return v.Input }

// __publishGalleryMutationInput is used internally by genqlient
type __publishGalleryMutationInput struct {
	Input PublishGalleryInput `json:"input"`
}

// GetInput returns __publishGalleryMutationInput.Input, and is useful for accessing the field via an interface.
func (v *__publishGalleryMutationInput) GetInput() PublishGalleryInput { return v.Input }

// __removeUserWalletsMutationInput is used internally by genqlient
type __removeUserWalletsMutationInput struct {
	WalletIds []persist.DBID `json:"walletIds"`
}

// GetWalletIds returns __removeUserWalletsMutationInput.WalletIds, and is useful for accessing the field via an interface.
func (v *__removeUserWalletsMutationInput) GetWalletIds() []persist.DBID { return v.WalletIds }

// __syncTokensMutationInput is used internally by genqlient
type __syncTokensMutationInput struct {
	Chains []Chain `json:"chains"`
}

// GetChains returns __syncTokensMutationInput.Chains, and is useful for accessing the field via an interface.
func (v *__syncTokensMutationInput) GetChains() []Chain { return v.Chains }

// __updateGalleryMutationInput is used internally by genqlient
type __updateGalleryMutationInput struct {
	Input UpdateGalleryInput `json:"input"`
}

// GetInput returns __updateGalleryMutationInput.Input, and is useful for accessing the field via an interface.
func (v *__updateGalleryMutationInput) GetInput() UpdateGalleryInput { return v.Input }

// __updateSocialAccountDisplayedInput is used internally by genqlient
type __updateSocialAccountDisplayedInput struct {
	Input UpdateSocialAccountDisplayedInput `json:"input"`
}

// GetInput returns __updateSocialAccountDisplayedInput.Input, and is useful for accessing the field via an interface.
func (v *__updateSocialAccountDisplayedInput) GetInput() UpdateSocialAccountDisplayedInput {
	return v.Input
}

// __updateUserExperienceInput is used internally by genqlient
type __updateUserExperienceInput struct {
	Input UpdateUserExperienceInput `json:"input"`
}

// GetInput returns __updateUserExperienceInput.Input, and is useful for accessing the field via an interface.
func (v *__updateUserExperienceInput) GetInput() UpdateUserExperienceInput { return v.Input }

// __userByAddressQueryInput is used internally by genqlient
type __userByAddressQueryInput struct {
	Input ChainAddressInput `json:"input"`
}

// GetInput returns __userByAddressQueryInput.Input, and is useful for accessing the field via an interface.
func (v *__userByAddressQueryInput) GetInput() ChainAddressInput { return v.Input }

// __userByIdQueryInput is used internally by genqlient
type __userByIdQueryInput struct {
	Id persist.DBID `json:"id"`
}

// GetId returns __userByIdQueryInput.Id, and is useful for accessing the field via an interface.
func (v *__userByIdQueryInput) GetId() persist.DBID { return v.Id }

// __userByUsernameQueryInput is used internally by genqlient
type __userByUsernameQueryInput struct {
	User string `json:"user"`
}

// GetUser returns __userByUsernameQueryInput.User, and is useful for accessing the field via an interface.
func (v *__userByUsernameQueryInput) GetUser() string { return v.User }

// __viewGalleryMutationInput is used internally by genqlient
type __viewGalleryMutationInput struct {
	GalleryId persist.DBID `json:"galleryId"`
}

// GetGalleryId returns __viewGalleryMutationInput.GalleryId, and is useful for accessing the field via an interface.
func (v *__viewGalleryMutationInput) GetGalleryId() persist.DBID { return v.GalleryId }

// addUserWalletMutationAddUserWalletAddUserWalletPayload includes the requested fields of the GraphQL type AddUserWalletPayload.
type addUserWalletMutationAddUserWalletAddUserWalletPayload struct {
	Typename *string                                                       `json:"__typename"`
	Viewer   *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewer `json:"viewer"`
}

// GetTypename returns addUserWalletMutationAddUserWalletAddUserWalletPayload.Typename, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayload) GetTypename() *string {
	return v.Typename
}

// GetViewer returns addUserWalletMutationAddUserWalletAddUserWalletPayload.Viewer, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayload) GetViewer() *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewer {
	return v.Viewer
}

// addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError includes the requested fields of the GraphQL interface AddUserWalletPayloadOrError.
//
// addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError is implemented by the following types:
// addUserWalletMutationAddUserWalletAddUserWalletPayload
// addUserWalletMutationAddUserWalletErrAddressOwnedByUser
// addUserWalletMutationAddUserWalletErrAuthenticationFailed
// addUserWalletMutationAddUserWalletErrInvalidInput
// addUserWalletMutationAddUserWalletErrNotAuthorized
type addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError interface {
	implementsGraphQLInterfaceaddUserWalletMutationAddUserWalletAddUserWalletPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *addUserWalletMutationAddUserWalletAddUserWalletPayload) implementsGraphQLInterfaceaddUserWalletMutationAddUserWalletAddUserWalletPayloadOrError() {
}
func (v *addUserWalletMutationAddUserWalletErrAddressOwnedByUser) implementsGraphQLInterfaceaddUserWalletMutationAddUserWalletAddUserWalletPayloadOrError() {
}
func (v *addUserWalletMutationAddUserWalletErrAuthenticationFailed) implementsGraphQLInterfaceaddUserWalletMutationAddUserWalletAddUserWalletPayloadOrError() {
}
func (v *addUserWalletMutationAddUserWalletErrInvalidInput) implementsGraphQLInterfaceaddUserWalletMutationAddUserWalletAddUserWalletPayloadOrError() {
}
func (v *addUserWalletMutationAddUserWalletErrNotAuthorized) implementsGraphQLInterfaceaddUserWalletMutationAddUserWalletAddUserWalletPayloadOrError() {
}

func __unmarshaladdUserWalletMutationAddUserWalletAddUserWalletPayloadOrError(b []byte, v *addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AddUserWalletPayload":
		*v = new(addUserWalletMutationAddUserWalletAddUserWalletPayload)
		return json.Unmarshal(b, *v)
	case "ErrAddressOwnedByUser":
		*v = new(addUserWalletMutationAddUserWalletErrAddressOwnedByUser)
		return json.Unmarshal(b, *v)
	case "ErrAuthenticationFailed":
		*v = new(addUserWalletMutationAddUserWalletErrAuthenticationFailed)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(addUserWalletMutationAddUserWalletErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(addUserWalletMutationAddUserWalletErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing AddUserWalletPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshaladdUserWalletMutationAddUserWalletAddUserWalletPayloadOrError(v *addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *addUserWalletMutationAddUserWalletAddUserWalletPayload:
		typename = "AddUserWalletPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*addUserWalletMutationAddUserWalletAddUserWalletPayload
		}{typename, v}
		return json.Marshal(result)
	case *addUserWalletMutationAddUserWalletErrAddressOwnedByUser:
		typename = "ErrAddressOwnedByUser"

		result := struct {
			TypeName string `json:"__typename"`
			*addUserWalletMutationAddUserWalletErrAddressOwnedByUser
		}{typename, v}
		return json.Marshal(result)
	case *addUserWalletMutationAddUserWalletErrAuthenticationFailed:
		typename = "ErrAuthenticationFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*addUserWalletMutationAddUserWalletErrAuthenticationFailed
		}{typename, v}
		return json.Marshal(result)
	case *addUserWalletMutationAddUserWalletErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*addUserWalletMutationAddUserWalletErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *addUserWalletMutationAddUserWalletErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*addUserWalletMutationAddUserWalletErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError: "%T"`, v)
	}
}

// addUserWalletMutationAddUserWalletAddUserWalletPayloadViewer includes the requested fields of the GraphQL type Viewer.
type addUserWalletMutationAddUserWalletAddUserWalletPayloadViewer struct {
	User *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUser `json:"user"`
}

// GetUser returns addUserWalletMutationAddUserWalletAddUserWalletPayloadViewer.User, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewer) GetUser() *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUser {
	return v.User
}

// addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUser includes the requested fields of the GraphQL type SplitFiUser.
type addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUser struct {
	Wallets []*addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWallet `json:"wallets"`
}

// GetWallets returns addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUser.Wallets, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUser) GetWallets() []*addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWallet {
	return v.Wallets
}

// addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWallet includes the requested fields of the GraphQL type Wallet.
type addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWallet struct {
	Dbid         persist.DBID                                                                                          `json:"dbid"`
	ChainAddress *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWalletChainAddress `json:"chainAddress"`
}

// GetDbid returns addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWallet.Dbid, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWallet) GetDbid() persist.DBID {
	return v.Dbid
}

// GetChainAddress returns addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWallet.ChainAddress, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWallet) GetChainAddress() *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWalletChainAddress {
	return v.ChainAddress
}

// addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWalletChainAddress includes the requested fields of the GraphQL type ChainAddress.
type addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWalletChainAddress struct {
	Address *string `json:"address"`
	Chain   *Chain  `json:"chain"`
}

// GetAddress returns addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWalletChainAddress.Address, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWalletChainAddress) GetAddress() *string {
	return v.Address
}

// GetChain returns addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWalletChainAddress.Chain, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletAddUserWalletPayloadViewerUserSplitFiUserWalletsWalletChainAddress) GetChain() *Chain {
	return v.Chain
}

// addUserWalletMutationAddUserWalletErrAddressOwnedByUser includes the requested fields of the GraphQL type ErrAddressOwnedByUser.
type addUserWalletMutationAddUserWalletErrAddressOwnedByUser struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns addUserWalletMutationAddUserWalletErrAddressOwnedByUser.Typename, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrAddressOwnedByUser) GetTypename() *string {
	return v.Typename
}

// GetMessage returns addUserWalletMutationAddUserWalletErrAddressOwnedByUser.Message, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrAddressOwnedByUser) GetMessage() string {
	return v.Message
}

// addUserWalletMutationAddUserWalletErrAuthenticationFailed includes the requested fields of the GraphQL type ErrAuthenticationFailed.
type addUserWalletMutationAddUserWalletErrAuthenticationFailed struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns addUserWalletMutationAddUserWalletErrAuthenticationFailed.Typename, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrAuthenticationFailed) GetTypename() *string {
	return v.Typename
}

// GetMessage returns addUserWalletMutationAddUserWalletErrAuthenticationFailed.Message, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrAuthenticationFailed) GetMessage() string {
	return v.Message
}

// addUserWalletMutationAddUserWalletErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type addUserWalletMutationAddUserWalletErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns addUserWalletMutationAddUserWalletErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrInvalidInput) GetTypename() *string { return v.Typename }

// GetMessage returns addUserWalletMutationAddUserWalletErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrInvalidInput) GetMessage() string { return v.Message }

// addUserWalletMutationAddUserWalletErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type addUserWalletMutationAddUserWalletErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns addUserWalletMutationAddUserWalletErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrNotAuthorized) GetTypename() *string { return v.Typename }

// GetMessage returns addUserWalletMutationAddUserWalletErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationAddUserWalletErrNotAuthorized) GetMessage() string { return v.Message }

// addUserWalletMutationResponse is returned by addUserWalletMutation on success.
type addUserWalletMutationResponse struct {
	AddUserWallet *addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError `json:"-"`
}

// GetAddUserWallet returns addUserWalletMutationResponse.AddUserWallet, and is useful for accessing the field via an interface.
func (v *addUserWalletMutationResponse) GetAddUserWallet() *addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError {
	return v.AddUserWallet
}

func (v *addUserWalletMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*addUserWalletMutationResponse
		AddUserWallet json.RawMessage `json:"addUserWallet"`
		graphql.NoUnmarshalJSON
	}
	firstPass.addUserWalletMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.AddUserWallet
		src := firstPass.AddUserWallet
		if len(src) != 0 && string(src) != "null" {
			*dst = new(addUserWalletMutationAddUserWalletAddUserWalletPayloadOrError)
			err = __unmarshaladdUserWalletMutationAddUserWalletAddUserWalletPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal addUserWalletMutationResponse.AddUserWallet: %w", err)
			}
		}
	}
	return nil
}

type __premarshaladdUserWalletMutationResponse struct {
	AddUserWallet json.RawMessage `json:"addUserWallet"`
}

func (v *addUserWalletMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *addUserWalletMutationResponse) __premarshalJSON() (*__premarshaladdUserWalletMutationResponse, error) {
	var retval __premarshaladdUserWalletMutationResponse

	{

		dst := &retval.AddUserWallet
		src := v.AddUserWallet
		if src != nil {
			var err error
			*dst, err = __marshaladdUserWalletMutationAddUserWalletAddUserWalletPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal addUserWalletMutationResponse.AddUserWallet: %w", err)
			}
		}
	}
	return &retval, nil
}

// connectSocialAccountConnectSocialAccountConnectSocialAccountPayload includes the requested fields of the GraphQL type ConnectSocialAccountPayload.
type connectSocialAccountConnectSocialAccountConnectSocialAccountPayload struct {
	Typename *string                                                                    `json:"__typename"`
	Viewer   *connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewer `json:"viewer"`
}

// GetTypename returns connectSocialAccountConnectSocialAccountConnectSocialAccountPayload.Typename, and is useful for accessing the field via an interface.
func (v *connectSocialAccountConnectSocialAccountConnectSocialAccountPayload) GetTypename() *string {
	return v.Typename
}

// GetViewer returns connectSocialAccountConnectSocialAccountConnectSocialAccountPayload.Viewer, and is useful for accessing the field via an interface.
func (v *connectSocialAccountConnectSocialAccountConnectSocialAccountPayload) GetViewer() *connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewer {
	return v.Viewer
}

// connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError includes the requested fields of the GraphQL interface ConnectSocialAccountPayloadOrError.
//
// connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError is implemented by the following types:
// connectSocialAccountConnectSocialAccountConnectSocialAccountPayload
// connectSocialAccountConnectSocialAccountErrInvalidInput
// connectSocialAccountConnectSocialAccountErrNotAuthorized
type connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError interface {
	implementsGraphQLInterfaceconnectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *connectSocialAccountConnectSocialAccountConnectSocialAccountPayload) implementsGraphQLInterfaceconnectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError() {
}
func (v *connectSocialAccountConnectSocialAccountErrInvalidInput) implementsGraphQLInterfaceconnectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError() {
}
func (v *connectSocialAccountConnectSocialAccountErrNotAuthorized) implementsGraphQLInterfaceconnectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError() {
}

func __unmarshalconnectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError(b []byte, v *connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ConnectSocialAccountPayload":
		*v = new(connectSocialAccountConnectSocialAccountConnectSocialAccountPayload)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(connectSocialAccountConnectSocialAccountErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(connectSocialAccountConnectSocialAccountErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ConnectSocialAccountPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalconnectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError(v *connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *connectSocialAccountConnectSocialAccountConnectSocialAccountPayload:
		typename = "ConnectSocialAccountPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*connectSocialAccountConnectSocialAccountConnectSocialAccountPayload
		}{typename, v}
		return json.Marshal(result)
	case *connectSocialAccountConnectSocialAccountErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*connectSocialAccountConnectSocialAccountErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *connectSocialAccountConnectSocialAccountErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*connectSocialAccountConnectSocialAccountErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError: "%T"`, v)
	}
}

// connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewer includes the requested fields of the GraphQL type Viewer.
type connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewer struct {
	SocialAccounts *connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewerSocialAccounts `json:"socialAccounts"`
}

// GetSocialAccounts returns connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewer.SocialAccounts, and is useful for accessing the field via an interface.
func (v *connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewer) GetSocialAccounts() *connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewerSocialAccounts {
	return v.SocialAccounts
}

// connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewerSocialAccounts includes the requested fields of the GraphQL type SocialAccounts.
type connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewerSocialAccounts struct {
	Twitter *connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewerSocialAccountsTwitterTwitterSocialAccount `json:"twitter"`
}

// GetTwitter returns connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewerSocialAccounts.Twitter, and is useful for accessing the field via an interface.
func (v *connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewerSocialAccounts) GetTwitter() *connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewerSocialAccountsTwitterTwitterSocialAccount {
	return v.Twitter
}

// connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewerSocialAccountsTwitterTwitterSocialAccount includes the requested fields of the GraphQL type TwitterSocialAccount.
type connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewerSocialAccountsTwitterTwitterSocialAccount struct {
	Username string `json:"username"`
	Display  bool   `json:"display"`
}

// GetUsername returns connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewerSocialAccountsTwitterTwitterSocialAccount.Username, and is useful for accessing the field via an interface.
func (v *connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewerSocialAccountsTwitterTwitterSocialAccount) GetUsername() string {
	return v.Username
}

// GetDisplay returns connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewerSocialAccountsTwitterTwitterSocialAccount.Display, and is useful for accessing the field via an interface.
func (v *connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadViewerSocialAccountsTwitterTwitterSocialAccount) GetDisplay() bool {
	return v.Display
}

// connectSocialAccountConnectSocialAccountErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type connectSocialAccountConnectSocialAccountErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns connectSocialAccountConnectSocialAccountErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *connectSocialAccountConnectSocialAccountErrInvalidInput) GetTypename() *string {
	return v.Typename
}

// GetMessage returns connectSocialAccountConnectSocialAccountErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *connectSocialAccountConnectSocialAccountErrInvalidInput) GetMessage() string {
	return v.Message
}

// connectSocialAccountConnectSocialAccountErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type connectSocialAccountConnectSocialAccountErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns connectSocialAccountConnectSocialAccountErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *connectSocialAccountConnectSocialAccountErrNotAuthorized) GetTypename() *string {
	return v.Typename
}

// GetMessage returns connectSocialAccountConnectSocialAccountErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *connectSocialAccountConnectSocialAccountErrNotAuthorized) GetMessage() string {
	return v.Message
}

// connectSocialAccountResponse is returned by connectSocialAccount on success.
type connectSocialAccountResponse struct {
	ConnectSocialAccount *connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError `json:"-"`
}

// GetConnectSocialAccount returns connectSocialAccountResponse.ConnectSocialAccount, and is useful for accessing the field via an interface.
func (v *connectSocialAccountResponse) GetConnectSocialAccount() *connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError {
	return v.ConnectSocialAccount
}

func (v *connectSocialAccountResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*connectSocialAccountResponse
		ConnectSocialAccount json.RawMessage `json:"connectSocialAccount"`
		graphql.NoUnmarshalJSON
	}
	firstPass.connectSocialAccountResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ConnectSocialAccount
		src := firstPass.ConnectSocialAccount
		if len(src) != 0 && string(src) != "null" {
			*dst = new(connectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError)
			err = __unmarshalconnectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal connectSocialAccountResponse.ConnectSocialAccount: %w", err)
			}
		}
	}
	return nil
}

type __premarshalconnectSocialAccountResponse struct {
	ConnectSocialAccount json.RawMessage `json:"connectSocialAccount"`
}

func (v *connectSocialAccountResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *connectSocialAccountResponse) __premarshalJSON() (*__premarshalconnectSocialAccountResponse, error) {
	var retval __premarshalconnectSocialAccountResponse

	{

		dst := &retval.ConnectSocialAccount
		src := v.ConnectSocialAccount
		if src != nil {
			var err error
			*dst, err = __marshalconnectSocialAccountConnectSocialAccountConnectSocialAccountPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal connectSocialAccountResponse.ConnectSocialAccount: %w", err)
			}
		}
	}
	return &retval, nil
}

// createCollectionMutationCreateCollectionCreateCollectionPayload includes the requested fields of the GraphQL type CreateCollectionPayload.
type createCollectionMutationCreateCollectionCreateCollectionPayload struct {
	Typename   *string                                                                    `json:"__typename"`
	Collection *createCollectionMutationCreateCollectionCreateCollectionPayloadCollection `json:"collection"`
}

// GetTypename returns createCollectionMutationCreateCollectionCreateCollectionPayload.Typename, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionCreateCollectionPayload) GetTypename() *string {
	return v.Typename
}

// GetCollection returns createCollectionMutationCreateCollectionCreateCollectionPayload.Collection, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionCreateCollectionPayload) GetCollection() *createCollectionMutationCreateCollectionCreateCollectionPayloadCollection {
	return v.Collection
}

// createCollectionMutationCreateCollectionCreateCollectionPayloadCollection includes the requested fields of the GraphQL type Collection.
type createCollectionMutationCreateCollectionCreateCollectionPayloadCollection struct {
	Dbid   persist.DBID                                                                                      `json:"dbid"`
	Name   *string                                                                                           `json:"name"`
	Tokens []*createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionToken `json:"tokens"`
}

// GetDbid returns createCollectionMutationCreateCollectionCreateCollectionPayloadCollection.Dbid, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionCreateCollectionPayloadCollection) GetDbid() persist.DBID {
	return v.Dbid
}

// GetName returns createCollectionMutationCreateCollectionCreateCollectionPayloadCollection.Name, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionCreateCollectionPayloadCollection) GetName() *string {
	return v.Name
}

// GetTokens returns createCollectionMutationCreateCollectionCreateCollectionPayloadCollection.Tokens, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionCreateCollectionPayloadCollection) GetTokens() []*createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionToken {
	return v.Tokens
}

// createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionToken includes the requested fields of the GraphQL type CollectionToken.
type createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionToken struct {
	Token *createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionTokenToken `json:"token"`
}

// GetToken returns createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionToken.Token, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionToken) GetToken() *createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionTokenToken {
	return v.Token
}

// createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionTokenToken includes the requested fields of the GraphQL type Token.
type createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionTokenToken struct {
	Dbid persist.DBID `json:"dbid"`
}

// GetDbid returns createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionTokenToken.Dbid, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionCreateCollectionPayloadCollectionTokensCollectionTokenToken) GetDbid() persist.DBID {
	return v.Dbid
}

// createCollectionMutationCreateCollectionCreateCollectionPayloadOrError includes the requested fields of the GraphQL interface CreateCollectionPayloadOrError.
//
// createCollectionMutationCreateCollectionCreateCollectionPayloadOrError is implemented by the following types:
// createCollectionMutationCreateCollectionCreateCollectionPayload
// createCollectionMutationCreateCollectionErrInvalidInput
// createCollectionMutationCreateCollectionErrNotAuthorized
type createCollectionMutationCreateCollectionCreateCollectionPayloadOrError interface {
	implementsGraphQLInterfacecreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *createCollectionMutationCreateCollectionCreateCollectionPayload) implementsGraphQLInterfacecreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError() {
}
func (v *createCollectionMutationCreateCollectionErrInvalidInput) implementsGraphQLInterfacecreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError() {
}
func (v *createCollectionMutationCreateCollectionErrNotAuthorized) implementsGraphQLInterfacecreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError() {
}

func __unmarshalcreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError(b []byte, v *createCollectionMutationCreateCollectionCreateCollectionPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CreateCollectionPayload":
		*v = new(createCollectionMutationCreateCollectionCreateCollectionPayload)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(createCollectionMutationCreateCollectionErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(createCollectionMutationCreateCollectionErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CreateCollectionPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for createCollectionMutationCreateCollectionCreateCollectionPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalcreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError(v *createCollectionMutationCreateCollectionCreateCollectionPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *createCollectionMutationCreateCollectionCreateCollectionPayload:
		typename = "CreateCollectionPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*createCollectionMutationCreateCollectionCreateCollectionPayload
		}{typename, v}
		return json.Marshal(result)
	case *createCollectionMutationCreateCollectionErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*createCollectionMutationCreateCollectionErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *createCollectionMutationCreateCollectionErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*createCollectionMutationCreateCollectionErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for createCollectionMutationCreateCollectionCreateCollectionPayloadOrError: "%T"`, v)
	}
}

// createCollectionMutationCreateCollectionErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type createCollectionMutationCreateCollectionErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createCollectionMutationCreateCollectionErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionErrInvalidInput) GetTypename() *string {
	return v.Typename
}

// GetMessage returns createCollectionMutationCreateCollectionErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionErrInvalidInput) GetMessage() string {
	return v.Message
}

// createCollectionMutationCreateCollectionErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type createCollectionMutationCreateCollectionErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createCollectionMutationCreateCollectionErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionErrNotAuthorized) GetTypename() *string {
	return v.Typename
}

// GetMessage returns createCollectionMutationCreateCollectionErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *createCollectionMutationCreateCollectionErrNotAuthorized) GetMessage() string {
	return v.Message
}

// createCollectionMutationResponse is returned by createCollectionMutation on success.
type createCollectionMutationResponse struct {
	CreateCollection *createCollectionMutationCreateCollectionCreateCollectionPayloadOrError `json:"-"`
}

// GetCreateCollection returns createCollectionMutationResponse.CreateCollection, and is useful for accessing the field via an interface.
func (v *createCollectionMutationResponse) GetCreateCollection() *createCollectionMutationCreateCollectionCreateCollectionPayloadOrError {
	return v.CreateCollection
}

func (v *createCollectionMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createCollectionMutationResponse
		CreateCollection json.RawMessage `json:"createCollection"`
		graphql.NoUnmarshalJSON
	}
	firstPass.createCollectionMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateCollection
		src := firstPass.CreateCollection
		if len(src) != 0 && string(src) != "null" {
			*dst = new(createCollectionMutationCreateCollectionCreateCollectionPayloadOrError)
			err = __unmarshalcreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal createCollectionMutationResponse.CreateCollection: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcreateCollectionMutationResponse struct {
	CreateCollection json.RawMessage `json:"createCollection"`
}

func (v *createCollectionMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createCollectionMutationResponse) __premarshalJSON() (*__premarshalcreateCollectionMutationResponse, error) {
	var retval __premarshalcreateCollectionMutationResponse

	{

		dst := &retval.CreateCollection
		src := v.CreateCollection
		if src != nil {
			var err error
			*dst, err = __marshalcreateCollectionMutationCreateCollectionCreateCollectionPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal createCollectionMutationResponse.CreateCollection: %w", err)
			}
		}
	}
	return &retval, nil
}

// createGalleryMutationCreateGalleryCreateGalleryPayload includes the requested fields of the GraphQL type CreateGalleryPayload.
type createGalleryMutationCreateGalleryCreateGalleryPayload struct {
	Typename *string                                                        `json:"__typename"`
	Gallery  *createGalleryMutationCreateGalleryCreateGalleryPayloadGallery `json:"gallery"`
}

// GetTypename returns createGalleryMutationCreateGalleryCreateGalleryPayload.Typename, and is useful for accessing the field via an interface.
func (v *createGalleryMutationCreateGalleryCreateGalleryPayload) GetTypename() *string {
	return v.Typename
}

// GetGallery returns createGalleryMutationCreateGalleryCreateGalleryPayload.Gallery, and is useful for accessing the field via an interface.
func (v *createGalleryMutationCreateGalleryCreateGalleryPayload) GetGallery() *createGalleryMutationCreateGalleryCreateGalleryPayloadGallery {
	return v.Gallery
}

// createGalleryMutationCreateGalleryCreateGalleryPayloadGallery includes the requested fields of the GraphQL type Gallery.
type createGalleryMutationCreateGalleryCreateGalleryPayloadGallery struct {
	Dbid        persist.DBID `json:"dbid"`
	Name        *string      `json:"name"`
	Description *string      `json:"description"`
	Position    *string      `json:"position"`
}

// GetDbid returns createGalleryMutationCreateGalleryCreateGalleryPayloadGallery.Dbid, and is useful for accessing the field via an interface.
func (v *createGalleryMutationCreateGalleryCreateGalleryPayloadGallery) GetDbid() persist.DBID {
	return v.Dbid
}

// GetName returns createGalleryMutationCreateGalleryCreateGalleryPayloadGallery.Name, and is useful for accessing the field via an interface.
func (v *createGalleryMutationCreateGalleryCreateGalleryPayloadGallery) GetName() *string {
	return v.Name
}

// GetDescription returns createGalleryMutationCreateGalleryCreateGalleryPayloadGallery.Description, and is useful for accessing the field via an interface.
func (v *createGalleryMutationCreateGalleryCreateGalleryPayloadGallery) GetDescription() *string {
	return v.Description
}

// GetPosition returns createGalleryMutationCreateGalleryCreateGalleryPayloadGallery.Position, and is useful for accessing the field via an interface.
func (v *createGalleryMutationCreateGalleryCreateGalleryPayloadGallery) GetPosition() *string {
	return v.Position
}

// createGalleryMutationCreateGalleryCreateGalleryPayloadOrError includes the requested fields of the GraphQL interface CreateGalleryPayloadOrError.
//
// createGalleryMutationCreateGalleryCreateGalleryPayloadOrError is implemented by the following types:
// createGalleryMutationCreateGalleryCreateGalleryPayload
// createGalleryMutationCreateGalleryErrInvalidInput
// createGalleryMutationCreateGalleryErrNotAuthorized
type createGalleryMutationCreateGalleryCreateGalleryPayloadOrError interface {
	implementsGraphQLInterfacecreateGalleryMutationCreateGalleryCreateGalleryPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *createGalleryMutationCreateGalleryCreateGalleryPayload) implementsGraphQLInterfacecreateGalleryMutationCreateGalleryCreateGalleryPayloadOrError() {
}
func (v *createGalleryMutationCreateGalleryErrInvalidInput) implementsGraphQLInterfacecreateGalleryMutationCreateGalleryCreateGalleryPayloadOrError() {
}
func (v *createGalleryMutationCreateGalleryErrNotAuthorized) implementsGraphQLInterfacecreateGalleryMutationCreateGalleryCreateGalleryPayloadOrError() {
}

func __unmarshalcreateGalleryMutationCreateGalleryCreateGalleryPayloadOrError(b []byte, v *createGalleryMutationCreateGalleryCreateGalleryPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CreateGalleryPayload":
		*v = new(createGalleryMutationCreateGalleryCreateGalleryPayload)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(createGalleryMutationCreateGalleryErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(createGalleryMutationCreateGalleryErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CreateGalleryPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for createGalleryMutationCreateGalleryCreateGalleryPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalcreateGalleryMutationCreateGalleryCreateGalleryPayloadOrError(v *createGalleryMutationCreateGalleryCreateGalleryPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *createGalleryMutationCreateGalleryCreateGalleryPayload:
		typename = "CreateGalleryPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*createGalleryMutationCreateGalleryCreateGalleryPayload
		}{typename, v}
		return json.Marshal(result)
	case *createGalleryMutationCreateGalleryErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*createGalleryMutationCreateGalleryErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *createGalleryMutationCreateGalleryErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*createGalleryMutationCreateGalleryErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for createGalleryMutationCreateGalleryCreateGalleryPayloadOrError: "%T"`, v)
	}
}

// createGalleryMutationCreateGalleryErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type createGalleryMutationCreateGalleryErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createGalleryMutationCreateGalleryErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *createGalleryMutationCreateGalleryErrInvalidInput) GetTypename() *string { return v.Typename }

// GetMessage returns createGalleryMutationCreateGalleryErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *createGalleryMutationCreateGalleryErrInvalidInput) GetMessage() string { return v.Message }

// createGalleryMutationCreateGalleryErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type createGalleryMutationCreateGalleryErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createGalleryMutationCreateGalleryErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *createGalleryMutationCreateGalleryErrNotAuthorized) GetTypename() *string { return v.Typename }

// GetMessage returns createGalleryMutationCreateGalleryErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *createGalleryMutationCreateGalleryErrNotAuthorized) GetMessage() string { return v.Message }

// createGalleryMutationResponse is returned by createGalleryMutation on success.
type createGalleryMutationResponse struct {
	CreateGallery *createGalleryMutationCreateGalleryCreateGalleryPayloadOrError `json:"-"`
}

// GetCreateGallery returns createGalleryMutationResponse.CreateGallery, and is useful for accessing the field via an interface.
func (v *createGalleryMutationResponse) GetCreateGallery() *createGalleryMutationCreateGalleryCreateGalleryPayloadOrError {
	return v.CreateGallery
}

func (v *createGalleryMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createGalleryMutationResponse
		CreateGallery json.RawMessage `json:"createGallery"`
		graphql.NoUnmarshalJSON
	}
	firstPass.createGalleryMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateGallery
		src := firstPass.CreateGallery
		if len(src) != 0 && string(src) != "null" {
			*dst = new(createGalleryMutationCreateGalleryCreateGalleryPayloadOrError)
			err = __unmarshalcreateGalleryMutationCreateGalleryCreateGalleryPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal createGalleryMutationResponse.CreateGallery: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcreateGalleryMutationResponse struct {
	CreateGallery json.RawMessage `json:"createGallery"`
}

func (v *createGalleryMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createGalleryMutationResponse) __premarshalJSON() (*__premarshalcreateGalleryMutationResponse, error) {
	var retval __premarshalcreateGalleryMutationResponse

	{

		dst := &retval.CreateGallery
		src := v.CreateGallery
		if src != nil {
			var err error
			*dst, err = __marshalcreateGalleryMutationCreateGalleryCreateGalleryPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal createGalleryMutationResponse.CreateGallery: %w", err)
			}
		}
	}
	return &retval, nil
}

// createUserMutationCreateUserCreateUserPayload includes the requested fields of the GraphQL type CreateUserPayload.
type createUserMutationCreateUserCreateUserPayload struct {
	Typename *string                                              `json:"__typename"`
	Viewer   *createUserMutationCreateUserCreateUserPayloadViewer `json:"viewer"`
}

// GetTypename returns createUserMutationCreateUserCreateUserPayload.Typename, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayload) GetTypename() *string { return v.Typename }

// GetViewer returns createUserMutationCreateUserCreateUserPayload.Viewer, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayload) GetViewer() *createUserMutationCreateUserCreateUserPayloadViewer {
	return v.Viewer
}

// createUserMutationCreateUserCreateUserPayloadOrError includes the requested fields of the GraphQL interface CreateUserPayloadOrError.
//
// createUserMutationCreateUserCreateUserPayloadOrError is implemented by the following types:
// createUserMutationCreateUserCreateUserPayload
// createUserMutationCreateUserErrAuthenticationFailed
// createUserMutationCreateUserErrDoesNotOwnRequiredToken
// createUserMutationCreateUserErrInvalidInput
// createUserMutationCreateUserErrUserAlreadyExists
// createUserMutationCreateUserErrUsernameNotAvailable
type createUserMutationCreateUserCreateUserPayloadOrError interface {
	implementsGraphQLInterfacecreateUserMutationCreateUserCreateUserPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *createUserMutationCreateUserCreateUserPayload) implementsGraphQLInterfacecreateUserMutationCreateUserCreateUserPayloadOrError() {
}
func (v *createUserMutationCreateUserErrAuthenticationFailed) implementsGraphQLInterfacecreateUserMutationCreateUserCreateUserPayloadOrError() {
}
func (v *createUserMutationCreateUserErrDoesNotOwnRequiredToken) implementsGraphQLInterfacecreateUserMutationCreateUserCreateUserPayloadOrError() {
}
func (v *createUserMutationCreateUserErrInvalidInput) implementsGraphQLInterfacecreateUserMutationCreateUserCreateUserPayloadOrError() {
}
func (v *createUserMutationCreateUserErrUserAlreadyExists) implementsGraphQLInterfacecreateUserMutationCreateUserCreateUserPayloadOrError() {
}
func (v *createUserMutationCreateUserErrUsernameNotAvailable) implementsGraphQLInterfacecreateUserMutationCreateUserCreateUserPayloadOrError() {
}

func __unmarshalcreateUserMutationCreateUserCreateUserPayloadOrError(b []byte, v *createUserMutationCreateUserCreateUserPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CreateUserPayload":
		*v = new(createUserMutationCreateUserCreateUserPayload)
		return json.Unmarshal(b, *v)
	case "ErrAuthenticationFailed":
		*v = new(createUserMutationCreateUserErrAuthenticationFailed)
		return json.Unmarshal(b, *v)
	case "ErrDoesNotOwnRequiredToken":
		*v = new(createUserMutationCreateUserErrDoesNotOwnRequiredToken)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(createUserMutationCreateUserErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrUserAlreadyExists":
		*v = new(createUserMutationCreateUserErrUserAlreadyExists)
		return json.Unmarshal(b, *v)
	case "ErrUsernameNotAvailable":
		*v = new(createUserMutationCreateUserErrUsernameNotAvailable)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing CreateUserPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for createUserMutationCreateUserCreateUserPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalcreateUserMutationCreateUserCreateUserPayloadOrError(v *createUserMutationCreateUserCreateUserPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *createUserMutationCreateUserCreateUserPayload:
		typename = "CreateUserPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*createUserMutationCreateUserCreateUserPayload
		}{typename, v}
		return json.Marshal(result)
	case *createUserMutationCreateUserErrAuthenticationFailed:
		typename = "ErrAuthenticationFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*createUserMutationCreateUserErrAuthenticationFailed
		}{typename, v}
		return json.Marshal(result)
	case *createUserMutationCreateUserErrDoesNotOwnRequiredToken:
		typename = "ErrDoesNotOwnRequiredToken"

		result := struct {
			TypeName string `json:"__typename"`
			*createUserMutationCreateUserErrDoesNotOwnRequiredToken
		}{typename, v}
		return json.Marshal(result)
	case *createUserMutationCreateUserErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*createUserMutationCreateUserErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *createUserMutationCreateUserErrUserAlreadyExists:
		typename = "ErrUserAlreadyExists"

		result := struct {
			TypeName string `json:"__typename"`
			*createUserMutationCreateUserErrUserAlreadyExists
		}{typename, v}
		return json.Marshal(result)
	case *createUserMutationCreateUserErrUsernameNotAvailable:
		typename = "ErrUsernameNotAvailable"

		result := struct {
			TypeName string `json:"__typename"`
			*createUserMutationCreateUserErrUsernameNotAvailable
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for createUserMutationCreateUserCreateUserPayloadOrError: "%T"`, v)
	}
}

// createUserMutationCreateUserCreateUserPayloadViewer includes the requested fields of the GraphQL type Viewer.
type createUserMutationCreateUserCreateUserPayloadViewer struct {
	User *createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUser `json:"user"`
}

// GetUser returns createUserMutationCreateUserCreateUserPayloadViewer.User, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayloadViewer) GetUser() *createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUser {
	return v.User
}

// createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUser includes the requested fields of the GraphQL type SplitFiUser.
type createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUser struct {
	Username  *string                                                                               `json:"username"`
	Dbid      persist.DBID                                                                          `json:"dbid"`
	Bio       *string                                                                               `json:"bio"`
	Galleries []*createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUserGalleriesGallery `json:"galleries"`
}

// GetUsername returns createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUser.Username, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUser) GetUsername() *string {
	return v.Username
}

// GetDbid returns createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUser.Dbid, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUser) GetDbid() persist.DBID {
	return v.Dbid
}

// GetBio returns createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUser.Bio, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUser) GetBio() *string {
	return v.Bio
}

// GetGalleries returns createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUser.Galleries, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUser) GetGalleries() []*createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUserGalleriesGallery {
	return v.Galleries
}

// createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUserGalleriesGallery includes the requested fields of the GraphQL type Gallery.
type createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUserGalleriesGallery struct {
	Dbid persist.DBID `json:"dbid"`
}

// GetDbid returns createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUserGalleriesGallery.Dbid, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserCreateUserPayloadViewerUserSplitFiUserGalleriesGallery) GetDbid() persist.DBID {
	return v.Dbid
}

// createUserMutationCreateUserErrAuthenticationFailed includes the requested fields of the GraphQL type ErrAuthenticationFailed.
type createUserMutationCreateUserErrAuthenticationFailed struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createUserMutationCreateUserErrAuthenticationFailed.Typename, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrAuthenticationFailed) GetTypename() *string {
	return v.Typename
}

// GetMessage returns createUserMutationCreateUserErrAuthenticationFailed.Message, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrAuthenticationFailed) GetMessage() string { return v.Message }

// createUserMutationCreateUserErrDoesNotOwnRequiredToken includes the requested fields of the GraphQL type ErrDoesNotOwnRequiredToken.
type createUserMutationCreateUserErrDoesNotOwnRequiredToken struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createUserMutationCreateUserErrDoesNotOwnRequiredToken.Typename, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrDoesNotOwnRequiredToken) GetTypename() *string {
	return v.Typename
}

// GetMessage returns createUserMutationCreateUserErrDoesNotOwnRequiredToken.Message, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrDoesNotOwnRequiredToken) GetMessage() string {
	return v.Message
}

// createUserMutationCreateUserErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type createUserMutationCreateUserErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createUserMutationCreateUserErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrInvalidInput) GetTypename() *string { return v.Typename }

// GetMessage returns createUserMutationCreateUserErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrInvalidInput) GetMessage() string { return v.Message }

// createUserMutationCreateUserErrUserAlreadyExists includes the requested fields of the GraphQL type ErrUserAlreadyExists.
type createUserMutationCreateUserErrUserAlreadyExists struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createUserMutationCreateUserErrUserAlreadyExists.Typename, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrUserAlreadyExists) GetTypename() *string { return v.Typename }

// GetMessage returns createUserMutationCreateUserErrUserAlreadyExists.Message, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrUserAlreadyExists) GetMessage() string { return v.Message }

// createUserMutationCreateUserErrUsernameNotAvailable includes the requested fields of the GraphQL type ErrUsernameNotAvailable.
type createUserMutationCreateUserErrUsernameNotAvailable struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns createUserMutationCreateUserErrUsernameNotAvailable.Typename, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrUsernameNotAvailable) GetTypename() *string {
	return v.Typename
}

// GetMessage returns createUserMutationCreateUserErrUsernameNotAvailable.Message, and is useful for accessing the field via an interface.
func (v *createUserMutationCreateUserErrUsernameNotAvailable) GetMessage() string { return v.Message }

// createUserMutationResponse is returned by createUserMutation on success.
type createUserMutationResponse struct {
	CreateUser *createUserMutationCreateUserCreateUserPayloadOrError `json:"-"`
}

// GetCreateUser returns createUserMutationResponse.CreateUser, and is useful for accessing the field via an interface.
func (v *createUserMutationResponse) GetCreateUser() *createUserMutationCreateUserCreateUserPayloadOrError {
	return v.CreateUser
}

func (v *createUserMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createUserMutationResponse
		CreateUser json.RawMessage `json:"createUser"`
		graphql.NoUnmarshalJSON
	}
	firstPass.createUserMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.CreateUser
		src := firstPass.CreateUser
		if len(src) != 0 && string(src) != "null" {
			*dst = new(createUserMutationCreateUserCreateUserPayloadOrError)
			err = __unmarshalcreateUserMutationCreateUserCreateUserPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal createUserMutationResponse.CreateUser: %w", err)
			}
		}
	}
	return nil
}

type __premarshalcreateUserMutationResponse struct {
	CreateUser json.RawMessage `json:"createUser"`
}

func (v *createUserMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createUserMutationResponse) __premarshalJSON() (*__premarshalcreateUserMutationResponse, error) {
	var retval __premarshalcreateUserMutationResponse

	{

		dst := &retval.CreateUser
		src := v.CreateUser
		if src != nil {
			var err error
			*dst, err = __marshalcreateUserMutationCreateUserCreateUserPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal createUserMutationResponse.CreateUser: %w", err)
			}
		}
	}
	return &retval, nil
}

// disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayload includes the requested fields of the GraphQL type DisconnectSocialAccountPayload.
type disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayload struct {
	Typename *string                                                                             `json:"__typename"`
	Viewer   *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewer `json:"viewer"`
}

// GetTypename returns disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayload.Typename, and is useful for accessing the field via an interface.
func (v *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayload) GetTypename() *string {
	return v.Typename
}

// GetViewer returns disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayload.Viewer, and is useful for accessing the field via an interface.
func (v *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayload) GetViewer() *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewer {
	return v.Viewer
}

// disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError includes the requested fields of the GraphQL interface DisconnectSocialAccountPayloadOrError.
//
// disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError is implemented by the following types:
// disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayload
// disconnectSocialAccountDisconnectSocialAccountErrInvalidInput
// disconnectSocialAccountDisconnectSocialAccountErrNeedsToReconnectSocial
// disconnectSocialAccountDisconnectSocialAccountErrNotAuthorized
type disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError interface {
	implementsGraphQLInterfacedisconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayload) implementsGraphQLInterfacedisconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError() {
}
func (v *disconnectSocialAccountDisconnectSocialAccountErrInvalidInput) implementsGraphQLInterfacedisconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError() {
}
func (v *disconnectSocialAccountDisconnectSocialAccountErrNeedsToReconnectSocial) implementsGraphQLInterfacedisconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError() {
}
func (v *disconnectSocialAccountDisconnectSocialAccountErrNotAuthorized) implementsGraphQLInterfacedisconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError() {
}

func __unmarshaldisconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError(b []byte, v *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "DisconnectSocialAccountPayload":
		*v = new(disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayload)
		return json.Unmarshal(b, *v)
	case "ErrInvalidInput":
		*v = new(disconnectSocialAccountDisconnectSocialAccountErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrNeedsToReconnectSocial":
		*v = new(disconnectSocialAccountDisconnectSocialAccountErrNeedsToReconnectSocial)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(disconnectSocialAccountDisconnectSocialAccountErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing DisconnectSocialAccountPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshaldisconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError(v *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayload:
		typename = "DisconnectSocialAccountPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayload
		}{typename, v}
		return json.Marshal(result)
	case *disconnectSocialAccountDisconnectSocialAccountErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*disconnectSocialAccountDisconnectSocialAccountErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *disconnectSocialAccountDisconnectSocialAccountErrNeedsToReconnectSocial:
		typename = "ErrNeedsToReconnectSocial"

		result := struct {
			TypeName string `json:"__typename"`
			*disconnectSocialAccountDisconnectSocialAccountErrNeedsToReconnectSocial
		}{typename, v}
		return json.Marshal(result)
	case *disconnectSocialAccountDisconnectSocialAccountErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*disconnectSocialAccountDisconnectSocialAccountErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError: "%T"`, v)
	}
}

// disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewer includes the requested fields of the GraphQL type Viewer.
type disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewer struct {
	SocialAccounts *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewerSocialAccounts `json:"socialAccounts"`
}

// GetSocialAccounts returns disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewer.SocialAccounts, and is useful for accessing the field via an interface.
func (v *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewer) GetSocialAccounts() *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewerSocialAccounts {
	return v.SocialAccounts
}

// disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewerSocialAccounts includes the requested fields of the GraphQL type SocialAccounts.
type disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewerSocialAccounts struct {
	Twitter *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewerSocialAccountsTwitterTwitterSocialAccount `json:"twitter"`
}

// GetTwitter returns disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewerSocialAccounts.Twitter, and is useful for accessing the field via an interface.
func (v *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewerSocialAccounts) GetTwitter() *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewerSocialAccountsTwitterTwitterSocialAccount {
	return v.Twitter
}

// disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewerSocialAccountsTwitterTwitterSocialAccount includes the requested fields of the GraphQL type TwitterSocialAccount.
type disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewerSocialAccountsTwitterTwitterSocialAccount struct {
	Username string `json:"username"`
}

// GetUsername returns disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewerSocialAccountsTwitterTwitterSocialAccount.Username, and is useful for accessing the field via an interface.
func (v *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadViewerSocialAccountsTwitterTwitterSocialAccount) GetUsername() string {
	return v.Username
}

// disconnectSocialAccountDisconnectSocialAccountErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type disconnectSocialAccountDisconnectSocialAccountErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns disconnectSocialAccountDisconnectSocialAccountErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *disconnectSocialAccountDisconnectSocialAccountErrInvalidInput) GetTypename() *string {
	return v.Typename
}

// GetMessage returns disconnectSocialAccountDisconnectSocialAccountErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *disconnectSocialAccountDisconnectSocialAccountErrInvalidInput) GetMessage() string {
	return v.Message
}

// disconnectSocialAccountDisconnectSocialAccountErrNeedsToReconnectSocial includes the requested fields of the GraphQL type ErrNeedsToReconnectSocial.
type disconnectSocialAccountDisconnectSocialAccountErrNeedsToReconnectSocial struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns disconnectSocialAccountDisconnectSocialAccountErrNeedsToReconnectSocial.Typename, and is useful for accessing the field via an interface.
func (v *disconnectSocialAccountDisconnectSocialAccountErrNeedsToReconnectSocial) GetTypename() *string {
	return v.Typename
}

// GetMessage returns disconnectSocialAccountDisconnectSocialAccountErrNeedsToReconnectSocial.Message, and is useful for accessing the field via an interface.
func (v *disconnectSocialAccountDisconnectSocialAccountErrNeedsToReconnectSocial) GetMessage() string {
	return v.Message
}

// disconnectSocialAccountDisconnectSocialAccountErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type disconnectSocialAccountDisconnectSocialAccountErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns disconnectSocialAccountDisconnectSocialAccountErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *disconnectSocialAccountDisconnectSocialAccountErrNotAuthorized) GetTypename() *string {
	return v.Typename
}

// GetMessage returns disconnectSocialAccountDisconnectSocialAccountErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *disconnectSocialAccountDisconnectSocialAccountErrNotAuthorized) GetMessage() string {
	return v.Message
}

// disconnectSocialAccountResponse is returned by disconnectSocialAccount on success.
type disconnectSocialAccountResponse struct {
	DisconnectSocialAccount *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError `json:"-"`
}

// GetDisconnectSocialAccount returns disconnectSocialAccountResponse.DisconnectSocialAccount, and is useful for accessing the field via an interface.
func (v *disconnectSocialAccountResponse) GetDisconnectSocialAccount() *disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError {
	return v.DisconnectSocialAccount
}

func (v *disconnectSocialAccountResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*disconnectSocialAccountResponse
		DisconnectSocialAccount json.RawMessage `json:"disconnectSocialAccount"`
		graphql.NoUnmarshalJSON
	}
	firstPass.disconnectSocialAccountResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.DisconnectSocialAccount
		src := firstPass.DisconnectSocialAccount
		if len(src) != 0 && string(src) != "null" {
			*dst = new(disconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError)
			err = __unmarshaldisconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal disconnectSocialAccountResponse.DisconnectSocialAccount: %w", err)
			}
		}
	}
	return nil
}

type __premarshaldisconnectSocialAccountResponse struct {
	DisconnectSocialAccount json.RawMessage `json:"disconnectSocialAccount"`
}

func (v *disconnectSocialAccountResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *disconnectSocialAccountResponse) __premarshalJSON() (*__premarshaldisconnectSocialAccountResponse, error) {
	var retval __premarshaldisconnectSocialAccountResponse

	{

		dst := &retval.DisconnectSocialAccount
		src := v.DisconnectSocialAccount
		if src != nil {
			var err error
			*dst, err = __marshaldisconnectSocialAccountDisconnectSocialAccountDisconnectSocialAccountPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal disconnectSocialAccountResponse.DisconnectSocialAccount: %w", err)
			}
		}
	}
	return &retval, nil
}

// getAuthNonceMutationGetAuthNonce includes the requested fields of the GraphQL type AuthNonce.
type getAuthNonceMutationGetAuthNonce struct {
	Typename   *string `json:"__typename"`
	Nonce      *string `json:"nonce"`
	UserExists *bool   `json:"userExists"`
}

// GetTypename returns getAuthNonceMutationGetAuthNonce.Typename, and is useful for accessing the field via an interface.
func (v *getAuthNonceMutationGetAuthNonce) GetTypename() *string { return v.Typename }

// GetNonce returns getAuthNonceMutationGetAuthNonce.Nonce, and is useful for accessing the field via an interface.
func (v *getAuthNonceMutationGetAuthNonce) GetNonce() *string { return v.Nonce }

// GetUserExists returns getAuthNonceMutationGetAuthNonce.UserExists, and is useful for accessing the field via an interface.
func (v *getAuthNonceMutationGetAuthNonce) GetUserExists() *bool { return v.UserExists }

// getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken includes the requested fields of the GraphQL type ErrDoesNotOwnRequiredToken.
type getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken.Typename, and is useful for accessing the field via an interface.
func (v *getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken) GetTypename() *string {
	return v.Typename
}

// GetMessage returns getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken.Message, and is useful for accessing the field via an interface.
func (v *getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken) GetMessage() string {
	return v.Message
}

// getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError includes the requested fields of the GraphQL interface GetAuthNoncePayloadOrError.
//
// getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError is implemented by the following types:
// getAuthNonceMutationGetAuthNonce
// getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken
type getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError interface {
	implementsGraphQLInterfacegetAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *getAuthNonceMutationGetAuthNonce) implementsGraphQLInterfacegetAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError() {
}
func (v *getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken) implementsGraphQLInterfacegetAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError() {
}

func __unmarshalgetAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError(b []byte, v *getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AuthNonce":
		*v = new(getAuthNonceMutationGetAuthNonce)
		return json.Unmarshal(b, *v)
	case "ErrDoesNotOwnRequiredToken":
		*v = new(getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing GetAuthNoncePayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalgetAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError(v *getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getAuthNonceMutationGetAuthNonce:
		typename = "AuthNonce"

		result := struct {
			TypeName string `json:"__typename"`
			*getAuthNonceMutationGetAuthNonce
		}{typename, v}
		return json.Marshal(result)
	case *getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken:
		typename = "ErrDoesNotOwnRequiredToken"

		result := struct {
			TypeName string `json:"__typename"`
			*getAuthNonceMutationGetAuthNonceErrDoesNotOwnRequiredToken
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError: "%T"`, v)
	}
}

// getAuthNonceMutationResponse is returned by getAuthNonceMutation on success.
type getAuthNonceMutationResponse struct {
	GetAuthNonce *getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError `json:"-"`
}

// GetGetAuthNonce returns getAuthNonceMutationResponse.GetAuthNonce, and is useful for accessing the field via an interface.
func (v *getAuthNonceMutationResponse) GetGetAuthNonce() *getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError {
	return v.GetAuthNonce
}

func (v *getAuthNonceMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getAuthNonceMutationResponse
		GetAuthNonce json.RawMessage `json:"getAuthNonce"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getAuthNonceMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetAuthNonce
		src := firstPass.GetAuthNonce
		if len(src) != 0 && string(src) != "null" {
			*dst = new(getAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError)
			err = __unmarshalgetAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getAuthNonceMutationResponse.GetAuthNonce: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetAuthNonceMutationResponse struct {
	GetAuthNonce json.RawMessage `json:"getAuthNonce"`
}

func (v *getAuthNonceMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getAuthNonceMutationResponse) __premarshalJSON() (*__premarshalgetAuthNonceMutationResponse, error) {
	var retval __premarshalgetAuthNonceMutationResponse

	{

		dst := &retval.GetAuthNonce
		src := v.GetAuthNonce
		if src != nil {
			var err error
			*dst, err = __marshalgetAuthNonceMutationGetAuthNonceGetAuthNoncePayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal getAuthNonceMutationResponse.GetAuthNonce: %w", err)
			}
		}
	}
	return &retval, nil
}

// loginMutationLoginErrAuthenticationFailed includes the requested fields of the GraphQL type ErrAuthenticationFailed.
type loginMutationLoginErrAuthenticationFailed struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns loginMutationLoginErrAuthenticationFailed.Typename, and is useful for accessing the field via an interface.
func (v *loginMutationLoginErrAuthenticationFailed) GetTypename() *string { return v.Typename }

// GetMessage returns loginMutationLoginErrAuthenticationFailed.Message, and is useful for accessing the field via an interface.
func (v *loginMutationLoginErrAuthenticationFailed) GetMessage() string { return v.Message }

// loginMutationLoginErrDoesNotOwnRequiredToken includes the requested fields of the GraphQL type ErrDoesNotOwnRequiredToken.
type loginMutationLoginErrDoesNotOwnRequiredToken struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns loginMutationLoginErrDoesNotOwnRequiredToken.Typename, and is useful for accessing the field via an interface.
func (v *loginMutationLoginErrDoesNotOwnRequiredToken) GetTypename() *string { return v.Typename }

// GetMessage returns loginMutationLoginErrDoesNotOwnRequiredToken.Message, and is useful for accessing the field via an interface.
func (v *loginMutationLoginErrDoesNotOwnRequiredToken) GetMessage() string { return v.Message }

// loginMutationLoginErrUserNotFound includes the requested fields of the GraphQL type ErrUserNotFound.
type loginMutationLoginErrUserNotFound struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns loginMutationLoginErrUserNotFound.Typename, and is useful for accessing the field via an interface.
func (v *loginMutationLoginErrUserNotFound) GetTypename() *string { return v.Typename }

// GetMessage returns loginMutationLoginErrUserNotFound.Message, and is useful for accessing the field via an interface.
func (v *loginMutationLoginErrUserNotFound) GetMessage() string { return v.Message }

// loginMutationLoginLoginPayload includes the requested fields of the GraphQL type LoginPayload.
type loginMutationLoginLoginPayload struct {
	Typename *string                               `json:"__typename"`
	Viewer   *loginMutationLoginLoginPayloadViewer `json:"viewer"`
}

// GetTypename returns loginMutationLoginLoginPayload.Typename, and is useful for accessing the field via an interface.
func (v *loginMutationLoginLoginPayload) GetTypename() *string { return v.Typename }

// GetViewer returns loginMutationLoginLoginPayload.Viewer, and is useful for accessing the field via an interface.
func (v *loginMutationLoginLoginPayload) GetViewer() *loginMutationLoginLoginPayloadViewer {
	return v.Viewer
}

// loginMutationLoginLoginPayloadOrError includes the requested fields of the GraphQL interface LoginPayloadOrError.
//
// loginMutationLoginLoginPayloadOrError is implemented by the following types:
// loginMutationLoginErrAuthenticationFailed
// loginMutationLoginErrDoesNotOwnRequiredToken
// loginMutationLoginErrUserNotFound
// loginMutationLoginLoginPayload
type loginMutationLoginLoginPayloadOrError interface {
	implementsGraphQLInterfaceloginMutationLoginLoginPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *loginMutationLoginErrAuthenticationFailed) implementsGraphQLInterfaceloginMutationLoginLoginPayloadOrError() {
}
func (v *loginMutationLoginErrDoesNotOwnRequiredToken) implementsGraphQLInterfaceloginMutationLoginLoginPayloadOrError() {
}
func (v *loginMutationLoginErrUserNotFound) implementsGraphQLInterfaceloginMutationLoginLoginPayloadOrError() {
}
func (v *loginMutationLoginLoginPayload) implementsGraphQLInterfaceloginMutationLoginLoginPayloadOrError() {
}

func __unmarshalloginMutationLoginLoginPayloadOrError(b []byte, v *loginMutationLoginLoginPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrAuthenticationFailed":
		*v = new(loginMutationLoginErrAuthenticationFailed)
		return json.Unmarshal(b, *v)
	case "ErrDoesNotOwnRequiredToken":
		*v = new(loginMutationLoginErrDoesNotOwnRequiredToken)
		return json.Unmarshal(b, *v)
	case "ErrUserNotFound":
		*v = new(loginMutationLoginErrUserNotFound)
		return json.Unmarshal(b, *v)
	case "LoginPayload":
		*v = new(loginMutationLoginLoginPayload)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing LoginPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for loginMutationLoginLoginPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalloginMutationLoginLoginPayloadOrError(v *loginMutationLoginLoginPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *loginMutationLoginErrAuthenticationFailed:
		typename = "ErrAuthenticationFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*loginMutationLoginErrAuthenticationFailed
		}{typename, v}
		return json.Marshal(result)
	case *loginMutationLoginErrDoesNotOwnRequiredToken:
		typename = "ErrDoesNotOwnRequiredToken"

		result := struct {
			TypeName string `json:"__typename"`
			*loginMutationLoginErrDoesNotOwnRequiredToken
		}{typename, v}
		return json.Marshal(result)
	case *loginMutationLoginErrUserNotFound:
		typename = "ErrUserNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*loginMutationLoginErrUserNotFound
		}{typename, v}
		return json.Marshal(result)
	case *loginMutationLoginLoginPayload:
		typename = "LoginPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*loginMutationLoginLoginPayload
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for loginMutationLoginLoginPayloadOrError: "%T"`, v)
	}
}

// loginMutationLoginLoginPayloadViewer includes the requested fields of the GraphQL type Viewer.
type loginMutationLoginLoginPayloadViewer struct {
	User *loginMutationLoginLoginPayloadViewerUserSplitFiUser `json:"user"`
}

// GetUser returns loginMutationLoginLoginPayloadViewer.User, and is useful for accessing the field via an interface.
func (v *loginMutationLoginLoginPayloadViewer) GetUser() *loginMutationLoginLoginPayloadViewerUserSplitFiUser {
	return v.User
}

// loginMutationLoginLoginPayloadViewerUserSplitFiUser includes the requested fields of the GraphQL type SplitFiUser.
type loginMutationLoginLoginPayloadViewerUserSplitFiUser struct {
	Username *string      `json:"username"`
	Dbid     persist.DBID `json:"dbid"`
}

// GetUsername returns loginMutationLoginLoginPayloadViewerUserSplitFiUser.Username, and is useful for accessing the field via an interface.
func (v *loginMutationLoginLoginPayloadViewerUserSplitFiUser) GetUsername() *string {
	return v.Username
}

// GetDbid returns loginMutationLoginLoginPayloadViewerUserSplitFiUser.Dbid, and is useful for accessing the field via an interface.
func (v *loginMutationLoginLoginPayloadViewerUserSplitFiUser) GetDbid() persist.DBID { return v.Dbid }

// loginMutationResponse is returned by loginMutation on success.
type loginMutationResponse struct {
	Login *loginMutationLoginLoginPayloadOrError `json:"-"`
}

// GetLogin returns loginMutationResponse.Login, and is useful for accessing the field via an interface.
func (v *loginMutationResponse) GetLogin() *loginMutationLoginLoginPayloadOrError { return v.Login }

func (v *loginMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*loginMutationResponse
		Login json.RawMessage `json:"login"`
		graphql.NoUnmarshalJSON
	}
	firstPass.loginMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Login
		src := firstPass.Login
		if len(src) != 0 && string(src) != "null" {
			*dst = new(loginMutationLoginLoginPayloadOrError)
			err = __unmarshalloginMutationLoginLoginPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal loginMutationResponse.Login: %w", err)
			}
		}
	}
	return nil
}

type __premarshalloginMutationResponse struct {
	Login json.RawMessage `json:"login"`
}

func (v *loginMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *loginMutationResponse) __premarshalJSON() (*__premarshalloginMutationResponse, error) {
	var retval __premarshalloginMutationResponse

	{

		dst := &retval.Login
		src := v.Login
		if src != nil {
			var err error
			*dst, err = __marshalloginMutationLoginLoginPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal loginMutationResponse.Login: %w", err)
			}
		}
	}
	return &retval, nil
}

// logoutMutationLogoutLogoutPayload includes the requested fields of the GraphQL type LogoutPayload.
type logoutMutationLogoutLogoutPayload struct {
	Viewer *logoutMutationLogoutLogoutPayloadViewer `json:"viewer"`
}

// GetViewer returns logoutMutationLogoutLogoutPayload.Viewer, and is useful for accessing the field via an interface.
func (v *logoutMutationLogoutLogoutPayload) GetViewer() *logoutMutationLogoutLogoutPayloadViewer {
	return v.Viewer
}

// logoutMutationLogoutLogoutPayloadViewer includes the requested fields of the GraphQL type Viewer.
type logoutMutationLogoutLogoutPayloadViewer struct {
	User *logoutMutationLogoutLogoutPayloadViewerUserSplitFiUser `json:"user"`
}

// GetUser returns logoutMutationLogoutLogoutPayloadViewer.User, and is useful for accessing the field via an interface.
func (v *logoutMutationLogoutLogoutPayloadViewer) GetUser() *logoutMutationLogoutLogoutPayloadViewerUserSplitFiUser {
	return v.User
}

// logoutMutationLogoutLogoutPayloadViewerUserSplitFiUser includes the requested fields of the GraphQL type SplitFiUser.
type logoutMutationLogoutLogoutPayloadViewerUserSplitFiUser struct {
	Username *string      `json:"username"`
	Dbid     persist.DBID `json:"dbid"`
}

// GetUsername returns logoutMutationLogoutLogoutPayloadViewerUserSplitFiUser.Username, and is useful for accessing the field via an interface.
func (v *logoutMutationLogoutLogoutPayloadViewerUserSplitFiUser) GetUsername() *string {
	return v.Username
}

// GetDbid returns logoutMutationLogoutLogoutPayloadViewerUserSplitFiUser.Dbid, and is useful for accessing the field via an interface.
func (v *logoutMutationLogoutLogoutPayloadViewerUserSplitFiUser) GetDbid() persist.DBID {
	return v.Dbid
}

// logoutMutationResponse is returned by logoutMutation on success.
type logoutMutationResponse struct {
	Logout *logoutMutationLogoutLogoutPayload `json:"logout"`
}

// GetLogout returns logoutMutationResponse.Logout, and is useful for accessing the field via an interface.
func (v *logoutMutationResponse) GetLogout() *logoutMutationLogoutLogoutPayload { return v.Logout }

// moveCollectionToGalleryMoveCollectionToGalleryErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type moveCollectionToGalleryMoveCollectionToGalleryErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns moveCollectionToGalleryMoveCollectionToGalleryErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *moveCollectionToGalleryMoveCollectionToGalleryErrInvalidInput) GetTypename() *string {
	return v.Typename
}

// GetMessage returns moveCollectionToGalleryMoveCollectionToGalleryErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *moveCollectionToGalleryMoveCollectionToGalleryErrInvalidInput) GetMessage() string {
	return v.Message
}

// moveCollectionToGalleryMoveCollectionToGalleryErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type moveCollectionToGalleryMoveCollectionToGalleryErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns moveCollectionToGalleryMoveCollectionToGalleryErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *moveCollectionToGalleryMoveCollectionToGalleryErrNotAuthorized) GetTypename() *string {
	return v.Typename
}

// GetMessage returns moveCollectionToGalleryMoveCollectionToGalleryErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *moveCollectionToGalleryMoveCollectionToGalleryErrNotAuthorized) GetMessage() string {
	return v.Message
}

// moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayload includes the requested fields of the GraphQL type MoveCollectionToGalleryPayload.
type moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayload struct {
	Typename   *string                                                                                 `json:"__typename"`
	OldGallery *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOldGallery `json:"oldGallery"`
	NewGallery *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadNewGallery `json:"newGallery"`
}

// GetTypename returns moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayload.Typename, and is useful for accessing the field via an interface.
func (v *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayload) GetTypename() *string {
	return v.Typename
}

// GetOldGallery returns moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayload.OldGallery, and is useful for accessing the field via an interface.
func (v *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayload) GetOldGallery() *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOldGallery {
	return v.OldGallery
}

// GetNewGallery returns moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayload.NewGallery, and is useful for accessing the field via an interface.
func (v *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayload) GetNewGallery() *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadNewGallery {
	return v.NewGallery
}

// moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadNewGallery includes the requested fields of the GraphQL type Gallery.
type moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadNewGallery struct {
	Dbid        persist.DBID                                                                                                   `json:"dbid"`
	Collections []*moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadNewGalleryCollectionsCollection `json:"collections"`
}

// GetDbid returns moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadNewGallery.Dbid, and is useful for accessing the field via an interface.
func (v *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadNewGallery) GetDbid() persist.DBID {
	return v.Dbid
}

// GetCollections returns moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadNewGallery.Collections, and is useful for accessing the field via an interface.
func (v *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadNewGallery) GetCollections() []*moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadNewGalleryCollectionsCollection {
	return v.Collections
}

// moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadNewGalleryCollectionsCollection includes the requested fields of the GraphQL type Collection.
type moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadNewGalleryCollectionsCollection struct {
	Dbid persist.DBID `json:"dbid"`
}

// GetDbid returns moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadNewGalleryCollectionsCollection.Dbid, and is useful for accessing the field via an interface.
func (v *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadNewGalleryCollectionsCollection) GetDbid() persist.DBID {
	return v.Dbid
}

// moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOldGallery includes the requested fields of the GraphQL type Gallery.
type moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOldGallery struct {
	Dbid        persist.DBID                                                                                                   `json:"dbid"`
	Collections []*moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOldGalleryCollectionsCollection `json:"collections"`
}

// GetDbid returns moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOldGallery.Dbid, and is useful for accessing the field via an interface.
func (v *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOldGallery) GetDbid() persist.DBID {
	return v.Dbid
}

// GetCollections returns moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOldGallery.Collections, and is useful for accessing the field via an interface.
func (v *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOldGallery) GetCollections() []*moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOldGalleryCollectionsCollection {
	return v.Collections
}

// moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOldGalleryCollectionsCollection includes the requested fields of the GraphQL type Collection.
type moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOldGalleryCollectionsCollection struct {
	Dbid persist.DBID `json:"dbid"`
}

// GetDbid returns moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOldGalleryCollectionsCollection.Dbid, and is useful for accessing the field via an interface.
func (v *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOldGalleryCollectionsCollection) GetDbid() persist.DBID {
	return v.Dbid
}

// moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError includes the requested fields of the GraphQL interface MoveCollectionToGalleryPayloadOrError.
//
// moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError is implemented by the following types:
// moveCollectionToGalleryMoveCollectionToGalleryErrInvalidInput
// moveCollectionToGalleryMoveCollectionToGalleryErrNotAuthorized
// moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayload
type moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError interface {
	implementsGraphQLInterfacemoveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *moveCollectionToGalleryMoveCollectionToGalleryErrInvalidInput) implementsGraphQLInterfacemoveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError() {
}
func (v *moveCollectionToGalleryMoveCollectionToGalleryErrNotAuthorized) implementsGraphQLInterfacemoveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError() {
}
func (v *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayload) implementsGraphQLInterfacemoveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError() {
}

func __unmarshalmoveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError(b []byte, v *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrInvalidInput":
		*v = new(moveCollectionToGalleryMoveCollectionToGalleryErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(moveCollectionToGalleryMoveCollectionToGalleryErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "MoveCollectionToGalleryPayload":
		*v = new(moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayload)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing MoveCollectionToGalleryPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalmoveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError(v *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *moveCollectionToGalleryMoveCollectionToGalleryErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*moveCollectionToGalleryMoveCollectionToGalleryErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *moveCollectionToGalleryMoveCollectionToGalleryErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*moveCollectionToGalleryMoveCollectionToGalleryErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayload:
		typename = "MoveCollectionToGalleryPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayload
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError: "%T"`, v)
	}
}

// moveCollectionToGalleryResponse is returned by moveCollectionToGallery on success.
type moveCollectionToGalleryResponse struct {
	MoveCollectionToGallery *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError `json:"-"`
}

// GetMoveCollectionToGallery returns moveCollectionToGalleryResponse.MoveCollectionToGallery, and is useful for accessing the field via an interface.
func (v *moveCollectionToGalleryResponse) GetMoveCollectionToGallery() *moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError {
	return v.MoveCollectionToGallery
}

func (v *moveCollectionToGalleryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*moveCollectionToGalleryResponse
		MoveCollectionToGallery json.RawMessage `json:"moveCollectionToGallery"`
		graphql.NoUnmarshalJSON
	}
	firstPass.moveCollectionToGalleryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.MoveCollectionToGallery
		src := firstPass.MoveCollectionToGallery
		if len(src) != 0 && string(src) != "null" {
			*dst = new(moveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError)
			err = __unmarshalmoveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal moveCollectionToGalleryResponse.MoveCollectionToGallery: %w", err)
			}
		}
	}
	return nil
}

type __premarshalmoveCollectionToGalleryResponse struct {
	MoveCollectionToGallery json.RawMessage `json:"moveCollectionToGallery"`
}

func (v *moveCollectionToGalleryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *moveCollectionToGalleryResponse) __premarshalJSON() (*__premarshalmoveCollectionToGalleryResponse, error) {
	var retval __premarshalmoveCollectionToGalleryResponse

	{

		dst := &retval.MoveCollectionToGallery
		src := v.MoveCollectionToGallery
		if src != nil {
			var err error
			*dst, err = __marshalmoveCollectionToGalleryMoveCollectionToGalleryMoveCollectionToGalleryPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal moveCollectionToGalleryResponse.MoveCollectionToGallery: %w", err)
			}
		}
	}
	return &retval, nil
}

// publishGalleryMutationPublishGalleryErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type publishGalleryMutationPublishGalleryErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns publishGalleryMutationPublishGalleryErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *publishGalleryMutationPublishGalleryErrInvalidInput) GetTypename() *string {
	return v.Typename
}

// GetMessage returns publishGalleryMutationPublishGalleryErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *publishGalleryMutationPublishGalleryErrInvalidInput) GetMessage() string { return v.Message }

// publishGalleryMutationPublishGalleryErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type publishGalleryMutationPublishGalleryErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns publishGalleryMutationPublishGalleryErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *publishGalleryMutationPublishGalleryErrNotAuthorized) GetTypename() *string {
	return v.Typename
}

// GetMessage returns publishGalleryMutationPublishGalleryErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *publishGalleryMutationPublishGalleryErrNotAuthorized) GetMessage() string { return v.Message }

// publishGalleryMutationPublishGalleryPublishGalleryPayload includes the requested fields of the GraphQL type PublishGalleryPayload.
type publishGalleryMutationPublishGalleryPublishGalleryPayload struct {
	Typename *string                                                           `json:"__typename"`
	Gallery  *publishGalleryMutationPublishGalleryPublishGalleryPayloadGallery `json:"gallery"`
}

// GetTypename returns publishGalleryMutationPublishGalleryPublishGalleryPayload.Typename, and is useful for accessing the field via an interface.
func (v *publishGalleryMutationPublishGalleryPublishGalleryPayload) GetTypename() *string {
	return v.Typename
}

// GetGallery returns publishGalleryMutationPublishGalleryPublishGalleryPayload.Gallery, and is useful for accessing the field via an interface.
func (v *publishGalleryMutationPublishGalleryPublishGalleryPayload) GetGallery() *publishGalleryMutationPublishGalleryPublishGalleryPayloadGallery {
	return v.Gallery
}

// publishGalleryMutationPublishGalleryPublishGalleryPayloadGallery includes the requested fields of the GraphQL type Gallery.
type publishGalleryMutationPublishGalleryPublishGalleryPayloadGallery struct {
	Dbid persist.DBID `json:"dbid"`
}

// GetDbid returns publishGalleryMutationPublishGalleryPublishGalleryPayloadGallery.Dbid, and is useful for accessing the field via an interface.
func (v *publishGalleryMutationPublishGalleryPublishGalleryPayloadGallery) GetDbid() persist.DBID {
	return v.Dbid
}

// publishGalleryMutationPublishGalleryPublishGalleryPayloadOrError includes the requested fields of the GraphQL interface PublishGalleryPayloadOrError.
//
// publishGalleryMutationPublishGalleryPublishGalleryPayloadOrError is implemented by the following types:
// publishGalleryMutationPublishGalleryErrInvalidInput
// publishGalleryMutationPublishGalleryErrNotAuthorized
// publishGalleryMutationPublishGalleryPublishGalleryPayload
type publishGalleryMutationPublishGalleryPublishGalleryPayloadOrError interface {
	implementsGraphQLInterfacepublishGalleryMutationPublishGalleryPublishGalleryPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *publishGalleryMutationPublishGalleryErrInvalidInput) implementsGraphQLInterfacepublishGalleryMutationPublishGalleryPublishGalleryPayloadOrError() {
}
func (v *publishGalleryMutationPublishGalleryErrNotAuthorized) implementsGraphQLInterfacepublishGalleryMutationPublishGalleryPublishGalleryPayloadOrError() {
}
func (v *publishGalleryMutationPublishGalleryPublishGalleryPayload) implementsGraphQLInterfacepublishGalleryMutationPublishGalleryPublishGalleryPayloadOrError() {
}

func __unmarshalpublishGalleryMutationPublishGalleryPublishGalleryPayloadOrError(b []byte, v *publishGalleryMutationPublishGalleryPublishGalleryPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrInvalidInput":
		*v = new(publishGalleryMutationPublishGalleryErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(publishGalleryMutationPublishGalleryErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "PublishGalleryPayload":
		*v = new(publishGalleryMutationPublishGalleryPublishGalleryPayload)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing PublishGalleryPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for publishGalleryMutationPublishGalleryPublishGalleryPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalpublishGalleryMutationPublishGalleryPublishGalleryPayloadOrError(v *publishGalleryMutationPublishGalleryPublishGalleryPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *publishGalleryMutationPublishGalleryErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*publishGalleryMutationPublishGalleryErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *publishGalleryMutationPublishGalleryErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*publishGalleryMutationPublishGalleryErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case *publishGalleryMutationPublishGalleryPublishGalleryPayload:
		typename = "PublishGalleryPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*publishGalleryMutationPublishGalleryPublishGalleryPayload
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for publishGalleryMutationPublishGalleryPublishGalleryPayloadOrError: "%T"`, v)
	}
}

// publishGalleryMutationResponse is returned by publishGalleryMutation on success.
type publishGalleryMutationResponse struct {
	PublishGallery *publishGalleryMutationPublishGalleryPublishGalleryPayloadOrError `json:"-"`
}

// GetPublishGallery returns publishGalleryMutationResponse.PublishGallery, and is useful for accessing the field via an interface.
func (v *publishGalleryMutationResponse) GetPublishGallery() *publishGalleryMutationPublishGalleryPublishGalleryPayloadOrError {
	return v.PublishGallery
}

func (v *publishGalleryMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*publishGalleryMutationResponse
		PublishGallery json.RawMessage `json:"publishGallery"`
		graphql.NoUnmarshalJSON
	}
	firstPass.publishGalleryMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.PublishGallery
		src := firstPass.PublishGallery
		if len(src) != 0 && string(src) != "null" {
			*dst = new(publishGalleryMutationPublishGalleryPublishGalleryPayloadOrError)
			err = __unmarshalpublishGalleryMutationPublishGalleryPublishGalleryPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal publishGalleryMutationResponse.PublishGallery: %w", err)
			}
		}
	}
	return nil
}

type __premarshalpublishGalleryMutationResponse struct {
	PublishGallery json.RawMessage `json:"publishGallery"`
}

func (v *publishGalleryMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *publishGalleryMutationResponse) __premarshalJSON() (*__premarshalpublishGalleryMutationResponse, error) {
	var retval __premarshalpublishGalleryMutationResponse

	{

		dst := &retval.PublishGallery
		src := v.PublishGallery
		if src != nil {
			var err error
			*dst, err = __marshalpublishGalleryMutationPublishGalleryPublishGalleryPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal publishGalleryMutationResponse.PublishGallery: %w", err)
			}
		}
	}
	return &retval, nil
}

// removeUserWalletsMutationRemoveUserWalletsErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type removeUserWalletsMutationRemoveUserWalletsErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns removeUserWalletsMutationRemoveUserWalletsErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsErrInvalidInput) GetTypename() *string {
	return v.Typename
}

// GetMessage returns removeUserWalletsMutationRemoveUserWalletsErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsErrInvalidInput) GetMessage() string {
	return v.Message
}

// removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized) GetTypename() *string {
	return v.Typename
}

// GetMessage returns removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized) GetMessage() string {
	return v.Message
}

// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload includes the requested fields of the GraphQL type RemoveUserWalletsPayload.
type removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload struct {
	Typename *string                                                                   `json:"__typename"`
	Viewer   *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewer `json:"viewer"`
}

// GetTypename returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload.Typename, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload) GetTypename() *string {
	return v.Typename
}

// GetViewer returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload.Viewer, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload) GetViewer() *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewer {
	return v.Viewer
}

// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError includes the requested fields of the GraphQL interface RemoveUserWalletsPayloadOrError.
//
// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError is implemented by the following types:
// removeUserWalletsMutationRemoveUserWalletsErrInvalidInput
// removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized
// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload
type removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError interface {
	implementsGraphQLInterfaceremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *removeUserWalletsMutationRemoveUserWalletsErrInvalidInput) implementsGraphQLInterfaceremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError() {
}
func (v *removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized) implementsGraphQLInterfaceremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError() {
}
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload) implementsGraphQLInterfaceremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError() {
}

func __unmarshalremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError(b []byte, v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrInvalidInput":
		*v = new(removeUserWalletsMutationRemoveUserWalletsErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "RemoveUserWalletsPayload":
		*v = new(removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RemoveUserWalletsPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError(v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *removeUserWalletsMutationRemoveUserWalletsErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*removeUserWalletsMutationRemoveUserWalletsErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*removeUserWalletsMutationRemoveUserWalletsErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload:
		typename = "RemoveUserWalletsPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayload
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError: "%T"`, v)
	}
}

// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewer includes the requested fields of the GraphQL type Viewer.
type removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewer struct {
	User *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUser `json:"user"`
}

// GetUser returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewer.User, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewer) GetUser() *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUser {
	return v.User
}

// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUser includes the requested fields of the GraphQL type SplitFiUser.
type removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUser struct {
	Wallets []*removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWallet `json:"wallets"`
}

// GetWallets returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUser.Wallets, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUser) GetWallets() []*removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWallet {
	return v.Wallets
}

// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWallet includes the requested fields of the GraphQL type Wallet.
type removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWallet struct {
	Dbid         persist.DBID                                                                                                      `json:"dbid"`
	ChainAddress *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWalletChainAddress `json:"chainAddress"`
}

// GetDbid returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWallet.Dbid, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWallet) GetDbid() persist.DBID {
	return v.Dbid
}

// GetChainAddress returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWallet.ChainAddress, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWallet) GetChainAddress() *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWalletChainAddress {
	return v.ChainAddress
}

// removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWalletChainAddress includes the requested fields of the GraphQL type ChainAddress.
type removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWalletChainAddress struct {
	Address *string `json:"address"`
	Chain   *Chain  `json:"chain"`
}

// GetAddress returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWalletChainAddress.Address, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWalletChainAddress) GetAddress() *string {
	return v.Address
}

// GetChain returns removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWalletChainAddress.Chain, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadViewerUserSplitFiUserWalletsWalletChainAddress) GetChain() *Chain {
	return v.Chain
}

// removeUserWalletsMutationResponse is returned by removeUserWalletsMutation on success.
type removeUserWalletsMutationResponse struct {
	RemoveUserWallets *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError `json:"-"`
}

// GetRemoveUserWallets returns removeUserWalletsMutationResponse.RemoveUserWallets, and is useful for accessing the field via an interface.
func (v *removeUserWalletsMutationResponse) GetRemoveUserWallets() *removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError {
	return v.RemoveUserWallets
}

func (v *removeUserWalletsMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*removeUserWalletsMutationResponse
		RemoveUserWallets json.RawMessage `json:"removeUserWallets"`
		graphql.NoUnmarshalJSON
	}
	firstPass.removeUserWalletsMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.RemoveUserWallets
		src := firstPass.RemoveUserWallets
		if len(src) != 0 && string(src) != "null" {
			*dst = new(removeUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError)
			err = __unmarshalremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal removeUserWalletsMutationResponse.RemoveUserWallets: %w", err)
			}
		}
	}
	return nil
}

type __premarshalremoveUserWalletsMutationResponse struct {
	RemoveUserWallets json.RawMessage `json:"removeUserWallets"`
}

func (v *removeUserWalletsMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *removeUserWalletsMutationResponse) __premarshalJSON() (*__premarshalremoveUserWalletsMutationResponse, error) {
	var retval __premarshalremoveUserWalletsMutationResponse

	{

		dst := &retval.RemoveUserWallets
		src := v.RemoveUserWallets
		if src != nil {
			var err error
			*dst, err = __marshalremoveUserWalletsMutationRemoveUserWalletsRemoveUserWalletsPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal removeUserWalletsMutationResponse.RemoveUserWallets: %w", err)
			}
		}
	}
	return &retval, nil
}

// syncTokensMutationResponse is returned by syncTokensMutation on success.
type syncTokensMutationResponse struct {
	SyncTokens *syncTokensMutationSyncTokensSyncTokensPayloadOrError `json:"-"`
}

// GetSyncTokens returns syncTokensMutationResponse.SyncTokens, and is useful for accessing the field via an interface.
func (v *syncTokensMutationResponse) GetSyncTokens() *syncTokensMutationSyncTokensSyncTokensPayloadOrError {
	return v.SyncTokens
}

func (v *syncTokensMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*syncTokensMutationResponse
		SyncTokens json.RawMessage `json:"syncTokens"`
		graphql.NoUnmarshalJSON
	}
	firstPass.syncTokensMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.SyncTokens
		src := firstPass.SyncTokens
		if len(src) != 0 && string(src) != "null" {
			*dst = new(syncTokensMutationSyncTokensSyncTokensPayloadOrError)
			err = __unmarshalsyncTokensMutationSyncTokensSyncTokensPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal syncTokensMutationResponse.SyncTokens: %w", err)
			}
		}
	}
	return nil
}

type __premarshalsyncTokensMutationResponse struct {
	SyncTokens json.RawMessage `json:"syncTokens"`
}

func (v *syncTokensMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *syncTokensMutationResponse) __premarshalJSON() (*__premarshalsyncTokensMutationResponse, error) {
	var retval __premarshalsyncTokensMutationResponse

	{

		dst := &retval.SyncTokens
		src := v.SyncTokens
		if src != nil {
			var err error
			*dst, err = __marshalsyncTokensMutationSyncTokensSyncTokensPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal syncTokensMutationResponse.SyncTokens: %w", err)
			}
		}
	}
	return &retval, nil
}

// syncTokensMutationSyncTokensErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type syncTokensMutationSyncTokensErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns syncTokensMutationSyncTokensErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensErrNotAuthorized) GetTypename() *string { return v.Typename }

// GetMessage returns syncTokensMutationSyncTokensErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensErrNotAuthorized) GetMessage() string { return v.Message }

// syncTokensMutationSyncTokensErrSyncFailed includes the requested fields of the GraphQL type ErrSyncFailed.
type syncTokensMutationSyncTokensErrSyncFailed struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns syncTokensMutationSyncTokensErrSyncFailed.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensErrSyncFailed) GetTypename() *string { return v.Typename }

// GetMessage returns syncTokensMutationSyncTokensErrSyncFailed.Message, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensErrSyncFailed) GetMessage() string { return v.Message }

// syncTokensMutationSyncTokensSyncTokensPayload includes the requested fields of the GraphQL type SyncTokensPayload.
type syncTokensMutationSyncTokensSyncTokensPayload struct {
	Typename *string                                              `json:"__typename"`
	Viewer   *syncTokensMutationSyncTokensSyncTokensPayloadViewer `json:"viewer"`
}

// GetTypename returns syncTokensMutationSyncTokensSyncTokensPayload.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayload) GetTypename() *string { return v.Typename }

// GetViewer returns syncTokensMutationSyncTokensSyncTokensPayload.Viewer, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayload) GetViewer() *syncTokensMutationSyncTokensSyncTokensPayloadViewer {
	return v.Viewer
}

// syncTokensMutationSyncTokensSyncTokensPayloadOrError includes the requested fields of the GraphQL interface SyncTokensPayloadOrError.
//
// syncTokensMutationSyncTokensSyncTokensPayloadOrError is implemented by the following types:
// syncTokensMutationSyncTokensErrNotAuthorized
// syncTokensMutationSyncTokensErrSyncFailed
// syncTokensMutationSyncTokensSyncTokensPayload
type syncTokensMutationSyncTokensSyncTokensPayloadOrError interface {
	implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *syncTokensMutationSyncTokensErrNotAuthorized) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadOrError() {
}
func (v *syncTokensMutationSyncTokensErrSyncFailed) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadOrError() {
}
func (v *syncTokensMutationSyncTokensSyncTokensPayload) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadOrError() {
}

func __unmarshalsyncTokensMutationSyncTokensSyncTokensPayloadOrError(b []byte, v *syncTokensMutationSyncTokensSyncTokensPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrNotAuthorized":
		*v = new(syncTokensMutationSyncTokensErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "ErrSyncFailed":
		*v = new(syncTokensMutationSyncTokensErrSyncFailed)
		return json.Unmarshal(b, *v)
	case "SyncTokensPayload":
		*v = new(syncTokensMutationSyncTokensSyncTokensPayload)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SyncTokensPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for syncTokensMutationSyncTokensSyncTokensPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalsyncTokensMutationSyncTokensSyncTokensPayloadOrError(v *syncTokensMutationSyncTokensSyncTokensPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *syncTokensMutationSyncTokensErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensErrSyncFailed:
		typename = "ErrSyncFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensErrSyncFailed
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensSyncTokensPayload:
		typename = "SyncTokensPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensSyncTokensPayload
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for syncTokensMutationSyncTokensSyncTokensPayloadOrError: "%T"`, v)
	}
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewer includes the requested fields of the GraphQL type Viewer.
type syncTokensMutationSyncTokensSyncTokensPayloadViewer struct {
	User *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUser `json:"user"`
}

// GetUser returns syncTokensMutationSyncTokensSyncTokensPayloadViewer.User, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewer) GetUser() *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUser {
	return v.User
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUser includes the requested fields of the GraphQL type SplitFiUser.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUser struct {
	Tokens []*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken `json:"tokens"`
}

// GetTokens returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUser.Tokens, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUser) GetTokens() []*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken {
	return v.Tokens
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken includes the requested fields of the GraphQL type Token.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken struct {
	Chain   *Chain                                                                                          `json:"chain"`
	Dbid    persist.DBID                                                                                    `json:"dbid"`
	TokenId *string                                                                                         `json:"tokenId"`
	Media   *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype `json:"-"`
}

// GetChain returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken.Chain, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken) GetChain() *Chain {
	return v.Chain
}

// GetDbid returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken.Dbid, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken) GetDbid() persist.DBID {
	return v.Dbid
}

// GetTokenId returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken.TokenId, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken) GetTokenId() *string {
	return v.TokenId
}

// GetMedia returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken.Media, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken) GetMedia() *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype {
	return v.Media
}

func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken
		Media json.RawMessage `json:"media"`
		graphql.NoUnmarshalJSON
	}
	firstPass.syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Media
		src := firstPass.Media
		if len(src) != 0 && string(src) != "null" {
			*dst = new(syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype)
			err = __unmarshalsyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken.Media: %w", err)
			}
		}
	}
	return nil
}

type __premarshalsyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken struct {
	Chain *Chain `json:"chain"`

	Dbid persist.DBID `json:"dbid"`

	TokenId *string `json:"tokenId"`

	Media json.RawMessage `json:"media"`
}

func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken) __premarshalJSON() (*__premarshalsyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken, error) {
	var retval __premarshalsyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken

	retval.Chain = v.Chain
	retval.Dbid = v.Dbid
	retval.TokenId = v.TokenId
	{

		dst := &retval.Media
		src := v.Media
		if src != nil {
			var err error
			*dst, err = __marshalsyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensToken.Media: %w", err)
			}
		}
	}
	return &retval, nil
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaAudioMedia includes the requested fields of the GraphQL type AudioMedia.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaAudioMedia struct {
	Typename  *string `json:"__typename"`
	MediaURL  *string `json:"mediaURL"`
	MediaType *string `json:"mediaType"`
}

// GetTypename returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaAudioMedia.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaAudioMedia) GetTypename() *string {
	return v.Typename
}

// GetMediaURL returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaAudioMedia.MediaURL, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaAudioMedia) GetMediaURL() *string {
	return v.MediaURL
}

// GetMediaType returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaAudioMedia.MediaType, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaAudioMedia) GetMediaType() *string {
	return v.MediaType
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGIFMedia includes the requested fields of the GraphQL type GIFMedia.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGIFMedia struct {
	Typename  *string `json:"__typename"`
	MediaURL  *string `json:"mediaURL"`
	MediaType *string `json:"mediaType"`
}

// GetTypename returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGIFMedia.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGIFMedia) GetTypename() *string {
	return v.Typename
}

// GetMediaURL returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGIFMedia.MediaURL, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGIFMedia) GetMediaURL() *string {
	return v.MediaURL
}

// GetMediaType returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGIFMedia.MediaType, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGIFMedia) GetMediaType() *string {
	return v.MediaType
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGltfMedia includes the requested fields of the GraphQL type GltfMedia.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGltfMedia struct {
	Typename  *string `json:"__typename"`
	MediaURL  *string `json:"mediaURL"`
	MediaType *string `json:"mediaType"`
}

// GetTypename returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGltfMedia.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGltfMedia) GetTypename() *string {
	return v.Typename
}

// GetMediaURL returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGltfMedia.MediaURL, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGltfMedia) GetMediaURL() *string {
	return v.MediaURL
}

// GetMediaType returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGltfMedia.MediaType, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGltfMedia) GetMediaType() *string {
	return v.MediaType
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaHtmlMedia includes the requested fields of the GraphQL type HtmlMedia.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaHtmlMedia struct {
	Typename  *string `json:"__typename"`
	MediaURL  *string `json:"mediaURL"`
	MediaType *string `json:"mediaType"`
}

// GetTypename returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaHtmlMedia.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaHtmlMedia) GetTypename() *string {
	return v.Typename
}

// GetMediaURL returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaHtmlMedia.MediaURL, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaHtmlMedia) GetMediaURL() *string {
	return v.MediaURL
}

// GetMediaType returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaHtmlMedia.MediaType, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaHtmlMedia) GetMediaType() *string {
	return v.MediaType
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaImageMedia includes the requested fields of the GraphQL type ImageMedia.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaImageMedia struct {
	Typename  *string `json:"__typename"`
	MediaURL  *string `json:"mediaURL"`
	MediaType *string `json:"mediaType"`
}

// GetTypename returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaImageMedia.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaImageMedia) GetTypename() *string {
	return v.Typename
}

// GetMediaURL returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaImageMedia.MediaURL, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaImageMedia) GetMediaURL() *string {
	return v.MediaURL
}

// GetMediaType returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaImageMedia.MediaType, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaImageMedia) GetMediaType() *string {
	return v.MediaType
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaInvalidMedia includes the requested fields of the GraphQL type InvalidMedia.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaInvalidMedia struct {
	Typename  *string `json:"__typename"`
	MediaURL  *string `json:"mediaURL"`
	MediaType *string `json:"mediaType"`
}

// GetTypename returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaInvalidMedia.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaInvalidMedia) GetTypename() *string {
	return v.Typename
}

// GetMediaURL returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaInvalidMedia.MediaURL, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaInvalidMedia) GetMediaURL() *string {
	return v.MediaURL
}

// GetMediaType returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaInvalidMedia.MediaType, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaInvalidMedia) GetMediaType() *string {
	return v.MediaType
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaJsonMedia includes the requested fields of the GraphQL type JsonMedia.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaJsonMedia struct {
	Typename  *string `json:"__typename"`
	MediaURL  *string `json:"mediaURL"`
	MediaType *string `json:"mediaType"`
}

// GetTypename returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaJsonMedia.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaJsonMedia) GetTypename() *string {
	return v.Typename
}

// GetMediaURL returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaJsonMedia.MediaURL, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaJsonMedia) GetMediaURL() *string {
	return v.MediaURL
}

// GetMediaType returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaJsonMedia.MediaType, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaJsonMedia) GetMediaType() *string {
	return v.MediaType
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype includes the requested fields of the GraphQL interface MediaSubtype.
//
// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype is implemented by the following types:
// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaAudioMedia
// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGIFMedia
// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGltfMedia
// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaHtmlMedia
// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaImageMedia
// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaInvalidMedia
// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaJsonMedia
// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaPdfMedia
// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaSyncingMedia
// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaTextMedia
// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaUnknownMedia
// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaVideoMedia
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype interface {
	implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaAudioMedia) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype() {
}
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGIFMedia) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype() {
}
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGltfMedia) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype() {
}
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaHtmlMedia) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype() {
}
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaImageMedia) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype() {
}
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaInvalidMedia) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype() {
}
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaJsonMedia) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype() {
}
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaPdfMedia) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype() {
}
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaSyncingMedia) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype() {
}
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaTextMedia) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype() {
}
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaUnknownMedia) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype() {
}
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaVideoMedia) implementsGraphQLInterfacesyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype() {
}

func __unmarshalsyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype(b []byte, v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AudioMedia":
		*v = new(syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaAudioMedia)
		return json.Unmarshal(b, *v)
	case "GIFMedia":
		*v = new(syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGIFMedia)
		return json.Unmarshal(b, *v)
	case "GltfMedia":
		*v = new(syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGltfMedia)
		return json.Unmarshal(b, *v)
	case "HtmlMedia":
		*v = new(syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaHtmlMedia)
		return json.Unmarshal(b, *v)
	case "ImageMedia":
		*v = new(syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaImageMedia)
		return json.Unmarshal(b, *v)
	case "InvalidMedia":
		*v = new(syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaInvalidMedia)
		return json.Unmarshal(b, *v)
	case "JsonMedia":
		*v = new(syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaJsonMedia)
		return json.Unmarshal(b, *v)
	case "PdfMedia":
		*v = new(syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaPdfMedia)
		return json.Unmarshal(b, *v)
	case "SyncingMedia":
		*v = new(syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaSyncingMedia)
		return json.Unmarshal(b, *v)
	case "TextMedia":
		*v = new(syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaTextMedia)
		return json.Unmarshal(b, *v)
	case "UnknownMedia":
		*v = new(syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaUnknownMedia)
		return json.Unmarshal(b, *v)
	case "VideoMedia":
		*v = new(syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaVideoMedia)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing MediaSubtype.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype: "%v"`, tn.TypeName)
	}
}

func __marshalsyncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype(v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaAudioMedia:
		typename = "AudioMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaAudioMedia
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGIFMedia:
		typename = "GIFMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGIFMedia
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGltfMedia:
		typename = "GltfMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaGltfMedia
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaHtmlMedia:
		typename = "HtmlMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaHtmlMedia
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaImageMedia:
		typename = "ImageMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaImageMedia
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaInvalidMedia:
		typename = "InvalidMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaInvalidMedia
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaJsonMedia:
		typename = "JsonMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaJsonMedia
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaPdfMedia:
		typename = "PdfMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaPdfMedia
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaSyncingMedia:
		typename = "SyncingMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaSyncingMedia
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaTextMedia:
		typename = "TextMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaTextMedia
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaUnknownMedia:
		typename = "UnknownMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaUnknownMedia
		}{typename, v}
		return json.Marshal(result)
	case *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaVideoMedia:
		typename = "VideoMedia"

		result := struct {
			TypeName string `json:"__typename"`
			*syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaVideoMedia
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaMediaSubtype: "%T"`, v)
	}
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaPdfMedia includes the requested fields of the GraphQL type PdfMedia.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaPdfMedia struct {
	Typename  *string `json:"__typename"`
	MediaURL  *string `json:"mediaURL"`
	MediaType *string `json:"mediaType"`
}

// GetTypename returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaPdfMedia.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaPdfMedia) GetTypename() *string {
	return v.Typename
}

// GetMediaURL returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaPdfMedia.MediaURL, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaPdfMedia) GetMediaURL() *string {
	return v.MediaURL
}

// GetMediaType returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaPdfMedia.MediaType, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaPdfMedia) GetMediaType() *string {
	return v.MediaType
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaSyncingMedia includes the requested fields of the GraphQL type SyncingMedia.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaSyncingMedia struct {
	Typename  *string `json:"__typename"`
	MediaURL  *string `json:"mediaURL"`
	MediaType *string `json:"mediaType"`
}

// GetTypename returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaSyncingMedia.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaSyncingMedia) GetTypename() *string {
	return v.Typename
}

// GetMediaURL returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaSyncingMedia.MediaURL, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaSyncingMedia) GetMediaURL() *string {
	return v.MediaURL
}

// GetMediaType returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaSyncingMedia.MediaType, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaSyncingMedia) GetMediaType() *string {
	return v.MediaType
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaTextMedia includes the requested fields of the GraphQL type TextMedia.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaTextMedia struct {
	Typename  *string `json:"__typename"`
	MediaURL  *string `json:"mediaURL"`
	MediaType *string `json:"mediaType"`
}

// GetTypename returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaTextMedia.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaTextMedia) GetTypename() *string {
	return v.Typename
}

// GetMediaURL returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaTextMedia.MediaURL, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaTextMedia) GetMediaURL() *string {
	return v.MediaURL
}

// GetMediaType returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaTextMedia.MediaType, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaTextMedia) GetMediaType() *string {
	return v.MediaType
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaUnknownMedia includes the requested fields of the GraphQL type UnknownMedia.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaUnknownMedia struct {
	Typename  *string `json:"__typename"`
	MediaURL  *string `json:"mediaURL"`
	MediaType *string `json:"mediaType"`
}

// GetTypename returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaUnknownMedia.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaUnknownMedia) GetTypename() *string {
	return v.Typename
}

// GetMediaURL returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaUnknownMedia.MediaURL, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaUnknownMedia) GetMediaURL() *string {
	return v.MediaURL
}

// GetMediaType returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaUnknownMedia.MediaType, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaUnknownMedia) GetMediaType() *string {
	return v.MediaType
}

// syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaVideoMedia includes the requested fields of the GraphQL type VideoMedia.
type syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaVideoMedia struct {
	Typename  *string `json:"__typename"`
	MediaURL  *string `json:"mediaURL"`
	MediaType *string `json:"mediaType"`
}

// GetTypename returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaVideoMedia.Typename, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaVideoMedia) GetTypename() *string {
	return v.Typename
}

// GetMediaURL returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaVideoMedia.MediaURL, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaVideoMedia) GetMediaURL() *string {
	return v.MediaURL
}

// GetMediaType returns syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaVideoMedia.MediaType, and is useful for accessing the field via an interface.
func (v *syncTokensMutationSyncTokensSyncTokensPayloadViewerUserSplitFiUserTokensTokenMediaVideoMedia) GetMediaType() *string {
	return v.MediaType
}

// updateGalleryMutationResponse is returned by updateGalleryMutation on success.
type updateGalleryMutationResponse struct {
	UpdateGallery *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError `json:"-"`
}

// GetUpdateGallery returns updateGalleryMutationResponse.UpdateGallery, and is useful for accessing the field via an interface.
func (v *updateGalleryMutationResponse) GetUpdateGallery() *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError {
	return v.UpdateGallery
}

func (v *updateGalleryMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateGalleryMutationResponse
		UpdateGallery json.RawMessage `json:"updateGallery"`
		graphql.NoUnmarshalJSON
	}
	firstPass.updateGalleryMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateGallery
		src := firstPass.UpdateGallery
		if len(src) != 0 && string(src) != "null" {
			*dst = new(updateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError)
			err = __unmarshalupdateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal updateGalleryMutationResponse.UpdateGallery: %w", err)
			}
		}
	}
	return nil
}

type __premarshalupdateGalleryMutationResponse struct {
	UpdateGallery json.RawMessage `json:"updateGallery"`
}

func (v *updateGalleryMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateGalleryMutationResponse) __premarshalJSON() (*__premarshalupdateGalleryMutationResponse, error) {
	var retval __premarshalupdateGalleryMutationResponse

	{

		dst := &retval.UpdateGallery
		src := v.UpdateGallery
		if src != nil {
			var err error
			*dst, err = __marshalupdateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal updateGalleryMutationResponse.UpdateGallery: %w", err)
			}
		}
	}
	return &retval, nil
}

// updateGalleryMutationUpdateGalleryErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type updateGalleryMutationUpdateGalleryErrInvalidInput struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns updateGalleryMutationUpdateGalleryErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *updateGalleryMutationUpdateGalleryErrInvalidInput) GetTypename() *string { return v.Typename }

// updateGalleryMutationUpdateGalleryErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type updateGalleryMutationUpdateGalleryErrNotAuthorized struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns updateGalleryMutationUpdateGalleryErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *updateGalleryMutationUpdateGalleryErrNotAuthorized) GetTypename() *string { return v.Typename }

// updateGalleryMutationUpdateGalleryUpdateGalleryPayload includes the requested fields of the GraphQL type UpdateGalleryPayload.
type updateGalleryMutationUpdateGalleryUpdateGalleryPayload struct {
	Typename *string                                                        `json:"__typename"`
	Gallery  *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGallery `json:"gallery"`
}

// GetTypename returns updateGalleryMutationUpdateGalleryUpdateGalleryPayload.Typename, and is useful for accessing the field via an interface.
func (v *updateGalleryMutationUpdateGalleryUpdateGalleryPayload) GetTypename() *string {
	return v.Typename
}

// GetGallery returns updateGalleryMutationUpdateGalleryUpdateGalleryPayload.Gallery, and is useful for accessing the field via an interface.
func (v *updateGalleryMutationUpdateGalleryUpdateGalleryPayload) GetGallery() *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGallery {
	return v.Gallery
}

// updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGallery includes the requested fields of the GraphQL type Gallery.
type updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGallery struct {
	Dbid        persist.DBID                                                                          `json:"dbid"`
	Name        *string                                                                               `json:"name"`
	Description *string                                                                               `json:"description"`
	Collections []*updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollection `json:"collections"`
}

// GetDbid returns updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGallery.Dbid, and is useful for accessing the field via an interface.
func (v *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGallery) GetDbid() persist.DBID {
	return v.Dbid
}

// GetName returns updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGallery.Name, and is useful for accessing the field via an interface.
func (v *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGallery) GetName() *string {
	return v.Name
}

// GetDescription returns updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGallery.Description, and is useful for accessing the field via an interface.
func (v *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGallery) GetDescription() *string {
	return v.Description
}

// GetCollections returns updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGallery.Collections, and is useful for accessing the field via an interface.
func (v *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGallery) GetCollections() []*updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollection {
	return v.Collections
}

// updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollection includes the requested fields of the GraphQL type Collection.
type updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollection struct {
	Dbid   persist.DBID                                                                                               `json:"dbid"`
	Name   *string                                                                                                    `json:"name"`
	Tokens []*updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollectionTokensCollectionToken `json:"tokens"`
}

// GetDbid returns updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollection.Dbid, and is useful for accessing the field via an interface.
func (v *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollection) GetDbid() persist.DBID {
	return v.Dbid
}

// GetName returns updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollection.Name, and is useful for accessing the field via an interface.
func (v *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollection) GetName() *string {
	return v.Name
}

// GetTokens returns updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollection.Tokens, and is useful for accessing the field via an interface.
func (v *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollection) GetTokens() []*updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollectionTokensCollectionToken {
	return v.Tokens
}

// updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollectionTokensCollectionToken includes the requested fields of the GraphQL type CollectionToken.
type updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollectionTokensCollectionToken struct {
	Token *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollectionTokensCollectionTokenToken `json:"token"`
}

// GetToken returns updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollectionTokensCollectionToken.Token, and is useful for accessing the field via an interface.
func (v *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollectionTokensCollectionToken) GetToken() *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollectionTokensCollectionTokenToken {
	return v.Token
}

// updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollectionTokensCollectionTokenToken includes the requested fields of the GraphQL type Token.
type updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollectionTokensCollectionTokenToken struct {
	Dbid persist.DBID `json:"dbid"`
}

// GetDbid returns updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollectionTokensCollectionTokenToken.Dbid, and is useful for accessing the field via an interface.
func (v *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadGalleryCollectionsCollectionTokensCollectionTokenToken) GetDbid() persist.DBID {
	return v.Dbid
}

// updateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError includes the requested fields of the GraphQL interface UpdateGalleryPayloadOrError.
//
// updateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError is implemented by the following types:
// updateGalleryMutationUpdateGalleryErrInvalidInput
// updateGalleryMutationUpdateGalleryErrNotAuthorized
// updateGalleryMutationUpdateGalleryUpdateGalleryPayload
type updateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError interface {
	implementsGraphQLInterfaceupdateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *updateGalleryMutationUpdateGalleryErrInvalidInput) implementsGraphQLInterfaceupdateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError() {
}
func (v *updateGalleryMutationUpdateGalleryErrNotAuthorized) implementsGraphQLInterfaceupdateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError() {
}
func (v *updateGalleryMutationUpdateGalleryUpdateGalleryPayload) implementsGraphQLInterfaceupdateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError() {
}

func __unmarshalupdateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError(b []byte, v *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrInvalidInput":
		*v = new(updateGalleryMutationUpdateGalleryErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(updateGalleryMutationUpdateGalleryErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "UpdateGalleryPayload":
		*v = new(updateGalleryMutationUpdateGalleryUpdateGalleryPayload)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UpdateGalleryPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for updateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalupdateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError(v *updateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *updateGalleryMutationUpdateGalleryErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*updateGalleryMutationUpdateGalleryErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *updateGalleryMutationUpdateGalleryErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*updateGalleryMutationUpdateGalleryErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case *updateGalleryMutationUpdateGalleryUpdateGalleryPayload:
		typename = "UpdateGalleryPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*updateGalleryMutationUpdateGalleryUpdateGalleryPayload
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for updateGalleryMutationUpdateGalleryUpdateGalleryPayloadOrError: "%T"`, v)
	}
}

// updateSocialAccountDisplayedResponse is returned by updateSocialAccountDisplayed on success.
type updateSocialAccountDisplayedResponse struct {
	UpdateSocialAccountDisplayed *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError `json:"-"`
}

// GetUpdateSocialAccountDisplayed returns updateSocialAccountDisplayedResponse.UpdateSocialAccountDisplayed, and is useful for accessing the field via an interface.
func (v *updateSocialAccountDisplayedResponse) GetUpdateSocialAccountDisplayed() *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError {
	return v.UpdateSocialAccountDisplayed
}

func (v *updateSocialAccountDisplayedResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateSocialAccountDisplayedResponse
		UpdateSocialAccountDisplayed json.RawMessage `json:"updateSocialAccountDisplayed"`
		graphql.NoUnmarshalJSON
	}
	firstPass.updateSocialAccountDisplayedResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateSocialAccountDisplayed
		src := firstPass.UpdateSocialAccountDisplayed
		if len(src) != 0 && string(src) != "null" {
			*dst = new(updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError)
			err = __unmarshalupdateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal updateSocialAccountDisplayedResponse.UpdateSocialAccountDisplayed: %w", err)
			}
		}
	}
	return nil
}

type __premarshalupdateSocialAccountDisplayedResponse struct {
	UpdateSocialAccountDisplayed json.RawMessage `json:"updateSocialAccountDisplayed"`
}

func (v *updateSocialAccountDisplayedResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateSocialAccountDisplayedResponse) __premarshalJSON() (*__premarshalupdateSocialAccountDisplayedResponse, error) {
	var retval __premarshalupdateSocialAccountDisplayedResponse

	{

		dst := &retval.UpdateSocialAccountDisplayed
		src := v.UpdateSocialAccountDisplayed
		if src != nil {
			var err error
			*dst, err = __marshalupdateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal updateSocialAccountDisplayedResponse.UpdateSocialAccountDisplayed: %w", err)
			}
		}
	}
	return &retval, nil
}

// updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrInvalidInput) GetTypename() *string {
	return v.Typename
}

// GetMessage returns updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrInvalidInput) GetMessage() string {
	return v.Message
}

// updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNeedsToReconnectSocial includes the requested fields of the GraphQL type ErrNeedsToReconnectSocial.
type updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNeedsToReconnectSocial struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNeedsToReconnectSocial.Typename, and is useful for accessing the field via an interface.
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNeedsToReconnectSocial) GetTypename() *string {
	return v.Typename
}

// GetMessage returns updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNeedsToReconnectSocial.Message, and is useful for accessing the field via an interface.
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNeedsToReconnectSocial) GetMessage() string {
	return v.Message
}

// updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNotAuthorized) GetTypename() *string {
	return v.Typename
}

// GetMessage returns updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNotAuthorized) GetMessage() string {
	return v.Message
}

// updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayload includes the requested fields of the GraphQL type UpdateSocialAccountDisplayedPayload.
type updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayload struct {
	Typename *string                                                                                            `json:"__typename"`
	Viewer   *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewer `json:"viewer"`
}

// GetTypename returns updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayload.Typename, and is useful for accessing the field via an interface.
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayload) GetTypename() *string {
	return v.Typename
}

// GetViewer returns updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayload.Viewer, and is useful for accessing the field via an interface.
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayload) GetViewer() *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewer {
	return v.Viewer
}

// updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError includes the requested fields of the GraphQL interface UpdateSocialAccountDisplayedPayloadOrError.
//
// updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError is implemented by the following types:
// updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrInvalidInput
// updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNeedsToReconnectSocial
// updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNotAuthorized
// updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayload
type updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError interface {
	implementsGraphQLInterfaceupdateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrInvalidInput) implementsGraphQLInterfaceupdateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError() {
}
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNeedsToReconnectSocial) implementsGraphQLInterfaceupdateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError() {
}
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNotAuthorized) implementsGraphQLInterfaceupdateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError() {
}
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayload) implementsGraphQLInterfaceupdateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError() {
}

func __unmarshalupdateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError(b []byte, v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrInvalidInput":
		*v = new(updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrNeedsToReconnectSocial":
		*v = new(updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNeedsToReconnectSocial)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "UpdateSocialAccountDisplayedPayload":
		*v = new(updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayload)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UpdateSocialAccountDisplayedPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalupdateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError(v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNeedsToReconnectSocial:
		typename = "ErrNeedsToReconnectSocial"

		result := struct {
			TypeName string `json:"__typename"`
			*updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNeedsToReconnectSocial
		}{typename, v}
		return json.Marshal(result)
	case *updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*updateSocialAccountDisplayedUpdateSocialAccountDisplayedErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayload:
		typename = "UpdateSocialAccountDisplayedPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayload
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadOrError: "%T"`, v)
	}
}

// updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewer includes the requested fields of the GraphQL type Viewer.
type updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewer struct {
	SocialAccounts *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewerSocialAccounts `json:"socialAccounts"`
}

// GetSocialAccounts returns updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewer.SocialAccounts, and is useful for accessing the field via an interface.
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewer) GetSocialAccounts() *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewerSocialAccounts {
	return v.SocialAccounts
}

// updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewerSocialAccounts includes the requested fields of the GraphQL type SocialAccounts.
type updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewerSocialAccounts struct {
	Twitter *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewerSocialAccountsTwitterTwitterSocialAccount `json:"twitter"`
}

// GetTwitter returns updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewerSocialAccounts.Twitter, and is useful for accessing the field via an interface.
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewerSocialAccounts) GetTwitter() *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewerSocialAccountsTwitterTwitterSocialAccount {
	return v.Twitter
}

// updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewerSocialAccountsTwitterTwitterSocialAccount includes the requested fields of the GraphQL type TwitterSocialAccount.
type updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewerSocialAccountsTwitterTwitterSocialAccount struct {
	Username string `json:"username"`
	Display  bool   `json:"display"`
}

// GetUsername returns updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewerSocialAccountsTwitterTwitterSocialAccount.Username, and is useful for accessing the field via an interface.
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewerSocialAccountsTwitterTwitterSocialAccount) GetUsername() string {
	return v.Username
}

// GetDisplay returns updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewerSocialAccountsTwitterTwitterSocialAccount.Display, and is useful for accessing the field via an interface.
func (v *updateSocialAccountDisplayedUpdateSocialAccountDisplayedUpdateSocialAccountDisplayedPayloadViewerSocialAccountsTwitterTwitterSocialAccount) GetDisplay() bool {
	return v.Display
}

// updateUserExperienceResponse is returned by updateUserExperience on success.
type updateUserExperienceResponse struct {
	UpdateUserExperience *updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError `json:"-"`
}

// GetUpdateUserExperience returns updateUserExperienceResponse.UpdateUserExperience, and is useful for accessing the field via an interface.
func (v *updateUserExperienceResponse) GetUpdateUserExperience() *updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError {
	return v.UpdateUserExperience
}

func (v *updateUserExperienceResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateUserExperienceResponse
		UpdateUserExperience json.RawMessage `json:"updateUserExperience"`
		graphql.NoUnmarshalJSON
	}
	firstPass.updateUserExperienceResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UpdateUserExperience
		src := firstPass.UpdateUserExperience
		if len(src) != 0 && string(src) != "null" {
			*dst = new(updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError)
			err = __unmarshalupdateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal updateUserExperienceResponse.UpdateUserExperience: %w", err)
			}
		}
	}
	return nil
}

type __premarshalupdateUserExperienceResponse struct {
	UpdateUserExperience json.RawMessage `json:"updateUserExperience"`
}

func (v *updateUserExperienceResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateUserExperienceResponse) __premarshalJSON() (*__premarshalupdateUserExperienceResponse, error) {
	var retval __premarshalupdateUserExperienceResponse

	{

		dst := &retval.UpdateUserExperience
		src := v.UpdateUserExperience
		if src != nil {
			var err error
			*dst, err = __marshalupdateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal updateUserExperienceResponse.UpdateUserExperience: %w", err)
			}
		}
	}
	return &retval, nil
}

// updateUserExperienceUpdateUserExperienceErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type updateUserExperienceUpdateUserExperienceErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns updateUserExperienceUpdateUserExperienceErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *updateUserExperienceUpdateUserExperienceErrInvalidInput) GetTypename() *string {
	return v.Typename
}

// GetMessage returns updateUserExperienceUpdateUserExperienceErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *updateUserExperienceUpdateUserExperienceErrInvalidInput) GetMessage() string {
	return v.Message
}

// updateUserExperienceUpdateUserExperienceErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type updateUserExperienceUpdateUserExperienceErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns updateUserExperienceUpdateUserExperienceErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *updateUserExperienceUpdateUserExperienceErrNotAuthorized) GetTypename() *string {
	return v.Typename
}

// GetMessage returns updateUserExperienceUpdateUserExperienceErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *updateUserExperienceUpdateUserExperienceErrNotAuthorized) GetMessage() string {
	return v.Message
}

// updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayload includes the requested fields of the GraphQL type UpdateUserExperiencePayload.
type updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayload struct {
	Typename *string                                                                    `json:"__typename"`
	Viewer   *updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadViewer `json:"viewer"`
}

// GetTypename returns updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayload.Typename, and is useful for accessing the field via an interface.
func (v *updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayload) GetTypename() *string {
	return v.Typename
}

// GetViewer returns updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayload.Viewer, and is useful for accessing the field via an interface.
func (v *updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayload) GetViewer() *updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadViewer {
	return v.Viewer
}

// updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError includes the requested fields of the GraphQL interface UpdateUserExperiencePayloadOrError.
//
// updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError is implemented by the following types:
// updateUserExperienceUpdateUserExperienceErrInvalidInput
// updateUserExperienceUpdateUserExperienceErrNotAuthorized
// updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayload
type updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError interface {
	implementsGraphQLInterfaceupdateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *updateUserExperienceUpdateUserExperienceErrInvalidInput) implementsGraphQLInterfaceupdateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError() {
}
func (v *updateUserExperienceUpdateUserExperienceErrNotAuthorized) implementsGraphQLInterfaceupdateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError() {
}
func (v *updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayload) implementsGraphQLInterfaceupdateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError() {
}

func __unmarshalupdateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError(b []byte, v *updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrInvalidInput":
		*v = new(updateUserExperienceUpdateUserExperienceErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrNotAuthorized":
		*v = new(updateUserExperienceUpdateUserExperienceErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "UpdateUserExperiencePayload":
		*v = new(updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayload)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UpdateUserExperiencePayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalupdateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError(v *updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *updateUserExperienceUpdateUserExperienceErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*updateUserExperienceUpdateUserExperienceErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *updateUserExperienceUpdateUserExperienceErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*updateUserExperienceUpdateUserExperienceErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case *updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayload:
		typename = "UpdateUserExperiencePayload"

		result := struct {
			TypeName string `json:"__typename"`
			*updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayload
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadOrError: "%T"`, v)
	}
}

// updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadViewer includes the requested fields of the GraphQL type Viewer.
type updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadViewer struct {
	UserExperiences []updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadViewerUserExperiencesUserExperience `json:"userExperiences"`
}

// GetUserExperiences returns updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadViewer.UserExperiences, and is useful for accessing the field via an interface.
func (v *updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadViewer) GetUserExperiences() []updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadViewerUserExperiencesUserExperience {
	return v.UserExperiences
}

// updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadViewerUserExperiencesUserExperience includes the requested fields of the GraphQL type UserExperience.
type updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadViewerUserExperiencesUserExperience struct {
	Type        UserExperienceType `json:"type"`
	Experienced bool               `json:"experienced"`
}

// GetType returns updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadViewerUserExperiencesUserExperience.Type, and is useful for accessing the field via an interface.
func (v *updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadViewerUserExperiencesUserExperience) GetType() UserExperienceType {
	return v.Type
}

// GetExperienced returns updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadViewerUserExperiencesUserExperience.Experienced, and is useful for accessing the field via an interface.
func (v *updateUserExperienceUpdateUserExperienceUpdateUserExperiencePayloadViewerUserExperiencesUserExperience) GetExperienced() bool {
	return v.Experienced
}

// userByAddressQueryResponse is returned by userByAddressQuery on success.
type userByAddressQueryResponse struct {
	UserByAddress *userByAddressQueryUserByAddressUserByAddressOrError `json:"-"`
}

// GetUserByAddress returns userByAddressQueryResponse.UserByAddress, and is useful for accessing the field via an interface.
func (v *userByAddressQueryResponse) GetUserByAddress() *userByAddressQueryUserByAddressUserByAddressOrError {
	return v.UserByAddress
}

func (v *userByAddressQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userByAddressQueryResponse
		UserByAddress json.RawMessage `json:"userByAddress"`
		graphql.NoUnmarshalJSON
	}
	firstPass.userByAddressQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UserByAddress
		src := firstPass.UserByAddress
		if len(src) != 0 && string(src) != "null" {
			*dst = new(userByAddressQueryUserByAddressUserByAddressOrError)
			err = __unmarshaluserByAddressQueryUserByAddressUserByAddressOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal userByAddressQueryResponse.UserByAddress: %w", err)
			}
		}
	}
	return nil
}

type __premarshaluserByAddressQueryResponse struct {
	UserByAddress json.RawMessage `json:"userByAddress"`
}

func (v *userByAddressQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userByAddressQueryResponse) __premarshalJSON() (*__premarshaluserByAddressQueryResponse, error) {
	var retval __premarshaluserByAddressQueryResponse

	{

		dst := &retval.UserByAddress
		src := v.UserByAddress
		if src != nil {
			var err error
			*dst, err = __marshaluserByAddressQueryUserByAddressUserByAddressOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal userByAddressQueryResponse.UserByAddress: %w", err)
			}
		}
	}
	return &retval, nil
}

// userByAddressQueryUserByAddressErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type userByAddressQueryUserByAddressErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns userByAddressQueryUserByAddressErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *userByAddressQueryUserByAddressErrInvalidInput) GetTypename() *string { return v.Typename }

// GetMessage returns userByAddressQueryUserByAddressErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *userByAddressQueryUserByAddressErrInvalidInput) GetMessage() string { return v.Message }

// userByAddressQueryUserByAddressErrUserNotFound includes the requested fields of the GraphQL type ErrUserNotFound.
type userByAddressQueryUserByAddressErrUserNotFound struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns userByAddressQueryUserByAddressErrUserNotFound.Typename, and is useful for accessing the field via an interface.
func (v *userByAddressQueryUserByAddressErrUserNotFound) GetTypename() *string { return v.Typename }

// GetMessage returns userByAddressQueryUserByAddressErrUserNotFound.Message, and is useful for accessing the field via an interface.
func (v *userByAddressQueryUserByAddressErrUserNotFound) GetMessage() string { return v.Message }

// userByAddressQueryUserByAddressSplitFiUser includes the requested fields of the GraphQL type SplitFiUser.
type userByAddressQueryUserByAddressSplitFiUser struct {
	Typename *string      `json:"__typename"`
	Username *string      `json:"username"`
	Dbid     persist.DBID `json:"dbid"`
}

// GetTypename returns userByAddressQueryUserByAddressSplitFiUser.Typename, and is useful for accessing the field via an interface.
func (v *userByAddressQueryUserByAddressSplitFiUser) GetTypename() *string { return v.Typename }

// GetUsername returns userByAddressQueryUserByAddressSplitFiUser.Username, and is useful for accessing the field via an interface.
func (v *userByAddressQueryUserByAddressSplitFiUser) GetUsername() *string { return v.Username }

// GetDbid returns userByAddressQueryUserByAddressSplitFiUser.Dbid, and is useful for accessing the field via an interface.
func (v *userByAddressQueryUserByAddressSplitFiUser) GetDbid() persist.DBID { return v.Dbid }

// userByAddressQueryUserByAddressUserByAddressOrError includes the requested fields of the GraphQL interface UserByAddressOrError.
//
// userByAddressQueryUserByAddressUserByAddressOrError is implemented by the following types:
// userByAddressQueryUserByAddressErrInvalidInput
// userByAddressQueryUserByAddressErrUserNotFound
// userByAddressQueryUserByAddressSplitFiUser
type userByAddressQueryUserByAddressUserByAddressOrError interface {
	implementsGraphQLInterfaceuserByAddressQueryUserByAddressUserByAddressOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *userByAddressQueryUserByAddressErrInvalidInput) implementsGraphQLInterfaceuserByAddressQueryUserByAddressUserByAddressOrError() {
}
func (v *userByAddressQueryUserByAddressErrUserNotFound) implementsGraphQLInterfaceuserByAddressQueryUserByAddressUserByAddressOrError() {
}
func (v *userByAddressQueryUserByAddressSplitFiUser) implementsGraphQLInterfaceuserByAddressQueryUserByAddressUserByAddressOrError() {
}

func __unmarshaluserByAddressQueryUserByAddressUserByAddressOrError(b []byte, v *userByAddressQueryUserByAddressUserByAddressOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrInvalidInput":
		*v = new(userByAddressQueryUserByAddressErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrUserNotFound":
		*v = new(userByAddressQueryUserByAddressErrUserNotFound)
		return json.Unmarshal(b, *v)
	case "SplitFiUser":
		*v = new(userByAddressQueryUserByAddressSplitFiUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserByAddressOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for userByAddressQueryUserByAddressUserByAddressOrError: "%v"`, tn.TypeName)
	}
}

func __marshaluserByAddressQueryUserByAddressUserByAddressOrError(v *userByAddressQueryUserByAddressUserByAddressOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *userByAddressQueryUserByAddressErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*userByAddressQueryUserByAddressErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *userByAddressQueryUserByAddressErrUserNotFound:
		typename = "ErrUserNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*userByAddressQueryUserByAddressErrUserNotFound
		}{typename, v}
		return json.Marshal(result)
	case *userByAddressQueryUserByAddressSplitFiUser:
		typename = "SplitFiUser"

		result := struct {
			TypeName string `json:"__typename"`
			*userByAddressQueryUserByAddressSplitFiUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for userByAddressQueryUserByAddressUserByAddressOrError: "%T"`, v)
	}
}

// userByIdQueryResponse is returned by userByIdQuery on success.
type userByIdQueryResponse struct {
	UserById *userByIdQueryUserByIdUserByIdOrError `json:"-"`
}

// GetUserById returns userByIdQueryResponse.UserById, and is useful for accessing the field via an interface.
func (v *userByIdQueryResponse) GetUserById() *userByIdQueryUserByIdUserByIdOrError {
	return v.UserById
}

func (v *userByIdQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userByIdQueryResponse
		UserById json.RawMessage `json:"userById"`
		graphql.NoUnmarshalJSON
	}
	firstPass.userByIdQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UserById
		src := firstPass.UserById
		if len(src) != 0 && string(src) != "null" {
			*dst = new(userByIdQueryUserByIdUserByIdOrError)
			err = __unmarshaluserByIdQueryUserByIdUserByIdOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal userByIdQueryResponse.UserById: %w", err)
			}
		}
	}
	return nil
}

type __premarshaluserByIdQueryResponse struct {
	UserById json.RawMessage `json:"userById"`
}

func (v *userByIdQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userByIdQueryResponse) __premarshalJSON() (*__premarshaluserByIdQueryResponse, error) {
	var retval __premarshaluserByIdQueryResponse

	{

		dst := &retval.UserById
		src := v.UserById
		if src != nil {
			var err error
			*dst, err = __marshaluserByIdQueryUserByIdUserByIdOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal userByIdQueryResponse.UserById: %w", err)
			}
		}
	}
	return &retval, nil
}

// userByIdQueryUserByIdErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type userByIdQueryUserByIdErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns userByIdQueryUserByIdErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdErrInvalidInput) GetTypename() *string { return v.Typename }

// GetMessage returns userByIdQueryUserByIdErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdErrInvalidInput) GetMessage() string { return v.Message }

// userByIdQueryUserByIdErrUserNotFound includes the requested fields of the GraphQL type ErrUserNotFound.
type userByIdQueryUserByIdErrUserNotFound struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns userByIdQueryUserByIdErrUserNotFound.Typename, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdErrUserNotFound) GetTypename() *string { return v.Typename }

// GetMessage returns userByIdQueryUserByIdErrUserNotFound.Message, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdErrUserNotFound) GetMessage() string { return v.Message }

// userByIdQueryUserByIdSplitFiUser includes the requested fields of the GraphQL type SplitFiUser.
type userByIdQueryUserByIdSplitFiUser struct {
	Typename       *string                                         `json:"__typename"`
	Username       *string                                         `json:"username"`
	Dbid           persist.DBID                                    `json:"dbid"`
	SocialAccounts *userByIdQueryUserByIdSplitFiUserSocialAccounts `json:"socialAccounts"`
}

// GetTypename returns userByIdQueryUserByIdSplitFiUser.Typename, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdSplitFiUser) GetTypename() *string { return v.Typename }

// GetUsername returns userByIdQueryUserByIdSplitFiUser.Username, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdSplitFiUser) GetUsername() *string { return v.Username }

// GetDbid returns userByIdQueryUserByIdSplitFiUser.Dbid, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdSplitFiUser) GetDbid() persist.DBID { return v.Dbid }

// GetSocialAccounts returns userByIdQueryUserByIdSplitFiUser.SocialAccounts, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdSplitFiUser) GetSocialAccounts() *userByIdQueryUserByIdSplitFiUserSocialAccounts {
	return v.SocialAccounts
}

// userByIdQueryUserByIdSplitFiUserSocialAccounts includes the requested fields of the GraphQL type SocialAccounts.
type userByIdQueryUserByIdSplitFiUserSocialAccounts struct {
	Twitter *userByIdQueryUserByIdSplitFiUserSocialAccountsTwitterTwitterSocialAccount `json:"twitter"`
}

// GetTwitter returns userByIdQueryUserByIdSplitFiUserSocialAccounts.Twitter, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdSplitFiUserSocialAccounts) GetTwitter() *userByIdQueryUserByIdSplitFiUserSocialAccountsTwitterTwitterSocialAccount {
	return v.Twitter
}

// userByIdQueryUserByIdSplitFiUserSocialAccountsTwitterTwitterSocialAccount includes the requested fields of the GraphQL type TwitterSocialAccount.
type userByIdQueryUserByIdSplitFiUserSocialAccountsTwitterTwitterSocialAccount struct {
	Username string `json:"username"`
}

// GetUsername returns userByIdQueryUserByIdSplitFiUserSocialAccountsTwitterTwitterSocialAccount.Username, and is useful for accessing the field via an interface.
func (v *userByIdQueryUserByIdSplitFiUserSocialAccountsTwitterTwitterSocialAccount) GetUsername() string {
	return v.Username
}

// userByIdQueryUserByIdUserByIdOrError includes the requested fields of the GraphQL interface UserByIdOrError.
//
// userByIdQueryUserByIdUserByIdOrError is implemented by the following types:
// userByIdQueryUserByIdErrInvalidInput
// userByIdQueryUserByIdErrUserNotFound
// userByIdQueryUserByIdSplitFiUser
type userByIdQueryUserByIdUserByIdOrError interface {
	implementsGraphQLInterfaceuserByIdQueryUserByIdUserByIdOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *userByIdQueryUserByIdErrInvalidInput) implementsGraphQLInterfaceuserByIdQueryUserByIdUserByIdOrError() {
}
func (v *userByIdQueryUserByIdErrUserNotFound) implementsGraphQLInterfaceuserByIdQueryUserByIdUserByIdOrError() {
}
func (v *userByIdQueryUserByIdSplitFiUser) implementsGraphQLInterfaceuserByIdQueryUserByIdUserByIdOrError() {
}

func __unmarshaluserByIdQueryUserByIdUserByIdOrError(b []byte, v *userByIdQueryUserByIdUserByIdOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrInvalidInput":
		*v = new(userByIdQueryUserByIdErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrUserNotFound":
		*v = new(userByIdQueryUserByIdErrUserNotFound)
		return json.Unmarshal(b, *v)
	case "SplitFiUser":
		*v = new(userByIdQueryUserByIdSplitFiUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserByIdOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for userByIdQueryUserByIdUserByIdOrError: "%v"`, tn.TypeName)
	}
}

func __marshaluserByIdQueryUserByIdUserByIdOrError(v *userByIdQueryUserByIdUserByIdOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *userByIdQueryUserByIdErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*userByIdQueryUserByIdErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *userByIdQueryUserByIdErrUserNotFound:
		typename = "ErrUserNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*userByIdQueryUserByIdErrUserNotFound
		}{typename, v}
		return json.Marshal(result)
	case *userByIdQueryUserByIdSplitFiUser:
		typename = "SplitFiUser"

		result := struct {
			TypeName string `json:"__typename"`
			*userByIdQueryUserByIdSplitFiUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for userByIdQueryUserByIdUserByIdOrError: "%T"`, v)
	}
}

// userByUsernameQueryResponse is returned by userByUsernameQuery on success.
type userByUsernameQueryResponse struct {
	UserByUsername *userByUsernameQueryUserByUsernameUserByUsernameOrError `json:"-"`
}

// GetUserByUsername returns userByUsernameQueryResponse.UserByUsername, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryResponse) GetUserByUsername() *userByUsernameQueryUserByUsernameUserByUsernameOrError {
	return v.UserByUsername
}

func (v *userByUsernameQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*userByUsernameQueryResponse
		UserByUsername json.RawMessage `json:"userByUsername"`
		graphql.NoUnmarshalJSON
	}
	firstPass.userByUsernameQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.UserByUsername
		src := firstPass.UserByUsername
		if len(src) != 0 && string(src) != "null" {
			*dst = new(userByUsernameQueryUserByUsernameUserByUsernameOrError)
			err = __unmarshaluserByUsernameQueryUserByUsernameUserByUsernameOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal userByUsernameQueryResponse.UserByUsername: %w", err)
			}
		}
	}
	return nil
}

type __premarshaluserByUsernameQueryResponse struct {
	UserByUsername json.RawMessage `json:"userByUsername"`
}

func (v *userByUsernameQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *userByUsernameQueryResponse) __premarshalJSON() (*__premarshaluserByUsernameQueryResponse, error) {
	var retval __premarshaluserByUsernameQueryResponse

	{

		dst := &retval.UserByUsername
		src := v.UserByUsername
		if src != nil {
			var err error
			*dst, err = __marshaluserByUsernameQueryUserByUsernameUserByUsernameOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal userByUsernameQueryResponse.UserByUsername: %w", err)
			}
		}
	}
	return &retval, nil
}

// userByUsernameQueryUserByUsernameErrInvalidInput includes the requested fields of the GraphQL type ErrInvalidInput.
type userByUsernameQueryUserByUsernameErrInvalidInput struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns userByUsernameQueryUserByUsernameErrInvalidInput.Typename, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryUserByUsernameErrInvalidInput) GetTypename() *string { return v.Typename }

// GetMessage returns userByUsernameQueryUserByUsernameErrInvalidInput.Message, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryUserByUsernameErrInvalidInput) GetMessage() string { return v.Message }

// userByUsernameQueryUserByUsernameErrUserNotFound includes the requested fields of the GraphQL type ErrUserNotFound.
type userByUsernameQueryUserByUsernameErrUserNotFound struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns userByUsernameQueryUserByUsernameErrUserNotFound.Typename, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryUserByUsernameErrUserNotFound) GetTypename() *string { return v.Typename }

// GetMessage returns userByUsernameQueryUserByUsernameErrUserNotFound.Message, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryUserByUsernameErrUserNotFound) GetMessage() string { return v.Message }

// userByUsernameQueryUserByUsernameSplitFiUser includes the requested fields of the GraphQL type SplitFiUser.
type userByUsernameQueryUserByUsernameSplitFiUser struct {
	Typename *string      `json:"__typename"`
	Username *string      `json:"username"`
	Dbid     persist.DBID `json:"dbid"`
}

// GetTypename returns userByUsernameQueryUserByUsernameSplitFiUser.Typename, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryUserByUsernameSplitFiUser) GetTypename() *string { return v.Typename }

// GetUsername returns userByUsernameQueryUserByUsernameSplitFiUser.Username, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryUserByUsernameSplitFiUser) GetUsername() *string { return v.Username }

// GetDbid returns userByUsernameQueryUserByUsernameSplitFiUser.Dbid, and is useful for accessing the field via an interface.
func (v *userByUsernameQueryUserByUsernameSplitFiUser) GetDbid() persist.DBID { return v.Dbid }

// userByUsernameQueryUserByUsernameUserByUsernameOrError includes the requested fields of the GraphQL interface UserByUsernameOrError.
//
// userByUsernameQueryUserByUsernameUserByUsernameOrError is implemented by the following types:
// userByUsernameQueryUserByUsernameErrInvalidInput
// userByUsernameQueryUserByUsernameErrUserNotFound
// userByUsernameQueryUserByUsernameSplitFiUser
type userByUsernameQueryUserByUsernameUserByUsernameOrError interface {
	implementsGraphQLInterfaceuserByUsernameQueryUserByUsernameUserByUsernameOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *userByUsernameQueryUserByUsernameErrInvalidInput) implementsGraphQLInterfaceuserByUsernameQueryUserByUsernameUserByUsernameOrError() {
}
func (v *userByUsernameQueryUserByUsernameErrUserNotFound) implementsGraphQLInterfaceuserByUsernameQueryUserByUsernameUserByUsernameOrError() {
}
func (v *userByUsernameQueryUserByUsernameSplitFiUser) implementsGraphQLInterfaceuserByUsernameQueryUserByUsernameUserByUsernameOrError() {
}

func __unmarshaluserByUsernameQueryUserByUsernameUserByUsernameOrError(b []byte, v *userByUsernameQueryUserByUsernameUserByUsernameOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrInvalidInput":
		*v = new(userByUsernameQueryUserByUsernameErrInvalidInput)
		return json.Unmarshal(b, *v)
	case "ErrUserNotFound":
		*v = new(userByUsernameQueryUserByUsernameErrUserNotFound)
		return json.Unmarshal(b, *v)
	case "SplitFiUser":
		*v = new(userByUsernameQueryUserByUsernameSplitFiUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing UserByUsernameOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for userByUsernameQueryUserByUsernameUserByUsernameOrError: "%v"`, tn.TypeName)
	}
}

func __marshaluserByUsernameQueryUserByUsernameUserByUsernameOrError(v *userByUsernameQueryUserByUsernameUserByUsernameOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *userByUsernameQueryUserByUsernameErrInvalidInput:
		typename = "ErrInvalidInput"

		result := struct {
			TypeName string `json:"__typename"`
			*userByUsernameQueryUserByUsernameErrInvalidInput
		}{typename, v}
		return json.Marshal(result)
	case *userByUsernameQueryUserByUsernameErrUserNotFound:
		typename = "ErrUserNotFound"

		result := struct {
			TypeName string `json:"__typename"`
			*userByUsernameQueryUserByUsernameErrUserNotFound
		}{typename, v}
		return json.Marshal(result)
	case *userByUsernameQueryUserByUsernameSplitFiUser:
		typename = "SplitFiUser"

		result := struct {
			TypeName string `json:"__typename"`
			*userByUsernameQueryUserByUsernameSplitFiUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for userByUsernameQueryUserByUsernameUserByUsernameOrError: "%T"`, v)
	}
}

// viewGalleryMutationResponse is returned by viewGalleryMutation on success.
type viewGalleryMutationResponse struct {
	ViewGallery *viewGalleryMutationViewGalleryViewGalleryPayloadOrError `json:"-"`
}

// GetViewGallery returns viewGalleryMutationResponse.ViewGallery, and is useful for accessing the field via an interface.
func (v *viewGalleryMutationResponse) GetViewGallery() *viewGalleryMutationViewGalleryViewGalleryPayloadOrError {
	return v.ViewGallery
}

func (v *viewGalleryMutationResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*viewGalleryMutationResponse
		ViewGallery json.RawMessage `json:"viewGallery"`
		graphql.NoUnmarshalJSON
	}
	firstPass.viewGalleryMutationResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.ViewGallery
		src := firstPass.ViewGallery
		if len(src) != 0 && string(src) != "null" {
			*dst = new(viewGalleryMutationViewGalleryViewGalleryPayloadOrError)
			err = __unmarshalviewGalleryMutationViewGalleryViewGalleryPayloadOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal viewGalleryMutationResponse.ViewGallery: %w", err)
			}
		}
	}
	return nil
}

type __premarshalviewGalleryMutationResponse struct {
	ViewGallery json.RawMessage `json:"viewGallery"`
}

func (v *viewGalleryMutationResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *viewGalleryMutationResponse) __premarshalJSON() (*__premarshalviewGalleryMutationResponse, error) {
	var retval __premarshalviewGalleryMutationResponse

	{

		dst := &retval.ViewGallery
		src := v.ViewGallery
		if src != nil {
			var err error
			*dst, err = __marshalviewGalleryMutationViewGalleryViewGalleryPayloadOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal viewGalleryMutationResponse.ViewGallery: %w", err)
			}
		}
	}
	return &retval, nil
}

// viewGalleryMutationViewGalleryErrAuthenticationFailed includes the requested fields of the GraphQL type ErrAuthenticationFailed.
type viewGalleryMutationViewGalleryErrAuthenticationFailed struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns viewGalleryMutationViewGalleryErrAuthenticationFailed.Typename, and is useful for accessing the field via an interface.
func (v *viewGalleryMutationViewGalleryErrAuthenticationFailed) GetTypename() *string {
	return v.Typename
}

// GetMessage returns viewGalleryMutationViewGalleryErrAuthenticationFailed.Message, and is useful for accessing the field via an interface.
func (v *viewGalleryMutationViewGalleryErrAuthenticationFailed) GetMessage() string { return v.Message }

// viewGalleryMutationViewGalleryViewGalleryPayload includes the requested fields of the GraphQL type ViewGalleryPayload.
type viewGalleryMutationViewGalleryViewGalleryPayload struct {
	Typename *string                                                  `json:"__typename"`
	Gallery  *viewGalleryMutationViewGalleryViewGalleryPayloadGallery `json:"gallery"`
}

// GetTypename returns viewGalleryMutationViewGalleryViewGalleryPayload.Typename, and is useful for accessing the field via an interface.
func (v *viewGalleryMutationViewGalleryViewGalleryPayload) GetTypename() *string { return v.Typename }

// GetGallery returns viewGalleryMutationViewGalleryViewGalleryPayload.Gallery, and is useful for accessing the field via an interface.
func (v *viewGalleryMutationViewGalleryViewGalleryPayload) GetGallery() *viewGalleryMutationViewGalleryViewGalleryPayloadGallery {
	return v.Gallery
}

// viewGalleryMutationViewGalleryViewGalleryPayloadGallery includes the requested fields of the GraphQL type Gallery.
type viewGalleryMutationViewGalleryViewGalleryPayloadGallery struct {
	Dbid persist.DBID `json:"dbid"`
}

// GetDbid returns viewGalleryMutationViewGalleryViewGalleryPayloadGallery.Dbid, and is useful for accessing the field via an interface.
func (v *viewGalleryMutationViewGalleryViewGalleryPayloadGallery) GetDbid() persist.DBID {
	return v.Dbid
}

// viewGalleryMutationViewGalleryViewGalleryPayloadOrError includes the requested fields of the GraphQL interface ViewGalleryPayloadOrError.
//
// viewGalleryMutationViewGalleryViewGalleryPayloadOrError is implemented by the following types:
// viewGalleryMutationViewGalleryErrAuthenticationFailed
// viewGalleryMutationViewGalleryViewGalleryPayload
type viewGalleryMutationViewGalleryViewGalleryPayloadOrError interface {
	implementsGraphQLInterfaceviewGalleryMutationViewGalleryViewGalleryPayloadOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *viewGalleryMutationViewGalleryErrAuthenticationFailed) implementsGraphQLInterfaceviewGalleryMutationViewGalleryViewGalleryPayloadOrError() {
}
func (v *viewGalleryMutationViewGalleryViewGalleryPayload) implementsGraphQLInterfaceviewGalleryMutationViewGalleryViewGalleryPayloadOrError() {
}

func __unmarshalviewGalleryMutationViewGalleryViewGalleryPayloadOrError(b []byte, v *viewGalleryMutationViewGalleryViewGalleryPayloadOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrAuthenticationFailed":
		*v = new(viewGalleryMutationViewGalleryErrAuthenticationFailed)
		return json.Unmarshal(b, *v)
	case "ViewGalleryPayload":
		*v = new(viewGalleryMutationViewGalleryViewGalleryPayload)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ViewGalleryPayloadOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for viewGalleryMutationViewGalleryViewGalleryPayloadOrError: "%v"`, tn.TypeName)
	}
}

func __marshalviewGalleryMutationViewGalleryViewGalleryPayloadOrError(v *viewGalleryMutationViewGalleryViewGalleryPayloadOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *viewGalleryMutationViewGalleryErrAuthenticationFailed:
		typename = "ErrAuthenticationFailed"

		result := struct {
			TypeName string `json:"__typename"`
			*viewGalleryMutationViewGalleryErrAuthenticationFailed
		}{typename, v}
		return json.Marshal(result)
	case *viewGalleryMutationViewGalleryViewGalleryPayload:
		typename = "ViewGalleryPayload"

		result := struct {
			TypeName string `json:"__typename"`
			*viewGalleryMutationViewGalleryViewGalleryPayload
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for viewGalleryMutationViewGalleryViewGalleryPayloadOrError: "%T"`, v)
	}
}

// viewerQueryResponse is returned by viewerQuery on success.
type viewerQueryResponse struct {
	Viewer *viewerQueryViewerViewerOrError `json:"-"`
}

// GetViewer returns viewerQueryResponse.Viewer, and is useful for accessing the field via an interface.
func (v *viewerQueryResponse) GetViewer() *viewerQueryViewerViewerOrError { return v.Viewer }

func (v *viewerQueryResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*viewerQueryResponse
		Viewer json.RawMessage `json:"viewer"`
		graphql.NoUnmarshalJSON
	}
	firstPass.viewerQueryResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Viewer
		src := firstPass.Viewer
		if len(src) != 0 && string(src) != "null" {
			*dst = new(viewerQueryViewerViewerOrError)
			err = __unmarshalviewerQueryViewerViewerOrError(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal viewerQueryResponse.Viewer: %w", err)
			}
		}
	}
	return nil
}

type __premarshalviewerQueryResponse struct {
	Viewer json.RawMessage `json:"viewer"`
}

func (v *viewerQueryResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *viewerQueryResponse) __premarshalJSON() (*__premarshalviewerQueryResponse, error) {
	var retval __premarshalviewerQueryResponse

	{

		dst := &retval.Viewer
		src := v.Viewer
		if src != nil {
			var err error
			*dst, err = __marshalviewerQueryViewerViewerOrError(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"unable to marshal viewerQueryResponse.Viewer: %w", err)
			}
		}
	}
	return &retval, nil
}

// viewerQueryViewer includes the requested fields of the GraphQL type Viewer.
type viewerQueryViewer struct {
	Typename        *string                                          `json:"__typename"`
	UserExperiences []viewerQueryViewerUserExperiencesUserExperience `json:"userExperiences"`
	User            *viewerQueryViewerUserSplitFiUser                `json:"user"`
}

// GetTypename returns viewerQueryViewer.Typename, and is useful for accessing the field via an interface.
func (v *viewerQueryViewer) GetTypename() *string { return v.Typename }

// GetUserExperiences returns viewerQueryViewer.UserExperiences, and is useful for accessing the field via an interface.
func (v *viewerQueryViewer) GetUserExperiences() []viewerQueryViewerUserExperiencesUserExperience {
	return v.UserExperiences
}

// GetUser returns viewerQueryViewer.User, and is useful for accessing the field via an interface.
func (v *viewerQueryViewer) GetUser() *viewerQueryViewerUserSplitFiUser { return v.User }

// viewerQueryViewerErrNotAuthorized includes the requested fields of the GraphQL type ErrNotAuthorized.
type viewerQueryViewerErrNotAuthorized struct {
	Typename *string `json:"__typename"`
	Message  string  `json:"message"`
}

// GetTypename returns viewerQueryViewerErrNotAuthorized.Typename, and is useful for accessing the field via an interface.
func (v *viewerQueryViewerErrNotAuthorized) GetTypename() *string { return v.Typename }

// GetMessage returns viewerQueryViewerErrNotAuthorized.Message, and is useful for accessing the field via an interface.
func (v *viewerQueryViewerErrNotAuthorized) GetMessage() string { return v.Message }

// viewerQueryViewerUserExperiencesUserExperience includes the requested fields of the GraphQL type UserExperience.
type viewerQueryViewerUserExperiencesUserExperience struct {
	Type        UserExperienceType `json:"type"`
	Experienced bool               `json:"experienced"`
}

// GetType returns viewerQueryViewerUserExperiencesUserExperience.Type, and is useful for accessing the field via an interface.
func (v *viewerQueryViewerUserExperiencesUserExperience) GetType() UserExperienceType { return v.Type }

// GetExperienced returns viewerQueryViewerUserExperiencesUserExperience.Experienced, and is useful for accessing the field via an interface.
func (v *viewerQueryViewerUserExperiencesUserExperience) GetExperienced() bool { return v.Experienced }

// viewerQueryViewerUserSplitFiUser includes the requested fields of the GraphQL type SplitFiUser.
type viewerQueryViewerUserSplitFiUser struct {
	Username       *string                                         `json:"username"`
	Dbid           persist.DBID                                    `json:"dbid"`
	SocialAccounts *viewerQueryViewerUserSplitFiUserSocialAccounts `json:"socialAccounts"`
}

// GetUsername returns viewerQueryViewerUserSplitFiUser.Username, and is useful for accessing the field via an interface.
func (v *viewerQueryViewerUserSplitFiUser) GetUsername() *string { return v.Username }

// GetDbid returns viewerQueryViewerUserSplitFiUser.Dbid, and is useful for accessing the field via an interface.
func (v *viewerQueryViewerUserSplitFiUser) GetDbid() persist.DBID { return v.Dbid }

// GetSocialAccounts returns viewerQueryViewerUserSplitFiUser.SocialAccounts, and is useful for accessing the field via an interface.
func (v *viewerQueryViewerUserSplitFiUser) GetSocialAccounts() *viewerQueryViewerUserSplitFiUserSocialAccounts {
	return v.SocialAccounts
}

// viewerQueryViewerUserSplitFiUserSocialAccounts includes the requested fields of the GraphQL type SocialAccounts.
type viewerQueryViewerUserSplitFiUserSocialAccounts struct {
	Twitter *viewerQueryViewerUserSplitFiUserSocialAccountsTwitterTwitterSocialAccount `json:"twitter"`
}

// GetTwitter returns viewerQueryViewerUserSplitFiUserSocialAccounts.Twitter, and is useful for accessing the field via an interface.
func (v *viewerQueryViewerUserSplitFiUserSocialAccounts) GetTwitter() *viewerQueryViewerUserSplitFiUserSocialAccountsTwitterTwitterSocialAccount {
	return v.Twitter
}

// viewerQueryViewerUserSplitFiUserSocialAccountsTwitterTwitterSocialAccount includes the requested fields of the GraphQL type TwitterSocialAccount.
type viewerQueryViewerUserSplitFiUserSocialAccountsTwitterTwitterSocialAccount struct {
	Username string `json:"username"`
}

// GetUsername returns viewerQueryViewerUserSplitFiUserSocialAccountsTwitterTwitterSocialAccount.Username, and is useful for accessing the field via an interface.
func (v *viewerQueryViewerUserSplitFiUserSocialAccountsTwitterTwitterSocialAccount) GetUsername() string {
	return v.Username
}

// viewerQueryViewerViewerOrError includes the requested fields of the GraphQL interface ViewerOrError.
//
// viewerQueryViewerViewerOrError is implemented by the following types:
// viewerQueryViewerErrNotAuthorized
// viewerQueryViewer
type viewerQueryViewerViewerOrError interface {
	implementsGraphQLInterfaceviewerQueryViewerViewerOrError()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *viewerQueryViewerErrNotAuthorized) implementsGraphQLInterfaceviewerQueryViewerViewerOrError() {
}
func (v *viewerQueryViewer) implementsGraphQLInterfaceviewerQueryViewerViewerOrError() {}

func __unmarshalviewerQueryViewerViewerOrError(b []byte, v *viewerQueryViewerViewerOrError) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ErrNotAuthorized":
		*v = new(viewerQueryViewerErrNotAuthorized)
		return json.Unmarshal(b, *v)
	case "Viewer":
		*v = new(viewerQueryViewer)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing ViewerOrError.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for viewerQueryViewerViewerOrError: "%v"`, tn.TypeName)
	}
}

func __marshalviewerQueryViewerViewerOrError(v *viewerQueryViewerViewerOrError) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *viewerQueryViewerErrNotAuthorized:
		typename = "ErrNotAuthorized"

		result := struct {
			TypeName string `json:"__typename"`
			*viewerQueryViewerErrNotAuthorized
		}{typename, v}
		return json.Marshal(result)
	case *viewerQueryViewer:
		typename = "Viewer"

		result := struct {
			TypeName string `json:"__typename"`
			*viewerQueryViewer
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for viewerQueryViewerViewerOrError: "%T"`, v)
	}
}

// The query or mutation executed by addUserWalletMutation.
const addUserWalletMutation_Operation = `
mutation addUserWalletMutation ($chainAddress: ChainAddressInput!, $authMechanism: AuthMechanism!) {
	addUserWallet(chainAddress: $chainAddress, authMechanism: $authMechanism) {
		__typename
		... on Error {
			__typename
			message
		}
		... on AddUserWalletPayload {
			viewer {
				user {
					wallets {
						dbid
						chainAddress {
							address
							chain
						}
					}
				}
			}
		}
	}
}
`

func addUserWalletMutation(
	ctx context.Context,
	client graphql.Client,
	chainAddress ChainAddressInput,
	authMechanism AuthMechanism,
) (*addUserWalletMutationResponse, error) {
	req := &graphql.Request{
		OpName: "addUserWalletMutation",
		Query:  addUserWalletMutation_Operation,
		Variables: &__addUserWalletMutationInput{
			ChainAddress:  chainAddress,
			AuthMechanism: authMechanism,
		},
	}
	var err error

	var data addUserWalletMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by connectSocialAccount.
const connectSocialAccount_Operation = `
mutation connectSocialAccount ($auth: SocialAuthMechanism!, $display: Boolean!) {
	connectSocialAccount(input: $auth, display: $display) {
		__typename
		... on Error {
			__typename
			message
		}
		... on ConnectSocialAccountPayload {
			viewer {
				socialAccounts {
					twitter {
						username
						display
					}
				}
			}
		}
	}
}
`

func connectSocialAccount(
	ctx context.Context,
	client graphql.Client,
	auth SocialAuthMechanism,
	display bool,
) (*connectSocialAccountResponse, error) {
	req := &graphql.Request{
		OpName: "connectSocialAccount",
		Query:  connectSocialAccount_Operation,
		Variables: &__connectSocialAccountInput{
			Auth:    auth,
			Display: display,
		},
	}
	var err error

	var data connectSocialAccountResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createCollectionMutation.
const createCollectionMutation_Operation = `
mutation createCollectionMutation ($input: CreateCollectionInput!) {
	createCollection(input: $input) {
		__typename
		... on Error {
			__typename
			message
		}
		... on CreateCollectionPayload {
			collection {
				dbid
				name
				tokens {
					token {
						dbid
					}
				}
			}
		}
	}
}
`

func createCollectionMutation(
	ctx context.Context,
	client graphql.Client,
	input CreateCollectionInput,
) (*createCollectionMutationResponse, error) {
	req := &graphql.Request{
		OpName: "createCollectionMutation",
		Query:  createCollectionMutation_Operation,
		Variables: &__createCollectionMutationInput{
			Input: input,
		},
	}
	var err error

	var data createCollectionMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createGalleryMutation.
const createGalleryMutation_Operation = `
mutation createGalleryMutation ($input: CreateGalleryInput!) {
	createGallery(input: $input) {
		__typename
		... on Error {
			__typename
			message
		}
		... on CreateGalleryPayload {
			gallery {
				dbid
				name
				description
				position
			}
		}
	}
}
`

func createGalleryMutation(
	ctx context.Context,
	client graphql.Client,
	input CreateGalleryInput,
) (*createGalleryMutationResponse, error) {
	req := &graphql.Request{
		OpName: "createGalleryMutation",
		Query:  createGalleryMutation_Operation,
		Variables: &__createGalleryMutationInput{
			Input: input,
		},
	}
	var err error

	var data createGalleryMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createUserMutation.
const createUserMutation_Operation = `
mutation createUserMutation ($authMechanism: AuthMechanism!, $input: CreateUserInput!) {
	createUser(authMechanism: $authMechanism, input: $input) {
		__typename
		... on Error {
			__typename
			message
		}
		... on CreateUserPayload {
			viewer {
				user {
					username
					dbid
					bio
					galleries {
						dbid
					}
				}
			}
		}
	}
}
`

func createUserMutation(
	ctx context.Context,
	client graphql.Client,
	authMechanism AuthMechanism,
	input CreateUserInput,
) (*createUserMutationResponse, error) {
	req := &graphql.Request{
		OpName: "createUserMutation",
		Query:  createUserMutation_Operation,
		Variables: &__createUserMutationInput{
			AuthMechanism: authMechanism,
			Input:         input,
		},
	}
	var err error

	var data createUserMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by disconnectSocialAccount.
const disconnectSocialAccount_Operation = `
mutation disconnectSocialAccount ($accountType: SocialAccountType!) {
	disconnectSocialAccount(accountType: $accountType) {
		__typename
		... on Error {
			__typename
			message
		}
		... on DisconnectSocialAccountPayload {
			viewer {
				socialAccounts {
					twitter {
						username
					}
				}
			}
		}
	}
}
`

func disconnectSocialAccount(
	ctx context.Context,
	client graphql.Client,
	accountType SocialAccountType,
) (*disconnectSocialAccountResponse, error) {
	req := &graphql.Request{
		OpName: "disconnectSocialAccount",
		Query:  disconnectSocialAccount_Operation,
		Variables: &__disconnectSocialAccountInput{
			AccountType: accountType,
		},
	}
	var err error

	var data disconnectSocialAccountResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getAuthNonceMutation.
const getAuthNonceMutation_Operation = `
mutation getAuthNonceMutation ($input: ChainAddressInput!) {
	getAuthNonce(chainAddress: $input) {
		__typename
		... on Error {
			__typename
			message
		}
		... on AuthNonce {
			nonce
			userExists
		}
	}
}
`

func getAuthNonceMutation(
	ctx context.Context,
	client graphql.Client,
	input ChainAddressInput,
) (*getAuthNonceMutationResponse, error) {
	req := &graphql.Request{
		OpName: "getAuthNonceMutation",
		Query:  getAuthNonceMutation_Operation,
		Variables: &__getAuthNonceMutationInput{
			Input: input,
		},
	}
	var err error

	var data getAuthNonceMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by loginMutation.
const loginMutation_Operation = `
mutation loginMutation ($authMechanism: AuthMechanism!) {
	login(authMechanism: $authMechanism) {
		__typename
		... on Error {
			__typename
			message
		}
		... on LoginPayload {
			viewer {
				user {
					username
					dbid
				}
			}
		}
	}
}
`

func loginMutation(
	ctx context.Context,
	client graphql.Client,
	authMechanism AuthMechanism,
) (*loginMutationResponse, error) {
	req := &graphql.Request{
		OpName: "loginMutation",
		Query:  loginMutation_Operation,
		Variables: &__loginMutationInput{
			AuthMechanism: authMechanism,
		},
	}
	var err error

	var data loginMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by logoutMutation.
const logoutMutation_Operation = `
mutation logoutMutation {
	logout {
		viewer {
			user {
				username
				dbid
			}
		}
	}
}
`

func logoutMutation(
	ctx context.Context,
	client graphql.Client,
) (*logoutMutationResponse, error) {
	req := &graphql.Request{
		OpName: "logoutMutation",
		Query:  logoutMutation_Operation,
	}
	var err error

	var data logoutMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by moveCollectionToGallery.
const moveCollectionToGallery_Operation = `
mutation moveCollectionToGallery ($input: MoveCollectionToGalleryInput!) {
	moveCollectionToGallery(input: $input) {
		__typename
		... on Error {
			__typename
			message
		}
		... on MoveCollectionToGalleryPayload {
			oldGallery {
				dbid
				collections {
					dbid
				}
			}
			newGallery {
				dbid
				collections {
					dbid
				}
			}
		}
	}
}
`

func moveCollectionToGallery(
	ctx context.Context,
	client graphql.Client,
	input MoveCollectionToGalleryInput,
) (*moveCollectionToGalleryResponse, error) {
	req := &graphql.Request{
		OpName: "moveCollectionToGallery",
		Query:  moveCollectionToGallery_Operation,
		Variables: &__moveCollectionToGalleryInput{
			Input: input,
		},
	}
	var err error

	var data moveCollectionToGalleryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by publishGalleryMutation.
const publishGalleryMutation_Operation = `
mutation publishGalleryMutation ($input: PublishGalleryInput!) {
	publishGallery(input: $input) {
		__typename
		... on Error {
			__typename
			message
		}
		... on PublishGalleryPayload {
			gallery {
				dbid
			}
		}
	}
}
`

func publishGalleryMutation(
	ctx context.Context,
	client graphql.Client,
	input PublishGalleryInput,
) (*publishGalleryMutationResponse, error) {
	req := &graphql.Request{
		OpName: "publishGalleryMutation",
		Query:  publishGalleryMutation_Operation,
		Variables: &__publishGalleryMutationInput{
			Input: input,
		},
	}
	var err error

	var data publishGalleryMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by removeUserWalletsMutation.
const removeUserWalletsMutation_Operation = `
mutation removeUserWalletsMutation ($walletIds: [DBID!]!) {
	removeUserWallets(walletIds: $walletIds) {
		__typename
		... on Error {
			__typename
			message
		}
		... on RemoveUserWalletsPayload {
			viewer {
				user {
					wallets {
						dbid
						chainAddress {
							address
							chain
						}
					}
				}
			}
		}
	}
}
`

func removeUserWalletsMutation(
	ctx context.Context,
	client graphql.Client,
	walletIds []persist.DBID,
) (*removeUserWalletsMutationResponse, error) {
	req := &graphql.Request{
		OpName: "removeUserWalletsMutation",
		Query:  removeUserWalletsMutation_Operation,
		Variables: &__removeUserWalletsMutationInput{
			WalletIds: walletIds,
		},
	}
	var err error

	var data removeUserWalletsMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by syncTokensMutation.
const syncTokensMutation_Operation = `
mutation syncTokensMutation ($chains: [Chain!]) {
	syncTokens(chains: $chains) {
		__typename
		... on Error {
			__typename
			message
		}
		... on SyncTokensPayload {
			viewer {
				user {
					tokens {
						chain
						dbid
						tokenId
						media {
							__typename
							... on ImageMedia {
								mediaURL
								mediaType
							}
							... on GIFMedia {
								mediaURL
								mediaType
							}
							... on VideoMedia {
								mediaURL
								mediaType
							}
							... on AudioMedia {
								mediaURL
								mediaType
							}
							... on TextMedia {
								mediaURL
								mediaType
							}
							... on PdfMedia {
								mediaURL
								mediaType
							}
							... on HtmlMedia {
								mediaURL
								mediaType
							}
							... on JsonMedia {
								mediaURL
								mediaType
							}
							... on GltfMedia {
								mediaURL
								mediaType
							}
							... on UnknownMedia {
								mediaURL
								mediaType
							}
							... on SyncingMedia {
								mediaURL
								mediaType
							}
							... on InvalidMedia {
								mediaURL
								mediaType
							}
						}
					}
				}
			}
		}
	}
}
`

func syncTokensMutation(
	ctx context.Context,
	client graphql.Client,
	chains []Chain,
) (*syncTokensMutationResponse, error) {
	req := &graphql.Request{
		OpName: "syncTokensMutation",
		Query:  syncTokensMutation_Operation,
		Variables: &__syncTokensMutationInput{
			Chains: chains,
		},
	}
	var err error

	var data syncTokensMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateGalleryMutation.
const updateGalleryMutation_Operation = `
mutation updateGalleryMutation ($input: UpdateGalleryInput!) {
	updateGallery(input: $input) {
		__typename
		... on UpdateGalleryPayload {
			gallery {
				dbid
				name
				description
				collections {
					dbid
					name
					tokens {
						token {
							dbid
						}
					}
				}
			}
		}
	}
}
`

func updateGalleryMutation(
	ctx context.Context,
	client graphql.Client,
	input UpdateGalleryInput,
) (*updateGalleryMutationResponse, error) {
	req := &graphql.Request{
		OpName: "updateGalleryMutation",
		Query:  updateGalleryMutation_Operation,
		Variables: &__updateGalleryMutationInput{
			Input: input,
		},
	}
	var err error

	var data updateGalleryMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateSocialAccountDisplayed.
const updateSocialAccountDisplayed_Operation = `
mutation updateSocialAccountDisplayed ($input: UpdateSocialAccountDisplayedInput!) {
	updateSocialAccountDisplayed(input: $input) {
		__typename
		... on Error {
			__typename
			message
		}
		... on UpdateSocialAccountDisplayedPayload {
			viewer {
				socialAccounts {
					twitter {
						username
						display
					}
				}
			}
		}
	}
}
`

func updateSocialAccountDisplayed(
	ctx context.Context,
	client graphql.Client,
	input UpdateSocialAccountDisplayedInput,
) (*updateSocialAccountDisplayedResponse, error) {
	req := &graphql.Request{
		OpName: "updateSocialAccountDisplayed",
		Query:  updateSocialAccountDisplayed_Operation,
		Variables: &__updateSocialAccountDisplayedInput{
			Input: input,
		},
	}
	var err error

	var data updateSocialAccountDisplayedResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateUserExperience.
const updateUserExperience_Operation = `
mutation updateUserExperience ($input: UpdateUserExperienceInput!) {
	updateUserExperience(input: $input) {
		__typename
		... on Error {
			__typename
			message
		}
		... on UpdateUserExperiencePayload {
			viewer {
				userExperiences {
					type
					experienced
				}
			}
		}
	}
}
`

func updateUserExperience(
	ctx context.Context,
	client graphql.Client,
	input UpdateUserExperienceInput,
) (*updateUserExperienceResponse, error) {
	req := &graphql.Request{
		OpName: "updateUserExperience",
		Query:  updateUserExperience_Operation,
		Variables: &__updateUserExperienceInput{
			Input: input,
		},
	}
	var err error

	var data updateUserExperienceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by userByAddressQuery.
const userByAddressQuery_Operation = `
query userByAddressQuery ($input: ChainAddressInput!) {
	userByAddress(chainAddress: $input) {
		__typename
		... on Error {
			__typename
			message
		}
		... on SplitFiUser {
			username
			dbid
		}
	}
}
`

func userByAddressQuery(
	ctx context.Context,
	client graphql.Client,
	input ChainAddressInput,
) (*userByAddressQueryResponse, error) {
	req := &graphql.Request{
		OpName: "userByAddressQuery",
		Query:  userByAddressQuery_Operation,
		Variables: &__userByAddressQueryInput{
			Input: input,
		},
	}
	var err error

	var data userByAddressQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by userByIdQuery.
const userByIdQuery_Operation = `
query userByIdQuery ($id: DBID!) {
	userById(id: $id) {
		__typename
		... on Error {
			__typename
			message
		}
		... on SplitFiUser {
			username
			dbid
			socialAccounts {
				twitter {
					username
				}
			}
		}
	}
}
`

func userByIdQuery(
	ctx context.Context,
	client graphql.Client,
	id persist.DBID,
) (*userByIdQueryResponse, error) {
	req := &graphql.Request{
		OpName: "userByIdQuery",
		Query:  userByIdQuery_Operation,
		Variables: &__userByIdQueryInput{
			Id: id,
		},
	}
	var err error

	var data userByIdQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by userByUsernameQuery.
const userByUsernameQuery_Operation = `
query userByUsernameQuery ($user: String!) {
	userByUsername(username: $user) {
		__typename
		... on Error {
			__typename
			message
		}
		... on SplitFiUser {
			username
			dbid
		}
	}
}
`

func userByUsernameQuery(
	ctx context.Context,
	client graphql.Client,
	user string,
) (*userByUsernameQueryResponse, error) {
	req := &graphql.Request{
		OpName: "userByUsernameQuery",
		Query:  userByUsernameQuery_Operation,
		Variables: &__userByUsernameQueryInput{
			User: user,
		},
	}
	var err error

	var data userByUsernameQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by viewGalleryMutation.
const viewGalleryMutation_Operation = `
mutation viewGalleryMutation ($galleryId: DBID!) {
	viewGallery(galleryId: $galleryId) {
		__typename
		... on Error {
			__typename
			message
		}
		... on ViewGalleryPayload {
			gallery {
				dbid
			}
		}
	}
}
`

func viewGalleryMutation(
	ctx context.Context,
	client graphql.Client,
	galleryId persist.DBID,
) (*viewGalleryMutationResponse, error) {
	req := &graphql.Request{
		OpName: "viewGalleryMutation",
		Query:  viewGalleryMutation_Operation,
		Variables: &__viewGalleryMutationInput{
			GalleryId: galleryId,
		},
	}
	var err error

	var data viewGalleryMutationResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by viewerQuery.
const viewerQuery_Operation = `
query viewerQuery {
	viewer {
		__typename
		... on Error {
			__typename
			message
		}
		... on Viewer {
			userExperiences {
				type
				experienced
			}
			user {
				username
				dbid
				socialAccounts {
					twitter {
						username
					}
				}
			}
		}
	}
}
`

func viewerQuery(
	ctx context.Context,
	client graphql.Client,
) (*viewerQueryResponse, error) {
	req := &graphql.Request{
		OpName: "viewerQuery",
		Query:  viewerQuery_Operation,
	}
	var err error

	var data viewerQueryResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
