package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"

	"github.com/mikeydub/go-gallery/graphql/generated"
	"github.com/mikeydub/go-gallery/graphql/model"
	"github.com/mikeydub/go-gallery/service/persist"
)

// Gallery is the resolver for the gallery field.
func (r *collectionResolver) Gallery(ctx context.Context, obj *model.Collection) (*model.Gallery, error) {
	panic(fmt.Errorf("not implemented: Gallery - gallery"))
}

// Tokens is the resolver for the tokens field.
func (r *collectionResolver) Tokens(ctx context.Context, obj *model.Collection, limit *int) ([]*model.CollectionToken, error) {
	panic(fmt.Errorf("not implemented: Tokens - tokens"))
}

// Token is the resolver for the token field.
func (r *collectionTokenResolver) Token(ctx context.Context, obj *model.CollectionToken) (*model.Token, error) {
	panic(fmt.Errorf("not implemented: Token - token"))
}

// Collection is the resolver for the collection field.
func (r *collectionTokenResolver) Collection(ctx context.Context, obj *model.CollectionToken) (*model.Collection, error) {
	panic(fmt.Errorf("not implemented: Collection - collection"))
}

// TokenSettings is the resolver for the tokenSettings field.
func (r *collectionTokenResolver) TokenSettings(ctx context.Context, obj *model.CollectionToken) (*model.CollectionTokenSettings, error) {
	panic(fmt.Errorf("not implemented: TokenSettings - tokenSettings"))
}

// TokensInCommunity is the resolver for the tokensInCommunity field.
func (r *communityResolver) TokensInCommunity(ctx context.Context, obj *model.Community, before *string, after *string, first *int, last *int, onlyGalleryUsers *bool) (*model.TokensConnection, error) {
	panic(fmt.Errorf("not implemented: TokensInCommunity - tokensInCommunity"))
}

// Owners is the resolver for the owners field.
func (r *communityResolver) Owners(ctx context.Context, obj *model.Community, before *string, after *string, first *int, last *int, onlyGalleryUsers *bool) (*model.TokenHoldersConnection, error) {
	panic(fmt.Errorf("not implemented: Owners - owners"))
}

// User is the resolver for the user field.
func (r *followInfoResolver) User(ctx context.Context, obj *model.FollowInfo) (*model.GalleryUser, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// User is the resolver for the user field.
func (r *followUserPayloadResolver) User(ctx context.Context, obj *model.FollowUserPayload) (*model.GalleryUser, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// TokenPreviews is the resolver for the tokenPreviews field.
func (r *galleryResolver) TokenPreviews(ctx context.Context, obj *model.Gallery) ([]*model.PreviewURLSet, error) {
	panic(fmt.Errorf("not implemented: TokenPreviews - tokenPreviews"))
}

// Owner is the resolver for the owner field.
func (r *galleryResolver) Owner(ctx context.Context, obj *model.Gallery) (*model.GalleryUser, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// Collections is the resolver for the collections field.
func (r *galleryResolver) Collections(ctx context.Context, obj *model.Gallery) ([]*model.Collection, error) {
	panic(fmt.Errorf("not implemented: Collections - collections"))
}

// Roles is the resolver for the roles field.
func (r *galleryUserResolver) Roles(ctx context.Context, obj *model.GalleryUser) ([]*persist.Role, error) {
	panic(fmt.Errorf("not implemented: Roles - roles"))
}

// SocialAccounts is the resolver for the socialAccounts field.
func (r *galleryUserResolver) SocialAccounts(ctx context.Context, obj *model.GalleryUser) (*model.SocialAccounts, error) {
	panic(fmt.Errorf("not implemented: SocialAccounts - socialAccounts"))
}

// Tokens is the resolver for the tokens field.
func (r *galleryUserResolver) Tokens(ctx context.Context, obj *model.GalleryUser) ([]*model.Token, error) {
	panic(fmt.Errorf("not implemented: Tokens - tokens"))
}

// TokensByChain is the resolver for the tokensByChain field.
func (r *galleryUserResolver) TokensByChain(ctx context.Context, obj *model.GalleryUser, chain persist.Chain) (*model.ChainTokens, error) {
	panic(fmt.Errorf("not implemented: TokensByChain - tokensByChain"))
}

// Wallets is the resolver for the wallets field.
func (r *galleryUserResolver) Wallets(ctx context.Context, obj *model.GalleryUser) ([]*model.Wallet, error) {
	panic(fmt.Errorf("not implemented: Wallets - wallets"))
}

// PrimaryWallet is the resolver for the primaryWallet field.
func (r *galleryUserResolver) PrimaryWallet(ctx context.Context, obj *model.GalleryUser) (*model.Wallet, error) {
	panic(fmt.Errorf("not implemented: PrimaryWallet - primaryWallet"))
}

// FeaturedGallery is the resolver for the featuredGallery field.
func (r *galleryUserResolver) FeaturedGallery(ctx context.Context, obj *model.GalleryUser) (*model.Gallery, error) {
	panic(fmt.Errorf("not implemented: FeaturedGallery - featuredGallery"))
}

// Galleries is the resolver for the galleries field.
func (r *galleryUserResolver) Galleries(ctx context.Context, obj *model.GalleryUser) ([]*model.Gallery, error) {
	panic(fmt.Errorf("not implemented: Galleries - galleries"))
}

// Badges is the resolver for the badges field.
func (r *galleryUserResolver) Badges(ctx context.Context, obj *model.GalleryUser) ([]*model.Badge, error) {
	panic(fmt.Errorf("not implemented: Badges - badges"))
}

// Followers is the resolver for the followers field.
func (r *galleryUserResolver) Followers(ctx context.Context, obj *model.GalleryUser) ([]*model.GalleryUser, error) {
	panic(fmt.Errorf("not implemented: Followers - followers"))
}

// Following is the resolver for the following field.
func (r *galleryUserResolver) Following(ctx context.Context, obj *model.GalleryUser) ([]*model.GalleryUser, error) {
	panic(fmt.Errorf("not implemented: Following - following"))
}

// SharedFollowers is the resolver for the sharedFollowers field.
func (r *galleryUserResolver) SharedFollowers(ctx context.Context, obj *model.GalleryUser, before *string, after *string, first *int, last *int) (*model.UsersConnection, error) {
	panic(fmt.Errorf("not implemented: SharedFollowers - sharedFollowers"))
}

// SharedCommunities is the resolver for the sharedCommunities field.
func (r *galleryUserResolver) SharedCommunities(ctx context.Context, obj *model.GalleryUser, before *string, after *string, first *int, last *int) (*model.CommunitiesConnection, error) {
	panic(fmt.Errorf("not implemented: SharedCommunities - sharedCommunities"))
}

// AddUserWallet is the resolver for the addUserWallet field.
func (r *mutationResolver) AddUserWallet(ctx context.Context, chainAddress persist.ChainAddress, authMechanism model.AuthMechanism) (model.AddUserWalletPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: AddUserWallet - addUserWallet"))
}

// RemoveUserWallets is the resolver for the removeUserWallets field.
func (r *mutationResolver) RemoveUserWallets(ctx context.Context, walletIds []persist.DBID) (model.RemoveUserWalletsPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: RemoveUserWallets - removeUserWallets"))
}

// UpdateUserInfo is the resolver for the updateUserInfo field.
func (r *mutationResolver) UpdateUserInfo(ctx context.Context, input model.UpdateUserInfoInput) (model.UpdateUserInfoPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateUserInfo - updateUserInfo"))
}

// UpdateGalleryCollections is the resolver for the updateGalleryCollections field.
func (r *mutationResolver) UpdateGalleryCollections(ctx context.Context, input model.UpdateGalleryCollectionsInput) (model.UpdateGalleryCollectionsPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateGalleryCollections - updateGalleryCollections"))
}

// CreateCollection is the resolver for the createCollection field.
func (r *mutationResolver) CreateCollection(ctx context.Context, input model.CreateCollectionInput) (model.CreateCollectionPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: CreateCollection - createCollection"))
}

// DeleteCollection is the resolver for the deleteCollection field.
func (r *mutationResolver) DeleteCollection(ctx context.Context, collectionID persist.DBID) (model.DeleteCollectionPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: DeleteCollection - deleteCollection"))
}

// UpdateCollectionInfo is the resolver for the updateCollectionInfo field.
func (r *mutationResolver) UpdateCollectionInfo(ctx context.Context, input model.UpdateCollectionInfoInput) (model.UpdateCollectionInfoPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateCollectionInfo - updateCollectionInfo"))
}

// UpdateCollectionTokens is the resolver for the updateCollectionTokens field.
func (r *mutationResolver) UpdateCollectionTokens(ctx context.Context, input model.UpdateCollectionTokensInput) (model.UpdateCollectionTokensPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateCollectionTokens - updateCollectionTokens"))
}

// UpdateCollectionHidden is the resolver for the updateCollectionHidden field.
func (r *mutationResolver) UpdateCollectionHidden(ctx context.Context, input model.UpdateCollectionHiddenInput) (model.UpdateCollectionHiddenPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateCollectionHidden - updateCollectionHidden"))
}

// UpdateTokenInfo is the resolver for the updateTokenInfo field.
func (r *mutationResolver) UpdateTokenInfo(ctx context.Context, input model.UpdateTokenInfoInput) (model.UpdateTokenInfoPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateTokenInfo - updateTokenInfo"))
}

// SetSpamPreference is the resolver for the setSpamPreference field.
func (r *mutationResolver) SetSpamPreference(ctx context.Context, input model.SetSpamPreferenceInput) (model.SetSpamPreferencePayloadOrError, error) {
	panic(fmt.Errorf("not implemented: SetSpamPreference - setSpamPreference"))
}

// SyncTokens is the resolver for the syncTokens field.
func (r *mutationResolver) SyncTokens(ctx context.Context, chains []persist.Chain) (model.SyncTokensPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: SyncTokens - syncTokens"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, tokenID persist.DBID) (model.RefreshTokenPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// RefreshCollection is the resolver for the refreshCollection field.
func (r *mutationResolver) RefreshCollection(ctx context.Context, collectionID persist.DBID) (model.RefreshCollectionPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: RefreshCollection - refreshCollection"))
}

// RefreshContract is the resolver for the refreshContract field.
func (r *mutationResolver) RefreshContract(ctx context.Context, contractID persist.DBID) (model.RefreshContractPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: RefreshContract - refreshContract"))
}

// DeepRefresh is the resolver for the deepRefresh field.
func (r *mutationResolver) DeepRefresh(ctx context.Context, input model.DeepRefreshInput) (model.DeepRefreshPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: DeepRefresh - deepRefresh"))
}

// GetAuthNonce is the resolver for the getAuthNonce field.
func (r *mutationResolver) GetAuthNonce(ctx context.Context, chainAddress persist.ChainAddress) (model.GetAuthNoncePayloadOrError, error) {
	panic(fmt.Errorf("not implemented: GetAuthNonce - getAuthNonce"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, authMechanism model.AuthMechanism, input model.CreateUserInput) (model.CreateUserPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// UpdateEmail is the resolver for the updateEmail field.
func (r *mutationResolver) UpdateEmail(ctx context.Context, input model.UpdateEmailInput) (model.UpdateEmailPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateEmail - updateEmail"))
}

// ResendVerificationEmail is the resolver for the resendVerificationEmail field.
func (r *mutationResolver) ResendVerificationEmail(ctx context.Context) (model.ResendVerificationEmailPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: ResendVerificationEmail - resendVerificationEmail"))
}

// UpdateEmailNotificationSettings is the resolver for the updateEmailNotificationSettings field.
func (r *mutationResolver) UpdateEmailNotificationSettings(ctx context.Context, input model.UpdateEmailNotificationSettingsInput) (model.UpdateEmailNotificationSettingsPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateEmailNotificationSettings - updateEmailNotificationSettings"))
}

// UnsubscribeFromEmailType is the resolver for the unsubscribeFromEmailType field.
func (r *mutationResolver) UnsubscribeFromEmailType(ctx context.Context, input model.UnsubscribeFromEmailTypeInput) (model.UnsubscribeFromEmailTypePayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UnsubscribeFromEmailType - unsubscribeFromEmailType"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, authMechanism model.AuthMechanism) (model.LoginPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context) (*model.LogoutPayload, error) {
	panic(fmt.Errorf("not implemented: Logout - logout"))
}

// ConnectSocialAccount is the resolver for the connectSocialAccount field.
func (r *mutationResolver) ConnectSocialAccount(ctx context.Context, input model.SocialAuthMechanism, display bool) (model.ConnectSocialAccountPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: ConnectSocialAccount - connectSocialAccount"))
}

// DisconnectSocialAccount is the resolver for the disconnectSocialAccount field.
func (r *mutationResolver) DisconnectSocialAccount(ctx context.Context, accountType persist.SocialProvider) (model.DisconnectSocialAccountPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: DisconnectSocialAccount - disconnectSocialAccount"))
}

// UpdateSocialAccountDisplayed is the resolver for the updateSocialAccountDisplayed field.
func (r *mutationResolver) UpdateSocialAccountDisplayed(ctx context.Context, input model.UpdateSocialAccountDisplayedInput) (model.UpdateSocialAccountDisplayedPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateSocialAccountDisplayed - updateSocialAccountDisplayed"))
}

// FollowUser is the resolver for the followUser field.
func (r *mutationResolver) FollowUser(ctx context.Context, userID persist.DBID) (model.FollowUserPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: FollowUser - followUser"))
}

// FollowAllSocialConnections is the resolver for the followAllSocialConnections field.
func (r *mutationResolver) FollowAllSocialConnections(ctx context.Context, accountType persist.SocialProvider) (model.FollowAllSocialConnectionsPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: FollowAllSocialConnections - followAllSocialConnections"))
}

// UnfollowUser is the resolver for the unfollowUser field.
func (r *mutationResolver) UnfollowUser(ctx context.Context, userID persist.DBID) (model.UnfollowUserPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UnfollowUser - unfollowUser"))
}

// ViewGallery is the resolver for the viewGallery field.
func (r *mutationResolver) ViewGallery(ctx context.Context, galleryID persist.DBID) (model.ViewGalleryPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: ViewGallery - viewGallery"))
}

// UpdateGallery is the resolver for the updateGallery field.
func (r *mutationResolver) UpdateGallery(ctx context.Context, input model.UpdateGalleryInput) (model.UpdateGalleryPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateGallery - updateGallery"))
}

// PublishGallery is the resolver for the publishGallery field.
func (r *mutationResolver) PublishGallery(ctx context.Context, input model.PublishGalleryInput) (model.PublishGalleryPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: PublishGallery - publishGallery"))
}

// CreateGallery is the resolver for the createGallery field.
func (r *mutationResolver) CreateGallery(ctx context.Context, input model.CreateGalleryInput) (model.CreateGalleryPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: CreateGallery - createGallery"))
}

// UpdateGalleryHidden is the resolver for the updateGalleryHidden field.
func (r *mutationResolver) UpdateGalleryHidden(ctx context.Context, input model.UpdateGalleryHiddenInput) (model.UpdateGalleryHiddenPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateGalleryHidden - updateGalleryHidden"))
}

// DeleteGallery is the resolver for the deleteGallery field.
func (r *mutationResolver) DeleteGallery(ctx context.Context, galleryID persist.DBID) (model.DeleteGalleryPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: DeleteGallery - deleteGallery"))
}

// UpdateGalleryOrder is the resolver for the updateGalleryOrder field.
func (r *mutationResolver) UpdateGalleryOrder(ctx context.Context, input model.UpdateGalleryOrderInput) (model.UpdateGalleryOrderPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateGalleryOrder - updateGalleryOrder"))
}

// UpdateGalleryInfo is the resolver for the updateGalleryInfo field.
func (r *mutationResolver) UpdateGalleryInfo(ctx context.Context, input model.UpdateGalleryInfoInput) (model.UpdateGalleryInfoPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateGalleryInfo - updateGalleryInfo"))
}

// UpdateFeaturedGallery is the resolver for the updateFeaturedGallery field.
func (r *mutationResolver) UpdateFeaturedGallery(ctx context.Context, galleryID persist.DBID) (model.UpdateFeaturedGalleryPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateFeaturedGallery - updateFeaturedGallery"))
}

// ClearAllNotifications is the resolver for the clearAllNotifications field.
func (r *mutationResolver) ClearAllNotifications(ctx context.Context) (*model.ClearAllNotificationsPayload, error) {
	panic(fmt.Errorf("not implemented: ClearAllNotifications - clearAllNotifications"))
}

// UpdateNotificationSettings is the resolver for the updateNotificationSettings field.
func (r *mutationResolver) UpdateNotificationSettings(ctx context.Context, settings *model.NotificationSettingsInput) (*model.NotificationSettings, error) {
	panic(fmt.Errorf("not implemented: UpdateNotificationSettings - updateNotificationSettings"))
}

// PreverifyEmail is the resolver for the preverifyEmail field.
func (r *mutationResolver) PreverifyEmail(ctx context.Context, input model.PreverifyEmailInput) (model.PreverifyEmailPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: PreverifyEmail - preverifyEmail"))
}

// VerifyEmail is the resolver for the verifyEmail field.
func (r *mutationResolver) VerifyEmail(ctx context.Context, input model.VerifyEmailInput) (model.VerifyEmailPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: VerifyEmail - verifyEmail"))
}

// RedeemMerch is the resolver for the redeemMerch field.
func (r *mutationResolver) RedeemMerch(ctx context.Context, input model.RedeemMerchInput) (model.RedeemMerchPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: RedeemMerch - redeemMerch"))
}

// AddRolesToUser is the resolver for the addRolesToUser field.
func (r *mutationResolver) AddRolesToUser(ctx context.Context, username string, roles []*persist.Role) (model.AddRolesToUserPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: AddRolesToUser - addRolesToUser"))
}

// AddWalletToUserUnchecked is the resolver for the addWalletToUserUnchecked field.
func (r *mutationResolver) AddWalletToUserUnchecked(ctx context.Context, input model.AdminAddWalletInput) (model.AdminAddWalletPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: AddWalletToUserUnchecked - addWalletToUserUnchecked"))
}

// RevokeRolesFromUser is the resolver for the revokeRolesFromUser field.
func (r *mutationResolver) RevokeRolesFromUser(ctx context.Context, username string, roles []*persist.Role) (model.RevokeRolesFromUserPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: RevokeRolesFromUser - revokeRolesFromUser"))
}

// SyncTokensForUsername is the resolver for the syncTokensForUsername field.
func (r *mutationResolver) SyncTokensForUsername(ctx context.Context, username string, chains []persist.Chain) (model.SyncTokensForUsernamePayloadOrError, error) {
	panic(fmt.Errorf("not implemented: SyncTokensForUsername - syncTokensForUsername"))
}

// MintPremiumCardToWallet is the resolver for the mintPremiumCardToWallet field.
func (r *mutationResolver) MintPremiumCardToWallet(ctx context.Context, input model.MintPremiumCardToWalletInput) (model.MintPremiumCardToWalletPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: MintPremiumCardToWallet - mintPremiumCardToWallet"))
}

// UploadPersistedQueries is the resolver for the uploadPersistedQueries field.
func (r *mutationResolver) UploadPersistedQueries(ctx context.Context, input *model.UploadPersistedQueriesInput) (model.UploadPersistedQueriesPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UploadPersistedQueries - uploadPersistedQueries"))
}

// UpdatePrimaryWallet is the resolver for the updatePrimaryWallet field.
func (r *mutationResolver) UpdatePrimaryWallet(ctx context.Context, walletID persist.DBID) (model.UpdatePrimaryWalletPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdatePrimaryWallet - updatePrimaryWallet"))
}

// UpdateUserExperience is the resolver for the updateUserExperience field.
func (r *mutationResolver) UpdateUserExperience(ctx context.Context, input model.UpdateUserExperienceInput) (model.UpdateUserExperiencePayloadOrError, error) {
	panic(fmt.Errorf("not implemented: UpdateUserExperience - updateUserExperience"))
}

// MoveCollectionToGallery is the resolver for the moveCollectionToGallery field.
func (r *mutationResolver) MoveCollectionToGallery(ctx context.Context, input *model.MoveCollectionToGalleryInput) (model.MoveCollectionToGalleryPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: MoveCollectionToGallery - moveCollectionToGallery"))
}

// Owner is the resolver for the owner field.
func (r *ownerAtBlockResolver) Owner(ctx context.Context, obj *model.OwnerAtBlock) (model.GalleryUserOrAddress, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// Blurhash is the resolver for the blurhash field.
func (r *previewURLSetResolver) Blurhash(ctx context.Context, obj *model.PreviewURLSet) (*string, error) {
	panic(fmt.Errorf("not implemented: Blurhash - blurhash"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id model.GqlID) (model.Node, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Viewer is the resolver for the viewer field.
func (r *queryResolver) Viewer(ctx context.Context) (model.ViewerOrError, error) {
	panic(fmt.Errorf("not implemented: Viewer - viewer"))
}

// UserByUsername is the resolver for the userByUsername field.
func (r *queryResolver) UserByUsername(ctx context.Context, username string) (model.UserByUsernameOrError, error) {
	panic(fmt.Errorf("not implemented: UserByUsername - userByUsername"))
}

// UserByID is the resolver for the userById field.
func (r *queryResolver) UserByID(ctx context.Context, id persist.DBID) (model.UserByIDOrError, error) {
	panic(fmt.Errorf("not implemented: UserByID - userById"))
}

// UserByAddress is the resolver for the userByAddress field.
func (r *queryResolver) UserByAddress(ctx context.Context, chainAddress persist.ChainAddress) (model.UserByAddressOrError, error) {
	panic(fmt.Errorf("not implemented: UserByAddress - userByAddress"))
}

// UsersWithTrait is the resolver for the usersWithTrait field.
func (r *queryResolver) UsersWithTrait(ctx context.Context, trait string) ([]*model.GalleryUser, error) {
	panic(fmt.Errorf("not implemented: UsersWithTrait - usersWithTrait"))
}

// MembershipTiers is the resolver for the membershipTiers field.
func (r *queryResolver) MembershipTiers(ctx context.Context, forceRefresh *bool) ([]*model.MembershipTier, error) {
	panic(fmt.Errorf("not implemented: MembershipTiers - membershipTiers"))
}

// CollectionByID is the resolver for the collectionById field.
func (r *queryResolver) CollectionByID(ctx context.Context, id persist.DBID) (model.CollectionByIDOrError, error) {
	panic(fmt.Errorf("not implemented: CollectionByID - collectionById"))
}

// CollectionsByIds is the resolver for the collectionsByIds field.
func (r *queryResolver) CollectionsByIds(ctx context.Context, ids []persist.DBID) ([]model.CollectionByIDOrError, error) {
	panic(fmt.Errorf("not implemented: CollectionsByIds - collectionsByIds"))
}

// TokenByID is the resolver for the tokenById field.
func (r *queryResolver) TokenByID(ctx context.Context, id persist.DBID) (model.TokenByIDOrError, error) {
	panic(fmt.Errorf("not implemented: TokenByID - tokenById"))
}

// CollectionTokenByID is the resolver for the collectionTokenById field.
func (r *queryResolver) CollectionTokenByID(ctx context.Context, tokenID persist.DBID, collectionID persist.DBID) (model.CollectionTokenByIDOrError, error) {
	panic(fmt.Errorf("not implemented: CollectionTokenByID - collectionTokenById"))
}

// CommunityByAddress is the resolver for the communityByAddress field.
func (r *queryResolver) CommunityByAddress(ctx context.Context, communityAddress persist.ChainAddress, forceRefresh *bool) (model.CommunityByAddressOrError, error) {
	panic(fmt.Errorf("not implemented: CommunityByAddress - communityByAddress"))
}

// GeneralAllowlist is the resolver for the generalAllowlist field.
func (r *queryResolver) GeneralAllowlist(ctx context.Context) ([]*persist.ChainAddress, error) {
	panic(fmt.Errorf("not implemented: GeneralAllowlist - generalAllowlist"))
}

// GalleryOfTheWeekWinners is the resolver for the galleryOfTheWeekWinners field.
func (r *queryResolver) GalleryOfTheWeekWinners(ctx context.Context) ([]*model.GalleryUser, error) {
	panic(fmt.Errorf("not implemented: GalleryOfTheWeekWinners - galleryOfTheWeekWinners"))
}

// GetMerchTokens is the resolver for the getMerchTokens field.
func (r *queryResolver) GetMerchTokens(ctx context.Context, wallet persist.Address) (model.MerchTokensPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: GetMerchTokens - getMerchTokens"))
}

// GalleryByID is the resolver for the galleryById field.
func (r *queryResolver) GalleryByID(ctx context.Context, id persist.DBID) (model.GalleryByIDPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: GalleryByID - galleryById"))
}

// ViewerGalleryByID is the resolver for the viewerGalleryById field.
func (r *queryResolver) ViewerGalleryByID(ctx context.Context, id persist.DBID) (model.ViewerGalleryByIDPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: ViewerGalleryByID - viewerGalleryById"))
}

// TrendingUsers is the resolver for the trendingUsers field.
func (r *queryResolver) TrendingUsers(ctx context.Context, input model.TrendingUsersInput) (model.TrendingUsersPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: TrendingUsers - trendingUsers"))
}

// SearchUsers is the resolver for the searchUsers field.
func (r *queryResolver) SearchUsers(ctx context.Context, query string, limit *int, usernameWeight *float64, bioWeight *float64) (model.SearchUsersPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: SearchUsers - searchUsers"))
}

// SearchGalleries is the resolver for the searchGalleries field.
func (r *queryResolver) SearchGalleries(ctx context.Context, query string, limit *int, nameWeight *float64, descriptionWeight *float64) (model.SearchGalleriesPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: SearchGalleries - searchGalleries"))
}

// SearchCommunities is the resolver for the searchCommunities field.
func (r *queryResolver) SearchCommunities(ctx context.Context, query string, limit *int, nameWeight *float64, descriptionWeight *float64, poapAddressWeight *float64) (model.SearchCommunitiesPayloadOrError, error) {
	panic(fmt.Errorf("not implemented: SearchCommunities - searchCommunities"))
}

// UsersByRole is the resolver for the usersByRole field.
func (r *queryResolver) UsersByRole(ctx context.Context, role persist.Role, before *string, after *string, first *int, last *int) (*model.UsersConnection, error) {
	panic(fmt.Errorf("not implemented: UsersByRole - usersByRole"))
}

// SocialConnections is the resolver for the socialConnections field.
func (r *queryResolver) SocialConnections(ctx context.Context, socialAccountType persist.SocialProvider, excludeAlreadyFollowing *bool, before *string, after *string, first *int, last *int) (*model.SocialConnectionsConnection, error) {
	panic(fmt.Errorf("not implemented: SocialConnections - socialConnections"))
}

// SocialQueries is the resolver for the socialQueries field.
func (r *queryResolver) SocialQueries(ctx context.Context) (model.SocialQueriesOrError, error) {
	panic(fmt.Errorf("not implemented: SocialQueries - socialQueries"))
}

// Tokens is the resolver for the tokens field.
func (r *setSpamPreferencePayloadResolver) Tokens(ctx context.Context, obj *model.SetSpamPreferencePayload) ([]*model.Token, error) {
	panic(fmt.Errorf("not implemented: Tokens - tokens"))
}

// GalleryUser is the resolver for the galleryUser field.
func (r *socialConnectionResolver) GalleryUser(ctx context.Context, obj *model.SocialConnection) (*model.GalleryUser, error) {
	panic(fmt.Errorf("not implemented: GalleryUser - galleryUser"))
}

// SocialConnections is the resolver for the socialConnections field.
func (r *socialQueriesResolver) SocialConnections(ctx context.Context, obj *model.SocialQueries, socialAccountType persist.SocialProvider, excludeAlreadyFollowing *bool, before *string, after *string, first *int, last *int) (*model.SocialConnectionsConnection, error) {
	panic(fmt.Errorf("not implemented: SocialConnections - socialConnections"))
}

// Followers is the resolver for the followers field.
func (r *someoneFollowedYouBackNotificationResolver) Followers(ctx context.Context, obj *model.SomeoneFollowedYouBackNotification, before *string, after *string, first *int, last *int) (*model.GroupNotificationUsersConnection, error) {
	panic(fmt.Errorf("not implemented: Followers - followers"))
}

// Followers is the resolver for the followers field.
func (r *someoneFollowedYouNotificationResolver) Followers(ctx context.Context, obj *model.SomeoneFollowedYouNotification, before *string, after *string, first *int, last *int) (*model.GroupNotificationUsersConnection, error) {
	panic(fmt.Errorf("not implemented: Followers - followers"))
}

// UserViewers is the resolver for the userViewers field.
func (r *someoneViewedYourGalleryNotificationResolver) UserViewers(ctx context.Context, obj *model.SomeoneViewedYourGalleryNotification, before *string, after *string, first *int, last *int) (*model.GroupNotificationUsersConnection, error) {
	panic(fmt.Errorf("not implemented: UserViewers - userViewers"))
}

// Gallery is the resolver for the gallery field.
func (r *someoneViewedYourGalleryNotificationResolver) Gallery(ctx context.Context, obj *model.SomeoneViewedYourGalleryNotification) (*model.Gallery, error) {
	panic(fmt.Errorf("not implemented: Gallery - gallery"))
}

// NewNotification is the resolver for the newNotification field.
func (r *subscriptionResolver) NewNotification(ctx context.Context) (<-chan model.Notification, error) {
	panic(fmt.Errorf("not implemented: NewNotification - newNotification"))
}

// NotificationUpdated is the resolver for the notificationUpdated field.
func (r *subscriptionResolver) NotificationUpdated(ctx context.Context) (<-chan model.Notification, error) {
	panic(fmt.Errorf("not implemented: NotificationUpdated - notificationUpdated"))
}

// Owner is the resolver for the owner field.
func (r *tokenResolver) Owner(ctx context.Context, obj *model.Token) (*model.GalleryUser, error) {
	panic(fmt.Errorf("not implemented: Owner - owner"))
}

// OwnedByWallets is the resolver for the ownedByWallets field.
func (r *tokenResolver) OwnedByWallets(ctx context.Context, obj *model.Token) ([]*model.Wallet, error) {
	panic(fmt.Errorf("not implemented: OwnedByWallets - ownedByWallets"))
}

// Contract is the resolver for the contract field.
func (r *tokenResolver) Contract(ctx context.Context, obj *model.Token) (*model.Contract, error) {
	panic(fmt.Errorf("not implemented: Contract - contract"))
}

// Wallets is the resolver for the wallets field.
func (r *tokenHolderResolver) Wallets(ctx context.Context, obj *model.TokenHolder) ([]*model.Wallet, error) {
	panic(fmt.Errorf("not implemented: Wallets - wallets"))
}

// User is the resolver for the user field.
func (r *tokenHolderResolver) User(ctx context.Context, obj *model.TokenHolder) (*model.GalleryUser, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// User is the resolver for the user field.
func (r *unfollowUserPayloadResolver) User(ctx context.Context, obj *model.UnfollowUserPayload) (*model.GalleryUser, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// User is the resolver for the user field.
func (r *viewerResolver) User(ctx context.Context, obj *model.Viewer) (*model.GalleryUser, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// SocialAccounts is the resolver for the socialAccounts field.
func (r *viewerResolver) SocialAccounts(ctx context.Context, obj *model.Viewer) (*model.SocialAccounts, error) {
	panic(fmt.Errorf("not implemented: SocialAccounts - socialAccounts"))
}

// ViewerGalleries is the resolver for the viewerGalleries field.
func (r *viewerResolver) ViewerGalleries(ctx context.Context, obj *model.Viewer) ([]*model.ViewerGallery, error) {
	panic(fmt.Errorf("not implemented: ViewerGalleries - viewerGalleries"))
}

// Email is the resolver for the email field.
func (r *viewerResolver) Email(ctx context.Context, obj *model.Viewer) (*model.UserEmail, error) {
	panic(fmt.Errorf("not implemented: Email - email"))
}

// Notifications is the resolver for the notifications field.
func (r *viewerResolver) Notifications(ctx context.Context, obj *model.Viewer, before *string, after *string, first *int, last *int) (*model.NotificationsConnection, error) {
	panic(fmt.Errorf("not implemented: Notifications - notifications"))
}

// NotificationSettings is the resolver for the notificationSettings field.
func (r *viewerResolver) NotificationSettings(ctx context.Context, obj *model.Viewer) (*model.NotificationSettings, error) {
	panic(fmt.Errorf("not implemented: NotificationSettings - notificationSettings"))
}

// UserExperiences is the resolver for the userExperiences field.
func (r *viewerResolver) UserExperiences(ctx context.Context, obj *model.Viewer) ([]*model.UserExperience, error) {
	panic(fmt.Errorf("not implemented: UserExperiences - userExperiences"))
}

// Tokens is the resolver for the tokens field.
func (r *walletResolver) Tokens(ctx context.Context, obj *model.Wallet) ([]*model.Token, error) {
	panic(fmt.Errorf("not implemented: Tokens - tokens"))
}

// Address is the resolver for the address field.
func (r *chainAddressInputResolver) Address(ctx context.Context, obj *persist.ChainAddress, data persist.Address) error {
	panic(fmt.Errorf("not implemented: Address - address"))
}

// Chain is the resolver for the chain field.
func (r *chainAddressInputResolver) Chain(ctx context.Context, obj *persist.ChainAddress, data persist.Chain) error {
	panic(fmt.Errorf("not implemented: Chain - chain"))
}

// PubKey is the resolver for the pubKey field.
func (r *chainPubKeyInputResolver) PubKey(ctx context.Context, obj *persist.ChainPubKey, data persist.PubKey) error {
	panic(fmt.Errorf("not implemented: PubKey - pubKey"))
}

// Chain is the resolver for the chain field.
func (r *chainPubKeyInputResolver) Chain(ctx context.Context, obj *persist.ChainPubKey, data persist.Chain) error {
	panic(fmt.Errorf("not implemented: Chain - chain"))
}

// Collection returns generated.CollectionResolver implementation.
func (r *Resolver) Collection() generated.CollectionResolver { return &collectionResolver{r} }

// CollectionToken returns generated.CollectionTokenResolver implementation.
func (r *Resolver) CollectionToken() generated.CollectionTokenResolver {
	return &collectionTokenResolver{r}
}

// Community returns generated.CommunityResolver implementation.
func (r *Resolver) Community() generated.CommunityResolver { return &communityResolver{r} }

// FollowInfo returns generated.FollowInfoResolver implementation.
func (r *Resolver) FollowInfo() generated.FollowInfoResolver { return &followInfoResolver{r} }

// FollowUserPayload returns generated.FollowUserPayloadResolver implementation.
func (r *Resolver) FollowUserPayload() generated.FollowUserPayloadResolver {
	return &followUserPayloadResolver{r}
}

// Gallery returns generated.GalleryResolver implementation.
func (r *Resolver) Gallery() generated.GalleryResolver { return &galleryResolver{r} }

// GalleryUser returns generated.GalleryUserResolver implementation.
func (r *Resolver) GalleryUser() generated.GalleryUserResolver { return &galleryUserResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// OwnerAtBlock returns generated.OwnerAtBlockResolver implementation.
func (r *Resolver) OwnerAtBlock() generated.OwnerAtBlockResolver { return &ownerAtBlockResolver{r} }

// PreviewURLSet returns generated.PreviewURLSetResolver implementation.
func (r *Resolver) PreviewURLSet() generated.PreviewURLSetResolver { return &previewURLSetResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// SetSpamPreferencePayload returns generated.SetSpamPreferencePayloadResolver implementation.
func (r *Resolver) SetSpamPreferencePayload() generated.SetSpamPreferencePayloadResolver {
	return &setSpamPreferencePayloadResolver{r}
}

// SocialConnection returns generated.SocialConnectionResolver implementation.
func (r *Resolver) SocialConnection() generated.SocialConnectionResolver {
	return &socialConnectionResolver{r}
}

// SocialQueries returns generated.SocialQueriesResolver implementation.
func (r *Resolver) SocialQueries() generated.SocialQueriesResolver { return &socialQueriesResolver{r} }

// SomeoneFollowedYouBackNotification returns generated.SomeoneFollowedYouBackNotificationResolver implementation.
func (r *Resolver) SomeoneFollowedYouBackNotification() generated.SomeoneFollowedYouBackNotificationResolver {
	return &someoneFollowedYouBackNotificationResolver{r}
}

// SomeoneFollowedYouNotification returns generated.SomeoneFollowedYouNotificationResolver implementation.
func (r *Resolver) SomeoneFollowedYouNotification() generated.SomeoneFollowedYouNotificationResolver {
	return &someoneFollowedYouNotificationResolver{r}
}

// SomeoneViewedYourGalleryNotification returns generated.SomeoneViewedYourGalleryNotificationResolver implementation.
func (r *Resolver) SomeoneViewedYourGalleryNotification() generated.SomeoneViewedYourGalleryNotificationResolver {
	return &someoneViewedYourGalleryNotificationResolver{r}
}

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

// Token returns generated.TokenResolver implementation.
func (r *Resolver) Token() generated.TokenResolver { return &tokenResolver{r} }

// TokenHolder returns generated.TokenHolderResolver implementation.
func (r *Resolver) TokenHolder() generated.TokenHolderResolver { return &tokenHolderResolver{r} }

// UnfollowUserPayload returns generated.UnfollowUserPayloadResolver implementation.
func (r *Resolver) UnfollowUserPayload() generated.UnfollowUserPayloadResolver {
	return &unfollowUserPayloadResolver{r}
}

// Viewer returns generated.ViewerResolver implementation.
func (r *Resolver) Viewer() generated.ViewerResolver { return &viewerResolver{r} }

// Wallet returns generated.WalletResolver implementation.
func (r *Resolver) Wallet() generated.WalletResolver { return &walletResolver{r} }

// ChainAddressInput returns generated.ChainAddressInputResolver implementation.
func (r *Resolver) ChainAddressInput() generated.ChainAddressInputResolver {
	return &chainAddressInputResolver{r}
}

// ChainPubKeyInput returns generated.ChainPubKeyInputResolver implementation.
func (r *Resolver) ChainPubKeyInput() generated.ChainPubKeyInputResolver {
	return &chainPubKeyInputResolver{r}
}

type collectionResolver struct{ *Resolver }
type collectionTokenResolver struct{ *Resolver }
type communityResolver struct{ *Resolver }
type followInfoResolver struct{ *Resolver }
type followUserPayloadResolver struct{ *Resolver }
type galleryResolver struct{ *Resolver }
type galleryUserResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type ownerAtBlockResolver struct{ *Resolver }
type previewURLSetResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type setSpamPreferencePayloadResolver struct{ *Resolver }
type socialConnectionResolver struct{ *Resolver }
type socialQueriesResolver struct{ *Resolver }
type someoneFollowedYouBackNotificationResolver struct{ *Resolver }
type someoneFollowedYouNotificationResolver struct{ *Resolver }
type someoneViewedYourGalleryNotificationResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type tokenResolver struct{ *Resolver }
type tokenHolderResolver struct{ *Resolver }
type unfollowUserPayloadResolver struct{ *Resolver }
type viewerResolver struct{ *Resolver }
type walletResolver struct{ *Resolver }
type chainAddressInputResolver struct{ *Resolver }
type chainPubKeyInputResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *collectionResolver) ID(ctx context.Context, obj *model.Collection) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *collectionTokenResolver) ID(ctx context.Context, obj *model.CollectionToken) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *communityResolver) ID(ctx context.Context, obj *model.Community) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *contractResolver) ID(ctx context.Context, obj *model.Contract) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *deletedNodeResolver) ID(ctx context.Context, obj *model.DeletedNode) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *galleryResolver) ID(ctx context.Context, obj *model.Gallery) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *galleryUserResolver) ID(ctx context.Context, obj *model.GalleryUser) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *membershipTierResolver) ID(ctx context.Context, obj *model.MembershipTier) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *merchTokenResolver) ID(ctx context.Context, obj *model.MerchToken) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *socialConnectionResolver) ID(ctx context.Context, obj *model.SocialConnection) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *someoneFollowedYouBackNotificationResolver) ID(ctx context.Context, obj *model.SomeoneFollowedYouBackNotification) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *someoneFollowedYouNotificationResolver) ID(ctx context.Context, obj *model.SomeoneFollowedYouNotification) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *someoneViewedYourGalleryNotificationResolver) ID(ctx context.Context, obj *model.SomeoneViewedYourGalleryNotification) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *tokenResolver) ID(ctx context.Context, obj *model.Token) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *viewerResolver) ID(ctx context.Context, obj *model.Viewer) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *walletResolver) ID(ctx context.Context, obj *model.Wallet) (model.GqlID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}
func (r *Resolver) Contract() generated.ContractResolver       { return &contractResolver{r} }
func (r *Resolver) DeletedNode() generated.DeletedNodeResolver { return &deletedNodeResolver{r} }
func (r *Resolver) MembershipTier() generated.MembershipTierResolver {
	return &membershipTierResolver{r}
}
func (r *Resolver) MerchToken() generated.MerchTokenResolver { return &merchTokenResolver{r} }

type contractResolver struct{ *Resolver }
type deletedNodeResolver struct{ *Resolver }
type membershipTierResolver struct{ *Resolver }
type merchTokenResolver struct{ *Resolver }
