// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/SplitFi/go-splitfi/service/persist"
)

type AddRolesToUserPayloadOrError interface {
	IsAddRolesToUserPayloadOrError()
}

type AddUserWalletPayloadOrError interface {
	IsAddUserWalletPayloadOrError()
}

type AdminAddWalletPayloadOrError interface {
	IsAdminAddWalletPayloadOrError()
}

type AuthorizationError interface {
	IsAuthorizationError()
}

type CreateSplitPayloadOrError interface {
	IsCreateSplitPayloadOrError()
}

type CreateUserPayloadOrError interface {
	IsCreateUserPayloadOrError()
}

type DeepRefreshPayloadOrError interface {
	IsDeepRefreshPayloadOrError()
}

type DeleteSplitPayloadOrError interface {
	IsDeleteSplitPayloadOrError()
}

type Error interface {
	IsError()
}

type GetAuthNoncePayloadOrError interface {
	IsGetAuthNoncePayloadOrError()
}

type GroupedNotification interface {
	Notification
	Node
	IsGroupedNotification()
}

type LoginPayloadOrError interface {
	IsLoginPayloadOrError()
}

type Media interface {
	IsMedia()
}

type MediaSubtype interface {
	IsMediaSubtype()
}

type Node interface {
	IsNode()
}

type Notification interface {
	Node
	IsNotification()
}

type OptInForRolesPayloadOrError interface {
	IsOptInForRolesPayloadOrError()
}

type OptOutForRolesPayloadOrError interface {
	IsOptOutForRolesPayloadOrError()
}

type PreverifyEmailPayloadOrError interface {
	IsPreverifyEmailPayloadOrError()
}

type PublishSplitPayloadOrError interface {
	IsPublishSplitPayloadOrError()
}

type RefreshTokenPayloadOrError interface {
	IsRefreshTokenPayloadOrError()
}

type RegisterUserPushTokenPayloadOrError interface {
	IsRegisterUserPushTokenPayloadOrError()
}

type RemoveUserWalletsPayloadOrError interface {
	IsRemoveUserWalletsPayloadOrError()
}

type ResendVerificationEmailPayloadOrError interface {
	IsResendVerificationEmailPayloadOrError()
}

type RevokeRolesFromUserPayloadOrError interface {
	IsRevokeRolesFromUserPayloadOrError()
}

type SearchSplitsPayloadOrError interface {
	IsSearchSplitsPayloadOrError()
}

type SearchUsersPayloadOrError interface {
	IsSearchUsersPayloadOrError()
}

type SetSpamPreferencePayloadOrError interface {
	IsSetSpamPreferencePayloadOrError()
}

type SplitByIDPayloadOrError interface {
	IsSplitByIDPayloadOrError()
}

type SplitFiUserOrAddress interface {
	IsSplitFiUserOrAddress()
}

type SplitFiUserOrWallet interface {
	IsSplitFiUserOrWallet()
}

type TokenByIDOrError interface {
	IsTokenByIDOrError()
}

type UnregisterUserPushTokenPayloadOrError interface {
	IsUnregisterUserPushTokenPayloadOrError()
}

type UnsubscribeFromEmailTypePayloadOrError interface {
	IsUnsubscribeFromEmailTypePayloadOrError()
}

type UpdateEmailNotificationSettingsPayloadOrError interface {
	IsUpdateEmailNotificationSettingsPayloadOrError()
}

type UpdateEmailPayloadOrError interface {
	IsUpdateEmailPayloadOrError()
}

type UpdatePrimaryWalletPayloadOrError interface {
	IsUpdatePrimaryWalletPayloadOrError()
}

type UpdateSplitHiddenPayloadOrError interface {
	IsUpdateSplitHiddenPayloadOrError()
}

type UpdateSplitInfoPayloadOrError interface {
	IsUpdateSplitInfoPayloadOrError()
}

type UpdateSplitOrderPayloadOrError interface {
	IsUpdateSplitOrderPayloadOrError()
}

type UpdateSplitPayloadOrError interface {
	IsUpdateSplitPayloadOrError()
}

type UpdateUserExperiencePayloadOrError interface {
	IsUpdateUserExperiencePayloadOrError()
}

type UpdateUserInfoPayloadOrError interface {
	IsUpdateUserInfoPayloadOrError()
}

type UploadPersistedQueriesPayloadOrError interface {
	IsUploadPersistedQueriesPayloadOrError()
}

type UserByAddressOrError interface {
	IsUserByAddressOrError()
}

type UserByIDOrError interface {
	IsUserByIDOrError()
}

type UserByUsernameOrError interface {
	IsUserByUsernameOrError()
}

type VerifyEmailMagicLinkPayloadOrError interface {
	IsVerifyEmailMagicLinkPayloadOrError()
}

type VerifyEmailPayloadOrError interface {
	IsVerifyEmailPayloadOrError()
}

type ViewSplitPayloadOrError interface {
	IsViewSplitPayloadOrError()
}

type ViewerOrError interface {
	IsViewerOrError()
}

type ViewerSplitByIDPayloadOrError interface {
	IsViewerSplitByIDPayloadOrError()
}

type AddUserWalletPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (AddUserWalletPayload) IsAddUserWalletPayloadOrError() {}

type AdminAddWalletInput struct {
	Username     string                `json:"username"`
	ChainAddress *persist.ChainAddress `json:"chainAddress"`
	WalletType   persist.WalletType    `json:"walletType"`
}

type AdminAddWalletPayload struct {
	User *SplitFiUser `json:"user"`
}

func (AdminAddWalletPayload) IsAdminAddWalletPayloadOrError() {}

type Asset struct {
	Dbid         persist.DBID          `json:"dbid"`
	Version      *int                  `json:"version"`
	OwnerAddress *persist.ChainAddress `json:"ownerAddress"`
	Balance      *int                  `json:"balance"`
	Token        *Token                `json:"token"`
}

func (Asset) IsNode() {}

type AudioMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (AudioMedia) IsMediaSubtype() {}
func (AudioMedia) IsMedia()        {}

type AuthMechanism struct {
	Eoa               *EoaAuth               `json:"eoa"`
	GnosisSafe        *GnosisSafeAuth        `json:"gnosisSafe"`
	Debug             *DebugAuth             `json:"debug"`
	MagicLink         *MagicLinkAuth         `json:"magicLink"`
	OneTimeLoginToken *OneTimeLoginTokenAuth `json:"oneTimeLoginToken"`
	Privy             *PrivyAuth             `json:"privy"`
}

type AuthNonce struct {
	Nonce   *string `json:"nonce"`
	Message *string `json:"message"`
}

func (AuthNonce) IsGetAuthNoncePayloadOrError() {}

type ChainSplits struct {
	Chain  *persist.Chain `json:"chain"`
	Splits []*Split       `json:"splits"`
}

type ChainTokens struct {
	Chain  *persist.Chain `json:"chain"`
	Tokens []*Token       `json:"tokens"`
}

type ClearAllNotificationsPayload struct {
	Notifications []Notification `json:"notifications"`
}

type CreateSplitInput struct {
	Name        *string `json:"name"`
	Description *string `json:"description"`
	Logo        *string `json:"logo"`
}

type CreateSplitPayload struct {
	Split *Split `json:"split"`
}

func (CreateSplitPayload) IsCreateSplitPayloadOrError() {}

type CreateUserInput struct {
	Username         string         `json:"username"`
	Bio              *string        `json:"bio"`
	Email            *persist.Email `json:"email"`
	SplitName        *string        `json:"splitName"`
	SplitDescription *string        `json:"splitDescription"`
	SplitPosition    *string        `json:"splitPosition"`
}

type CreateUserPayload struct {
	UserID  *persist.DBID `json:"userId"`
	SplitID *persist.DBID `json:"splitId"`
	Viewer  *Viewer       `json:"viewer"`
}

func (CreateUserPayload) IsCreateUserPayloadOrError() {}

type DebugAuth struct {
	AsUsername         *string                 `json:"asUsername"`
	UserID             *persist.DBID           `json:"userId"`
	ChainAddresses     []*persist.ChainAddress `json:"chainAddresses"`
	DebugToolsPassword *string                 `json:"debugToolsPassword"`
}

type DeepRefreshInput struct {
	Chain persist.Chain `json:"chain"`
}

type DeepRefreshPayload struct {
	Chain     *persist.Chain `json:"chain"`
	Submitted *bool          `json:"submitted"`
}

func (DeepRefreshPayload) IsDeepRefreshPayloadOrError() {}

type DeleteSplitPayload struct {
	DeletedID *DeletedNode `json:"deletedId"`
}

func (DeleteSplitPayload) IsDeleteSplitPayloadOrError() {}

type DeletedNode struct {
	Dbid persist.DBID `json:"dbid"`
}

func (DeletedNode) IsNode() {}

type EmailNotificationSettings struct {
	UnsubscribedFromAll           bool `json:"unsubscribedFromAll"`
	UnsubscribedFromNotifications bool `json:"unsubscribedFromNotifications"`
}

type EoaAuth struct {
	ChainPubKey *persist.ChainPubKey `json:"chainPubKey"`
	Nonce       string               `json:"nonce"`
	Message     string               `json:"message"`
	Signature   string               `json:"signature"`
}

type ErrAddressOwnedByUser struct {
	Message string `json:"message"`
}

func (ErrAddressOwnedByUser) IsAddUserWalletPayloadOrError()  {}
func (ErrAddressOwnedByUser) IsError()                        {}
func (ErrAddressOwnedByUser) IsAdminAddWalletPayloadOrError() {}

type ErrAuthenticationFailed struct {
	Message string `json:"message"`
}

func (ErrAuthenticationFailed) IsAddUserWalletPayloadOrError() {}
func (ErrAuthenticationFailed) IsError()                       {}
func (ErrAuthenticationFailed) IsLoginPayloadOrError()         {}
func (ErrAuthenticationFailed) IsCreateUserPayloadOrError()    {}
func (ErrAuthenticationFailed) IsViewSplitPayloadOrError()     {}

type ErrCollectionNotFound struct {
	Message string `json:"message"`
}

func (ErrCollectionNotFound) IsError() {}

type ErrCommunityNotFound struct {
	Message string `json:"message"`
}

func (ErrCommunityNotFound) IsError() {}

type ErrDoesNotOwnRequiredToken struct {
	Message string `json:"message"`
}

func (ErrDoesNotOwnRequiredToken) IsAuthorizationError()       {}
func (ErrDoesNotOwnRequiredToken) IsError()                    {}
func (ErrDoesNotOwnRequiredToken) IsLoginPayloadOrError()      {}
func (ErrDoesNotOwnRequiredToken) IsCreateUserPayloadOrError() {}

type ErrInvalidInput struct {
	Message    string   `json:"message"`
	Parameters []string `json:"parameters"`
	Reasons    []string `json:"reasons"`
}

func (ErrInvalidInput) IsUserByUsernameOrError()                         {}
func (ErrInvalidInput) IsUserByIDOrError()                               {}
func (ErrInvalidInput) IsUserByAddressOrError()                          {}
func (ErrInvalidInput) IsSearchUsersPayloadOrError()                     {}
func (ErrInvalidInput) IsSearchSplitsPayloadOrError()                    {}
func (ErrInvalidInput) IsAddUserWalletPayloadOrError()                   {}
func (ErrInvalidInput) IsRemoveUserWalletsPayloadOrError()               {}
func (ErrInvalidInput) IsUpdateUserInfoPayloadOrError()                  {}
func (ErrInvalidInput) IsRegisterUserPushTokenPayloadOrError()           {}
func (ErrInvalidInput) IsUnregisterUserPushTokenPayloadOrError()         {}
func (ErrInvalidInput) IsRefreshTokenPayloadOrError()                    {}
func (ErrInvalidInput) IsError()                                         {}
func (ErrInvalidInput) IsCreateUserPayloadOrError()                      {}
func (ErrInvalidInput) IsVerifyEmailPayloadOrError()                     {}
func (ErrInvalidInput) IsPreverifyEmailPayloadOrError()                  {}
func (ErrInvalidInput) IsVerifyEmailMagicLinkPayloadOrError()            {}
func (ErrInvalidInput) IsUpdateEmailPayloadOrError()                     {}
func (ErrInvalidInput) IsResendVerificationEmailPayloadOrError()         {}
func (ErrInvalidInput) IsUpdateEmailNotificationSettingsPayloadOrError() {}
func (ErrInvalidInput) IsUnsubscribeFromEmailTypePayloadOrError()        {}
func (ErrInvalidInput) IsOptInForRolesPayloadOrError()                   {}
func (ErrInvalidInput) IsOptOutForRolesPayloadOrError()                  {}
func (ErrInvalidInput) IsCreateSplitPayloadOrError()                     {}
func (ErrInvalidInput) IsUpdateSplitInfoPayloadOrError()                 {}
func (ErrInvalidInput) IsUpdateSplitHiddenPayloadOrError()               {}
func (ErrInvalidInput) IsDeleteSplitPayloadOrError()                     {}
func (ErrInvalidInput) IsUpdateSplitOrderPayloadOrError()                {}
func (ErrInvalidInput) IsUpdateSplitPayloadOrError()                     {}
func (ErrInvalidInput) IsPublishSplitPayloadOrError()                    {}
func (ErrInvalidInput) IsUpdatePrimaryWalletPayloadOrError()             {}
func (ErrInvalidInput) IsUpdateUserExperiencePayloadOrError()            {}

type ErrInvalidToken struct {
	Message string `json:"message"`
}

func (ErrInvalidToken) IsAuthorizationError() {}
func (ErrInvalidToken) IsError()              {}

type ErrNoCookie struct {
	Message string `json:"message"`
}

func (ErrNoCookie) IsAuthorizationError() {}
func (ErrNoCookie) IsError()              {}

type ErrNotAuthorized struct {
	Message string             `json:"message"`
	Cause   AuthorizationError `json:"cause"`
}

func (ErrNotAuthorized) IsViewerOrError()                         {}
func (ErrNotAuthorized) IsSetSpamPreferencePayloadOrError()       {}
func (ErrNotAuthorized) IsAddUserWalletPayloadOrError()           {}
func (ErrNotAuthorized) IsRemoveUserWalletsPayloadOrError()       {}
func (ErrNotAuthorized) IsUpdateUserInfoPayloadOrError()          {}
func (ErrNotAuthorized) IsRegisterUserPushTokenPayloadOrError()   {}
func (ErrNotAuthorized) IsUnregisterUserPushTokenPayloadOrError() {}
func (ErrNotAuthorized) IsError()                                 {}
func (ErrNotAuthorized) IsDeepRefreshPayloadOrError()             {}
func (ErrNotAuthorized) IsAddRolesToUserPayloadOrError()          {}
func (ErrNotAuthorized) IsRevokeRolesFromUserPayloadOrError()     {}
func (ErrNotAuthorized) IsOptInForRolesPayloadOrError()           {}
func (ErrNotAuthorized) IsOptOutForRolesPayloadOrError()          {}
func (ErrNotAuthorized) IsUploadPersistedQueriesPayloadOrError()  {}
func (ErrNotAuthorized) IsCreateSplitPayloadOrError()             {}
func (ErrNotAuthorized) IsUpdateSplitInfoPayloadOrError()         {}
func (ErrNotAuthorized) IsUpdateSplitHiddenPayloadOrError()       {}
func (ErrNotAuthorized) IsDeleteSplitPayloadOrError()             {}
func (ErrNotAuthorized) IsUpdateSplitOrderPayloadOrError()        {}
func (ErrNotAuthorized) IsUpdateSplitPayloadOrError()             {}
func (ErrNotAuthorized) IsPublishSplitPayloadOrError()            {}
func (ErrNotAuthorized) IsUpdatePrimaryWalletPayloadOrError()     {}
func (ErrNotAuthorized) IsAdminAddWalletPayloadOrError()          {}
func (ErrNotAuthorized) IsUpdateUserExperiencePayloadOrError()    {}

type ErrPushTokenBelongsToAnotherUser struct {
	Message string `json:"message"`
}

func (ErrPushTokenBelongsToAnotherUser) IsRegisterUserPushTokenPayloadOrError()   {}
func (ErrPushTokenBelongsToAnotherUser) IsUnregisterUserPushTokenPayloadOrError() {}
func (ErrPushTokenBelongsToAnotherUser) IsError()                                 {}

type ErrSessionInvalidated struct {
	Message string `json:"message"`
}

func (ErrSessionInvalidated) IsAuthorizationError() {}
func (ErrSessionInvalidated) IsError()              {}

type ErrSplitNotFound struct {
	Message string `json:"message"`
}

func (ErrSplitNotFound) IsError()                         {}
func (ErrSplitNotFound) IsSplitByIDPayloadOrError()       {}
func (ErrSplitNotFound) IsViewerSplitByIDPayloadOrError() {}

type ErrSyncFailed struct {
	Message string `json:"message"`
}

func (ErrSyncFailed) IsRefreshTokenPayloadOrError() {}
func (ErrSyncFailed) IsError()                      {}

type ErrTokenNotFound struct {
	Message string `json:"message"`
}

func (ErrTokenNotFound) IsTokenByIDOrError() {}
func (ErrTokenNotFound) IsError()            {}

type ErrUserAlreadyExists struct {
	Message string `json:"message"`
}

func (ErrUserAlreadyExists) IsError()                    {}
func (ErrUserAlreadyExists) IsCreateUserPayloadOrError() {}

type ErrUserNotFound struct {
	Message string `json:"message"`
}

func (ErrUserNotFound) IsUserByUsernameOrError()        {}
func (ErrUserNotFound) IsUserByIDOrError()              {}
func (ErrUserNotFound) IsUserByAddressOrError()         {}
func (ErrUserNotFound) IsError()                        {}
func (ErrUserNotFound) IsLoginPayloadOrError()          {}
func (ErrUserNotFound) IsAdminAddWalletPayloadOrError() {}

type ErrUsernameNotAvailable struct {
	Message string `json:"message"`
}

func (ErrUsernameNotAvailable) IsUpdateUserInfoPayloadOrError() {}
func (ErrUsernameNotAvailable) IsError()                        {}
func (ErrUsernameNotAvailable) IsCreateUserPayloadOrError()     {}

type GIFMedia struct {
	PreviewURLs       *PreviewURLSet   `json:"previewURLs"`
	StaticPreviewURLs *PreviewURLSet   `json:"staticPreviewURLs"`
	MediaURL          *string          `json:"mediaURL"`
	MediaType         *string          `json:"mediaType"`
	ContentRenderURL  *string          `json:"contentRenderURL"`
	Dimensions        *MediaDimensions `json:"dimensions"`
}

func (GIFMedia) IsMediaSubtype() {}
func (GIFMedia) IsMedia()        {}

type GltfMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (GltfMedia) IsMediaSubtype() {}
func (GltfMedia) IsMedia()        {}

type GnosisSafeAuth struct {
	Address persist.Address `json:"address"`
	Nonce   string          `json:"nonce"`
	Message string          `json:"message"`
}

type GroupNotificationUserEdge struct {
	Node   *SplitFiUser `json:"node"`
	Cursor *string      `json:"cursor"`
}

type GroupNotificationUsersConnection struct {
	HelperGroupNotificationUsersConnectionData
	Edges    []*GroupNotificationUserEdge `json:"edges"`
	PageInfo *PageInfo                    `json:"pageInfo"`
}

type HTMLMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (HTMLMedia) IsMediaSubtype() {}
func (HTMLMedia) IsMedia()        {}

type ImageMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (ImageMedia) IsMediaSubtype() {}
func (ImageMedia) IsMedia()        {}

type InvalidMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (InvalidMedia) IsMediaSubtype() {}
func (InvalidMedia) IsMedia()        {}

type JSONMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (JSONMedia) IsMediaSubtype() {}
func (JSONMedia) IsMedia()        {}

type LoginPayload struct {
	UserID *persist.DBID `json:"userId"`
	Viewer *Viewer       `json:"viewer"`
}

func (LoginPayload) IsLoginPayloadOrError() {}

type LogoutPayload struct {
	Viewer *Viewer `json:"viewer"`
}

type MagicLinkAuth struct {
	Token string `json:"token"`
}

type MediaDimensions struct {
	Width       *int     `json:"width"`
	Height      *int     `json:"height"`
	AspectRatio *float64 `json:"aspectRatio"`
}

type NotificationEdge struct {
	Node   Notification `json:"node"`
	Cursor *string      `json:"cursor"`
}

type NotificationSettings struct {
	SomeoneFollowedYou     *bool `json:"someoneFollowedYou"`
	SomeoneViewedYourSplit *bool `json:"someoneViewedYourSplit"`
}

type NotificationSettingsInput struct {
	SomeoneFollowedYou     *bool `json:"someoneFollowedYou"`
	SomeoneViewedYourSplit *bool `json:"someoneViewedYourSplit"`
}

type NotificationsConnection struct {
	HelperNotificationsConnectionData
	Edges       []*NotificationEdge `json:"edges"`
	UnseenCount *int                `json:"unseenCount"`
	PageInfo    *PageInfo           `json:"pageInfo"`
}

type OneTimeLoginTokenAuth struct {
	Token string `json:"token"`
}

type OptInForRolesPayload struct {
	User *SplitFiUser `json:"user"`
}

func (OptInForRolesPayload) IsOptInForRolesPayloadOrError() {}

type OptOutForRolesPayload struct {
	User *SplitFiUser `json:"user"`
}

func (OptOutForRolesPayload) IsOptOutForRolesPayloadOrError() {}

type PageInfo struct {
	Total           *int   `json:"total"`
	Size            int    `json:"size"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
	HasNextPage     bool   `json:"hasNextPage"`
	StartCursor     string `json:"startCursor"`
	EndCursor       string `json:"endCursor"`
}

type PDFMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (PDFMedia) IsMediaSubtype() {}
func (PDFMedia) IsMedia()        {}

type PreverifyEmailInput struct {
	Email persist.Email `json:"email"`
}

type PreverifyEmailPayload struct {
	Email  persist.Email        `json:"email"`
	Result PreverifyEmailResult `json:"result"`
}

func (PreverifyEmailPayload) IsPreverifyEmailPayloadOrError() {}

type PreviewURLSet struct {
	Raw        *string `json:"raw"`
	Thumbnail  *string `json:"thumbnail"`
	Small      *string `json:"small"`
	Medium     *string `json:"medium"`
	Large      *string `json:"large"`
	SrcSet     *string `json:"srcSet"`
	LiveRender *string `json:"liveRender"`
	Blurhash   *string `json:"blurhash"`
}

type PrivyAuth struct {
	Token string `json:"token"`
}

type PublishSplitInput struct {
	SplitID persist.DBID `json:"splitId"`
	EditID  string       `json:"editId"`
	Caption *string      `json:"caption"`
}

type PublishSplitPayload struct {
	Split *Split `json:"split"`
}

func (PublishSplitPayload) IsPublishSplitPayloadOrError() {}

type Recipient struct {
	Dbid         persist.DBID     `json:"dbid"`
	Version      *int             `json:"version"`
	CreationTime *time.Time       `json:"creationTime"`
	LastUpdated  *time.Time       `json:"lastUpdated"`
	Address      *persist.Address `json:"address"`
	Split        *Split           `json:"split"`
	Ownership    *int             `json:"ownership"`
}

func (Recipient) IsNode() {}

type RefreshTokenPayload struct {
	Token *Token `json:"token"`
}

func (RefreshTokenPayload) IsRefreshTokenPayloadOrError() {}

type RegisterUserPushTokenPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (RegisterUserPushTokenPayload) IsRegisterUserPushTokenPayloadOrError() {}

type RemoveUserWalletsPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (RemoveUserWalletsPayload) IsRemoveUserWalletsPayloadOrError() {}

type ResendVerificationEmailPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (ResendVerificationEmailPayload) IsResendVerificationEmailPayloadOrError() {}

type SearchSplitsPayload struct {
	Results []*SplitSearchResult `json:"results"`
}

func (SearchSplitsPayload) IsSearchSplitsPayloadOrError() {}

type SearchUsersPayload struct {
	Results []*UserSearchResult `json:"results"`
}

func (SearchUsersPayload) IsSearchUsersPayloadOrError() {}

type SetSpamPreferenceInput struct {
	Tokens []persist.DBID `json:"tokens"`
	IsSpam bool           `json:"isSpam"`
}

type SetSpamPreferencePayload struct {
	Tokens []*Token `json:"tokens"`
}

func (SetSpamPreferencePayload) IsSetSpamPreferencePayloadOrError() {}

type Split struct {
	Dbid        persist.DBID   `json:"dbid"`
	Version     *int           `json:"version"`
	Name        *string        `json:"name"`
	Description *string        `json:"description"`
	Chain       *persist.Chain `json:"chain"`
	LogoURL     *string        `json:"logoURL"`
	BannerURL   *string        `json:"bannerURL"`
	BadgeURL    *string        `json:"badgeURL"`
	Assets      []*Asset       `json:"assets"`
	Shares      []*Recipient   `json:"shares"`
}

func (Split) IsNode()                    {}
func (Split) IsSplitByIDPayloadOrError() {}

type SplitFiUser struct {
	HelperSplitFiUserData
	Dbid                persist.DBID    `json:"dbid"`
	Username            *string         `json:"username"`
	Bio                 *string         `json:"bio"`
	Traits              *string         `json:"traits"`
	Universal           *bool           `json:"universal"`
	Roles               []*persist.Role `json:"roles"`
	Wallets             []*Wallet       `json:"wallets"`
	PrimaryWallet       *Wallet         `json:"primaryWallet"`
	Splits              []*Split        `json:"splits"`
	SplitsByChain       *ChainSplits    `json:"splitsByChain"`
	IsAuthenticatedUser *bool           `json:"isAuthenticatedUser"`
}

func (SplitFiUser) IsNode()                              {}
func (SplitFiUser) IsSplitFiUserOrWallet()               {}
func (SplitFiUser) IsSplitFiUserOrAddress()              {}
func (SplitFiUser) IsUserByUsernameOrError()             {}
func (SplitFiUser) IsUserByIDOrError()                   {}
func (SplitFiUser) IsUserByAddressOrError()              {}
func (SplitFiUser) IsAddRolesToUserPayloadOrError()      {}
func (SplitFiUser) IsRevokeRolesFromUserPayloadOrError() {}

type SplitPositionInput struct {
	SplitID  persist.DBID `json:"splitId"`
	Position string       `json:"position"`
}

type SplitSearchResult struct {
	Split *Split `json:"split"`
}

type SplitShareInput struct {
	SplitID          persist.DBID    `json:"splitId"`
	RecipientAddress persist.Address `json:"recipientAddress"`
	Ownership        int             `json:"ownership"`
}

type TextMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (TextMedia) IsMediaSubtype() {}
func (TextMedia) IsMedia()        {}

type Token struct {
	Dbid            persist.DBID   `json:"dbid"`
	Version         *int           `json:"version"`
	CreationTime    *time.Time     `json:"creationTime"`
	LastUpdated     *time.Time     `json:"lastUpdated"`
	TokenType       *TokenType     `json:"tokenType"`
	Chain           *persist.Chain `json:"chain"`
	Name            *string        `json:"name"`
	Symbol          *string        `json:"symbol"`
	Decimals        *int           `json:"decimals"`
	Logo            *string        `json:"logo"`
	TotalSupply     *int           `json:"totalSupply"`
	ContractAddress *int           `json:"contractAddress"`
	BlockNumber     *string        `json:"blockNumber"`
	IsSpam          *bool          `json:"isSpam"`
}

func (Token) IsNode()             {}
func (Token) IsTokenByIDOrError() {}

type UnknownMedia struct {
	PreviewURLs      *PreviewURLSet   `json:"previewURLs"`
	MediaURL         *string          `json:"mediaURL"`
	MediaType        *string          `json:"mediaType"`
	ContentRenderURL *string          `json:"contentRenderURL"`
	Dimensions       *MediaDimensions `json:"dimensions"`
}

func (UnknownMedia) IsMediaSubtype() {}
func (UnknownMedia) IsMedia()        {}

type UnregisterUserPushTokenPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UnregisterUserPushTokenPayload) IsUnregisterUserPushTokenPayloadOrError() {}

type UnsubscribeFromEmailTypeInput struct {
	Type  EmailUnsubscriptionType `json:"type"`
	Token string                  `json:"token"`
}

type UnsubscribeFromEmailTypePayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UnsubscribeFromEmailTypePayload) IsUnsubscribeFromEmailTypePayloadOrError() {}

type UpdateEmailInput struct {
	Email persist.Email `json:"email"`
	// authMechanism is an optional parameter that can verify a user's email address in lieu of sending
	// a verification email to the user. If not provided, a verification email will be sent.
	AuthMechanism *AuthMechanism `json:"authMechanism"`
}

type UpdateEmailNotificationSettingsInput struct {
	UnsubscribedFromAll           bool `json:"unsubscribedFromAll"`
	UnsubscribedFromNotifications bool `json:"unsubscribedFromNotifications"`
}

type UpdateEmailNotificationSettingsPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdateEmailNotificationSettingsPayload) IsUpdateEmailNotificationSettingsPayloadOrError() {}

type UpdateEmailPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdateEmailPayload) IsUpdateEmailPayloadOrError() {}

type UpdatePrimaryWalletPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdatePrimaryWalletPayload) IsUpdatePrimaryWalletPayloadOrError() {}

type UpdateSplitHiddenInput struct {
	ID     persist.DBID `json:"id"`
	Hidden bool         `json:"hidden"`
}

type UpdateSplitHiddenPayload struct {
	Split *Split `json:"split"`
}

func (UpdateSplitHiddenPayload) IsUpdateSplitHiddenPayloadOrError() {}

type UpdateSplitInfoInput struct {
	ID          persist.DBID `json:"id"`
	Name        *string      `json:"name"`
	Description *string      `json:"description"`
}

type UpdateSplitInfoPayload struct {
	Split *Split `json:"split"`
}

func (UpdateSplitInfoPayload) IsUpdateSplitInfoPayloadOrError() {}

type UpdateSplitInput struct {
	SplitID            persist.DBID   `json:"splitId"`
	Name               *string        `json:"name"`
	Description        *string        `json:"description"`
	Caption            *string        `json:"caption"`
	DeletedCollections []persist.DBID `json:"deletedCollections"`
	Order              []persist.DBID `json:"order"`
	EditID             *string        `json:"editId"`
}

type UpdateSplitOrderInput struct {
	Positions []*SplitPositionInput `json:"positions"`
}

type UpdateSplitOrderPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdateSplitOrderPayload) IsUpdateSplitOrderPayloadOrError() {}

type UpdateSplitPayload struct {
	Split *Split `json:"split"`
}

func (UpdateSplitPayload) IsUpdateSplitPayloadOrError() {}

type UpdateUserExperienceInput struct {
	ExperienceType UserExperienceType `json:"experienceType"`
	Experienced    bool               `json:"experienced"`
}

type UpdateUserExperiencePayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdateUserExperiencePayload) IsUpdateUserExperiencePayloadOrError() {}

type UpdateUserInfoInput struct {
	Username string `json:"username"`
	Bio      string `json:"bio"`
}

type UpdateUserInfoPayload struct {
	Viewer *Viewer `json:"viewer"`
}

func (UpdateUserInfoPayload) IsUpdateUserInfoPayloadOrError() {}

type UploadPersistedQueriesInput struct {
	PersistedQueries *string `json:"persistedQueries"`
}

type UploadPersistedQueriesPayload struct {
	Message *string `json:"message"`
}

func (UploadPersistedQueriesPayload) IsUploadPersistedQueriesPayloadOrError() {}

type UserEdge struct {
	Node   *SplitFiUser `json:"node"`
	Cursor *string      `json:"cursor"`
}

type UserEmail struct {
	Email                     *persist.Email                   `json:"email"`
	VerificationStatus        *persist.EmailVerificationStatus `json:"verificationStatus"`
	EmailNotificationSettings *EmailNotificationSettings       `json:"emailNotificationSettings"`
}

type UserExperience struct {
	Type        UserExperienceType `json:"type"`
	Experienced bool               `json:"experienced"`
}

type UserSearchResult struct {
	User *SplitFiUser `json:"user"`
}

type UsersConnection struct {
	Edges    []*UserEdge `json:"edges"`
	PageInfo *PageInfo   `json:"pageInfo"`
}

type VerifyEmailInput struct {
	Token string `json:"token"`
}

type VerifyEmailMagicLinkInput struct {
	Email persist.Email `json:"email"`
}

type VerifyEmailMagicLinkPayload struct {
	CanSend bool `json:"canSend"`
}

func (VerifyEmailMagicLinkPayload) IsVerifyEmailMagicLinkPayloadOrError() {}

type VerifyEmailPayload struct {
	Email persist.Email `json:"email"`
}

func (VerifyEmailPayload) IsVerifyEmailPayloadOrError() {}

type VideoMedia struct {
	PreviewURLs       *PreviewURLSet   `json:"previewURLs"`
	MediaURL          *string          `json:"mediaURL"`
	MediaType         *string          `json:"mediaType"`
	ContentRenderURLs *VideoURLSet     `json:"contentRenderURLs"`
	Dimensions        *MediaDimensions `json:"dimensions"`
}

func (VideoMedia) IsMediaSubtype() {}
func (VideoMedia) IsMedia()        {}

type VideoURLSet struct {
	Raw    *string `json:"raw"`
	Small  *string `json:"small"`
	Medium *string `json:"medium"`
	Large  *string `json:"large"`
}

type ViewSplitPayload struct {
	Split *Split `json:"split"`
}

func (ViewSplitPayload) IsViewSplitPayloadOrError() {}

type Viewer struct {
	HelperViewerData
	User         *SplitFiUser   `json:"user"`
	ViewerSplits []*ViewerSplit `json:"viewerSplits"`
	Email        *UserEmail     `json:"email"`
	// Returns a list of notifications in reverse chronological order.
	// Seen notifications come after unseen notifications
	Notifications        *NotificationsConnection `json:"notifications"`
	NotificationSettings *NotificationSettings    `json:"notificationSettings"`
	UserExperiences      []*UserExperience        `json:"userExperiences"`
}

func (Viewer) IsNode()          {}
func (Viewer) IsViewerOrError() {}

type ViewerSplit struct {
	Split *Split `json:"split"`
}

func (ViewerSplit) IsViewerSplitByIDPayloadOrError() {}

type Wallet struct {
	Dbid         persist.DBID          `json:"dbid"`
	ChainAddress *persist.ChainAddress `json:"chainAddress"`
	Chain        *persist.Chain        `json:"chain"`
	WalletType   *persist.WalletType   `json:"walletType"`
	Splits       []*Split              `json:"splits"`
}

func (Wallet) IsNode()                {}
func (Wallet) IsSplitFiUserOrWallet() {}

type EmailUnsubscriptionType string

const (
	EmailUnsubscriptionTypeAll           EmailUnsubscriptionType = "All"
	EmailUnsubscriptionTypeNotifications EmailUnsubscriptionType = "Notifications"
)

var AllEmailUnsubscriptionType = []EmailUnsubscriptionType{
	EmailUnsubscriptionTypeAll,
	EmailUnsubscriptionTypeNotifications,
}

func (e EmailUnsubscriptionType) IsValid() bool {
	switch e {
	case EmailUnsubscriptionTypeAll, EmailUnsubscriptionTypeNotifications:
		return true
	}
	return false
}

func (e EmailUnsubscriptionType) String() string {
	return string(e)
}

func (e *EmailUnsubscriptionType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EmailUnsubscriptionType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EmailUnsubscriptionType", str)
	}
	return nil
}

func (e EmailUnsubscriptionType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type PreverifyEmailResult string

const (
	PreverifyEmailResultInvalid PreverifyEmailResult = "Invalid"
	PreverifyEmailResultRisky   PreverifyEmailResult = "Risky"
	PreverifyEmailResultValid   PreverifyEmailResult = "Valid"
)

var AllPreverifyEmailResult = []PreverifyEmailResult{
	PreverifyEmailResultInvalid,
	PreverifyEmailResultRisky,
	PreverifyEmailResultValid,
}

func (e PreverifyEmailResult) IsValid() bool {
	switch e {
	case PreverifyEmailResultInvalid, PreverifyEmailResultRisky, PreverifyEmailResultValid:
		return true
	}
	return false
}

func (e PreverifyEmailResult) String() string {
	return string(e)
}

func (e *PreverifyEmailResult) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = PreverifyEmailResult(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid PreverifyEmailResult", str)
	}
	return nil
}

func (e PreverifyEmailResult) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TokenType string

const (
	TokenTypeErc721  TokenType = "ERC721"
	TokenTypeErc1155 TokenType = "ERC1155"
	TokenTypeErc20   TokenType = "ERC20"
)

var AllTokenType = []TokenType{
	TokenTypeErc721,
	TokenTypeErc1155,
	TokenTypeErc20,
}

func (e TokenType) IsValid() bool {
	switch e {
	case TokenTypeErc721, TokenTypeErc1155, TokenTypeErc20:
		return true
	}
	return false
}

func (e TokenType) String() string {
	return string(e)
}

func (e *TokenType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TokenType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TokenType", str)
	}
	return nil
}

func (e TokenType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type UserExperienceType string

const (
	UserExperienceTypeEmailUpsell                       UserExperienceType = "EmailUpsell"
	UserExperienceTypeMaintenanceFeb2023                UserExperienceType = "MaintenanceFeb2023"
	UserExperienceTypeTwitterConnectionOnboardingUpsell UserExperienceType = "TwitterConnectionOnboardingUpsell"
	UserExperienceTypeUpsellMintMemento4                UserExperienceType = "UpsellMintMemento4"
)

var AllUserExperienceType = []UserExperienceType{
	UserExperienceTypeEmailUpsell,
	UserExperienceTypeMaintenanceFeb2023,
	UserExperienceTypeTwitterConnectionOnboardingUpsell,
	UserExperienceTypeUpsellMintMemento4,
}

func (e UserExperienceType) IsValid() bool {
	switch e {
	case UserExperienceTypeEmailUpsell, UserExperienceTypeMaintenanceFeb2023, UserExperienceTypeTwitterConnectionOnboardingUpsell, UserExperienceTypeUpsellMintMemento4:
		return true
	}
	return false
}

func (e UserExperienceType) String() string {
	return string(e)
}

func (e *UserExperienceType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserExperienceType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserExperienceType", str)
	}
	return nil
}

func (e UserExperienceType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
